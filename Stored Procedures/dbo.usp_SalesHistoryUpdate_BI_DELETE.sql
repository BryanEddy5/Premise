SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
/*	Author:		Bryan Eddy
	Date:		12/11/2017
	Desc:		Procedure to update the Sales History being
	Rev:		2
	Update:		Updated to MERGE statement and added error handling
	
	 */

CREATE PROCEDURE [dbo].[usp_SalesHistoryUpdate_BI_DELETE]
as


--delete SalesHistory_BI_Data 
--FROM             sales_pivot_bi AS K INNER JOIN
--                         SalesHistory_BI_Data AS B ON K.SO_NUMBER = B.SO_NUMBER AND B.SO_LINE = K.SO_LINE 
--						 --AND COALESCE (K.SHIP_TO_POSTAL_CODE, '') = B.SHIP_TO_POSTAL_CODE AND B.SHIP_TO_STATE = COALESCE (K.SHIP_TO_STATE, '') 
--						 AND B.SHIP_TO_COUNTRY =  K.SHIP_TO_COUNTRY


SET NOCOUNT ON;

DECLARE @ErrorNumber INT = ERROR_NUMBER();
DECLARE @ErrorLine INT = ERROR_LINE();
	BEGIN TRY
		BEGIN tran
			;WITH cteSalesHistory
			AS(
			SELECT         K.BU, K.ORG, K.CALENDAR_QUARTER, K.FISCAL_QUARTER, K.Month, CAST(LEFT(K.[DATE],10) AS DATETIME) Date, K.CUSTOMER_CLUSTER, K.CUSTOMER, K.AGENT, K.CUSTOMER_CLASS, 
								 K.CUSTOMER_CATEGORY, K.TERRITORY_MARKET, K.MARKET, K.CLUSTER_ACCOUNT, COALESCE (K.SHIP_TO_STATE, '') AS SHIP_TO_STATE, 
								 COALESCE (K.SHIP_TO_COUNTRY, '') AS SHIP_TO_COUNTRY, COALESCE (K.SHIP_TO_POSTAL_CODE, '') AS SHIP_TO_POSTAL_CODE, K.ITEM_NUMBER, K.ITEM_DESCRIPTION, SUM(K.REVENUE)
								 AS REVENUE, SUM(K.QUANTITY) AS QUANTITY, K.UOM, K.PO, K.SO_NUMBER, K.SO_LINE, K.CSR, K.PRODUCT_CATEGORY--, B.ITEM_NUMBER
			--INTO #SalesHistory
			FROM            sales_pivot_bi AS K 
			GROUP BY K.BU, K.ORG, K.CALENDAR_QUARTER, K.FISCAL_QUARTER, K.Month, K.DATE, K.CUSTOMER_CLUSTER, K.CUSTOMER, K.AGENT, K.CUSTOMER_CLASS, 
									 K.CUSTOMER_CATEGORY, K.TERRITORY_MARKET, K.MARKET, K.CLUSTER_ACCOUNT, K.SHIP_TO_STATE, K.SHIP_TO_COUNTRY, K.SHIP_TO_POSTAL_CODE, 
									 K.ITEM_NUMBER, K.ITEM_DESCRIPTION, K.UOM, K.PO, K.SO_NUMBER, K.SO_LINE, K.CSR, K.PRODUCT_CATEGORY, K.ORG
			HAVING       (K.ORG = 'cab') AND (K.SO_LINE IS NOT NULL)
			)
			MERGE SalesHistory_BI_Data AS Target
			USING cteSalesHistory AS Source
			ON ( Target.SO_NUMBER = Source.SO_NUMBER AND Source.SO_LINE = Target.SO_LINE 
				AND COALESCE (Target.SHIP_TO_POSTAL_CODE, '') = Source.SHIP_TO_POSTAL_CODE AND Source.SHIP_TO_STATE = COALESCE (Target.SHIP_TO_STATE, '') 
				AND Source.SHIP_TO_COUNTRY =  Target.SHIP_TO_COUNTRY AND Source.SO_NUMBER = Target.SO_NUMBER AND TARGET.SO_LINE = SOURCE.SO_LINE
				AND Target.DATE = SOURCE.DATE AND TARGET.AGENT = Source.AGENT)
			WHEN NOT MATCHED BY TARGET THEN
				INSERT (BU, ORG, CALENDAR_QUARTER, FISCAL_QUARTER, Month, DATE, CUSTOMER_CLUSTER, CUSTOMER, AGENT, CUSTOMER_CLASS, CUSTOMER_CATEGORY, 
								 TERRITORY_MARKET, MARKET, CLUSTER_ACCOUNT, SHIP_TO_STATE, SHIP_TO_COUNTRY, SHIP_TO_POSTAL_CODE, ITEM_NUMBER, ITEM_DESCRIPTION, 
								 REVENUE, QUANTITY, UOM, PO, SO_NUMBER, SO_LINE, CSR, PRODUCT_CATEGORY)
				VALUES (BU, ORG, CALENDAR_QUARTER, FISCAL_QUARTER, Month, DATE, CUSTOMER_CLUSTER, CUSTOMER, AGENT, CUSTOMER_CLASS, CUSTOMER_CATEGORY
								, TERRITORY_MARKET, MARKET, CLUSTER_ACCOUNT, SHIP_TO_STATE ,SHIP_TO_COUNTRY, SHIP_TO_POSTAL_CODE, ITEM_NUMBER, ITEM_DESCRIPTION,
								 REVENUE, QUANTITY, UOM, PO, SO_NUMBER, SO_LINE, CSR, PRODUCT_CATEGORY)
			WHEN MATCHED THEN
			UPDATE SET target.BU = Source.BU, 
						Target.ORG  = Source.ORG ,
						Target.CALENDAR_QUARTER  = Source.CALENDAR_QUARTER ,
						Target.FISCAL_QUARTER  = Source.FISCAL_QUARTER ,
						Target.Month  = Source.Month ,
						Target.DATE  = Source.DATE ,
						Target.CUSTOMER_CLUSTER  = Source.CUSTOMER_CLUSTER ,
						Target.CUSTOMER  = Source.CUSTOMER ,
						Target.AGENT  = Source.AGENT ,
						Target.CUSTOMER_CLASS  = Source.CUSTOMER_CLASS ,
						Target.CUSTOMER_CATEGORY  = Source.CUSTOMER_CATEGORY ,
						Target.TERRITORY_MARKET  = Source.TERRITORY_MARKET ,
						Target.MARKET  = Source.MARKET ,
						Target.CLUSTER_ACCOUNT  = Source.CLUSTER_ACCOUNT ,
						Target.SHIP_TO_STATE  = Source.SHIP_TO_STATE ,
						Target.SHIP_TO_COUNTRY  = Source.SHIP_TO_COUNTRY ,
						Target.SHIP_TO_POSTAL_CODE  = Source.SHIP_TO_POSTAL_CODE ,
						Target.ITEM_NUMBER  = Source.ITEM_NUMBER ,
						Target.ITEM_DESCRIPTION  = Source.ITEM_DESCRIPTION ,
						Target.REVENUE  = Source.REVENUE ,
						Target.QUANTITY  = Source.QUANTITY ,
						Target.UOM  = Source.UOM ,
						Target.PO  = Source.PO ,
						Target.SO_NUMBER  = Source.SO_NUMBER ,
						Target.SO_LINE  = Source.SO_LINE ,
						Target.CSR  = Source.CSR ,
						Target.PRODUCT_CATEGORY = Source.PRODUCT_CATEGORY
					;
				
		COMMIT TRAN
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION;
 
		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
 
		THROW;
	END CATCH;

--INSERT INTO SalesHistory_BI_Data
--                         (BU, ORG, CALENDAR_QUARTER, FISCAL_QUARTER, Month, DATE, CUSTOMER_CLUSTER, CUSTOMER, AGENT, CUSTOMER_CLASS, CUSTOMER_CATEGORY, 
--                         TERRITORY_MARKET, MARKET, CLUSTER_ACCOUNT, SHIP_TO_STATE, SHIP_TO_COUNTRY, SHIP_TO_POSTAL_CODE, ITEM_NUMBER, ITEM_DESCRIPTION, 
--                         REVENUE, QUANTITY, UOM, PO, SO_NUMBER, SO_LINE, CSR, PRODUCT_CATEGORY)
--SELECT        K.BU, K.ORG, K.CALENDAR_QUARTER, K.FISCAL_QUARTER, K.Month, CAST(LEFT(K.[DATE],10) AS DATETIME), K.CUSTOMER_CLUSTER, K.CUSTOMER, K.AGENT, K.CUSTOMER_CLASS, 
--                         K.CUSTOMER_CATEGORY, K.TERRITORY_MARKET, K.MARKET, K.CLUSTER_ACCOUNT, COALESCE (K.SHIP_TO_STATE, '') AS Expr1, 
--                         COALESCE (K.SHIP_TO_COUNTRY, '') AS Expr2, COALESCE (K.SHIP_TO_POSTAL_CODE, '') AS Expr3, K.ITEM_NUMBER, K.ITEM_DESCRIPTION, SUM(K.REVENUE) 
--                         AS REVENUE, SUM(K.QUANTITY) AS QUANTITY, K.UOM, K.PO, K.SO_NUMBER, K.SO_LINE, K.CSR, K.PRODUCT_CATEGORY--, B.ITEM_NUMBER
--FROM            sales_pivot_bi AS K LEFT OUTER JOIN
--                         SalesHistory_BI_Data AS B ON K.SO_NUMBER = B.SO_NUMBER AND B.SO_LINE = K.SO_LINE 
--						 AND COALESCE (K.SHIP_TO_POSTAL_CODE, '') = B.SHIP_TO_POSTAL_CODE AND B.SHIP_TO_STATE = COALESCE (K.SHIP_TO_STATE, '') 
--						 AND B.SHIP_TO_COUNTRY =  K.SHIP_TO_COUNTRY
--GROUP BY K.BU, K.ORG, K.CALENDAR_QUARTER, K.FISCAL_QUARTER, K.Month, K.DATE, K.CUSTOMER_CLUSTER, K.CUSTOMER, K.AGENT, K.CUSTOMER_CLASS, 
--                         K.CUSTOMER_CATEGORY, K.TERRITORY_MARKET, K.MARKET, K.CLUSTER_ACCOUNT, K.SHIP_TO_STATE, K.SHIP_TO_COUNTRY, K.SHIP_TO_POSTAL_CODE, 
--                         K.ITEM_NUMBER, K.ITEM_DESCRIPTION, K.UOM, K.PO, K.SO_NUMBER, K.SO_LINE, K.CSR, K.PRODUCT_CATEGORY, K.ORG, B.ITEM_NUMBER
--HAVING       (B.ITEM_NUMBER IS NULL) AND 
--(K.ORG = 'cab') AND (K.SO_LINE IS NOT NULL) --AND (K.SO_NUMBER =  2107871)
GO
