diff --git a/Security/Roles/db_datareader.sql b/Security/Roles/db_datareader.sql
index 70bd875..b68030b 100644
--- a/Security/Roles/db_datareader.sql
+++ b/Security/Roles/db_datareader.sql
@@ -1,3 +1,5 @@
+
+EXEC sp_addrolemember N'db_datareader', N'NAA\SPB spb_PREMISE_RO'
 EXEC sp_addrolemember N'db_datareader', N'NAA\eddybc'
 GO
 EXEC sp_addrolemember N'db_datareader', N'NAA\houckmi'
diff --git a/Security/Roles/db_ddladmin.sql b/Security/Roles/db_ddladmin.sql
index 204ebf7..6dfe3c9 100644
--- a/Security/Roles/db_ddladmin.sql
+++ b/Security/Roles/db_ddladmin.sql
@@ -1,2 +1,4 @@
+
+EXEC sp_addrolemember N'db_ddladmin', N'NAA\kimjo'
 EXEC sp_addrolemember N'db_ddladmin', N'NAA\eddybc'
 GO
diff --git a/Security/Schemas/DiamondJet.sql b/Security/Schemas/DiamondJet.sql
new file mode 100644
index 0000000..4d66161
--- /dev/null
+++ b/Security/Schemas/DiamondJet.sql
@@ -0,0 +1,3 @@
+CREATE SCHEMA [DiamondJet]
+AUTHORIZATION [dbo]
+GO
diff --git a/Security/Users/NAA_SPB spb_PREMISE_RO.sql b/Security/Users/NAA_SPB spb_PREMISE_RO.sql
new file mode 100644
index 0000000..f8e5c24
--- /dev/null
+++ b/Security/Users/NAA_SPB spb_PREMISE_RO.sql
@@ -0,0 +1,5 @@
+IF NOT EXISTS (SELECT * FROM master.dbo.syslogins WHERE loginname = N'NAA\SPB spb_PREMISE_RO')
+CREATE LOGIN [NAA\SPB spb_PREMISE_RO] FROM WINDOWS
+GO
+CREATE USER [NAA\SPB spb_PREMISE_RO] FOR LOGIN [NAA\SPB spb_PREMISE_RO]
+GO
diff --git a/Stored Procedures/DiamondJet.usp_SetJobPrint.sql b/Stored Procedures/DiamondJet.usp_SetJobPrint.sql
new file mode 100644
index 0000000..9bfc489
--- /dev/null
+++ b/Stored Procedures/DiamondJet.usp_SetJobPrint.sql
@@ -0,0 +1,87 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+/*
+Author:		Bryan Eddy
+Date:		5/2/2018
+Desc:		Procedure for updating/inserting print records into the db
+Version:	1
+Update:		n/a
+*/
+
+
+CREATE PROC [DiamondJet].[usp_SetJobPrint]
+	@Item NVARCHAR(100),
+	@LotNumber NVARCHAR(100),
+	@JobNumber NVARCHAR(100)
+AS
+
+SET NOCOUNT ON;
+
+DECLARE @Print TABLE(
+PrintLine NVARCHAR(1000),
+ItemNumber NVARCHAR(100),
+TemplateID INT,
+JobNumber NVARCHAR(100),
+VerificationPrint NVARCHAR(1000)
+)
+
+BEGIN
+
+DECLARE @ErrorNumber INT = ERROR_NUMBER();
+DECLARE @ErrorLine INT = ERROR_LINE();
+
+	BEGIN TRY
+		BEGIN TRAN
+			;WITH ctePrint
+			AS(
+				SELECT i.Oracle, t.Template, t.TemplateID
+				,ROW_NUMBER() OVER (PARTITION BY i.Oracle ORDER BY t.MinOD desc) RowNumber
+				,@JobNumber AS JobNumber
+				,COALESCE(i.PrintLine1,'') + ' ' + COALESCE(i.PrintLine2,'') + ' ' + CASE WHEN [Print Item No] <> 0 THEN [Item No] + ' ' ELSE ' ' END 
+									+ COALESCE(i.PrintLine3,'') + ' ' 
+									+ CASE WHEN [Print Reel No] <> 0 THEN ' LOT NO. '+ @LotNumber + ' '  ELSE ' ' END + COALESCE(DiamondJetPrintLine4Code,'') AS ConcatPrintLineDiamondJet
+
+				,COALESCE(i.PrintLine1,'') + ' ' + COALESCE(i.PrintLine2,'') + ' ' + CASE WHEN [Print Item No] <> 0 THEN [Item No] + ' ' ELSE ' ' END 
+									+ COALESCE(i.PrintLine3,'') + ' ' 
+									+ CASE WHEN [Print Reel No] <> 0 THEN ' LOT NO. '+ @LotNumber + ' '  ELSE ' ' END + COALESCE(i.PrintLine4,'') AS VerificationPrint
+				FROM DBO.qryBasePrint i left JOIN DiamondJet.MarkingIntervals k ON I.Spacing = k.MarkingInterval
+				left JOIN DiamondJet.Templates t ON t.MarkingIntervalID = k.MarkingIntervalID
+				WHERE t.MinOD <= i.NominalOD
+			) 
+			INSERT INTO @Print
+			(
+				PrintLine,
+				ItemNumber,
+				TemplateID,
+				JobNumber,
+				VerificationPrint
+			)
+			SELECT  k.ConcatPrintLineDiamondJet, k.Oracle, k.TemplateID, JobNumber, k.VerificationPrint
+			FROM ctePrint k
+			WHERE k.RowNumber = 1 AND k.Oracle = @ITEM
+
+
+			MERGE DiamondJet.JobPrint T
+			USING @Print AS S
+			ON t.JobNumber = s.JobNumber
+			WHEN MATCHED
+				THEN UPDATE SET T.PrintString = S.PrintLine, T.VerificationPrint = S.VerificationPrint
+			WHEN NOT MATCHED
+				THEN INSERT (JobNumber, PrintString, ItemNumber, TemplateID,VerificationPrint)
+				VALUES (S.JobNumber, S.PrintLine, S.ItemNumber, S.TemplateID,VerificationPrint);
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+END
+GO
diff --git a/Stored Procedures/SalesForce.usp_CatalogCode_Armor_Cost_Weight.sql b/Stored Procedures/SalesForce.usp_CatalogCode_Armor_Cost_Weight.sql
new file mode 100644
index 0000000..79fc8b2
--- /dev/null
+++ b/Stored Procedures/SalesForce.usp_CatalogCode_Armor_Cost_Weight.sql
@@ -0,0 +1,87 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+CREATE PROCEDURE [SalesForce].[usp_CatalogCode_Armor_Cost_Weight]
+as
+BEGIN 
+
+
+
+IF OBJECT_ID(N'tempdb..#BaseArmor', N'U') IS NOT NULL
+DROP TABLE #BaseArmor
+
+	SELECT JacketLetter, B.NominalOD CoreOD, G.MaxCoreOD, Base, ArmorExtension, G.NominalOD ArmorOD, AmorMaterialCost
+	, ArmorWeight, SalesForceDescription, K.BaseID, G.Armor, JacketRating, ArmorCostAdder, P.ArmorSize
+	INTO #BaseArmor
+	FROM dbo.tblCableConstructionReferences K INNER JOIN dbo.tblCableConstructions B ON K.BaseID = B.BaseID INNER JOIN dbo.tblArmor_Costing_Weight G ON G.JacketLetter = K.CableLevel1
+		INNER JOIN dbo.tblDesignTypes E ON E.DesignTypeID = K.DesignTypeID INNER JOIN tblDesignArmor P ON P.Armor = G.Armor
+	WHERE B.NominalOD <= G.MaxCoreOD AND E.Armor = 1
+	order by base
+
+
+IF OBJECT_ID(N'tempdb..#BaseMaxArmor', N'U') IS NOT NULL
+DROP TABLE #BaseMaxArmor
+
+SELECT MIN(MaxCoreOD) MaxCoreOD, Base, JacketLetter
+INTO #BaseMaxArmor
+FROM #BaseArmor
+GROUP BY Base, JacketLetter
+
+
+--IF OBJECT_ID(N'ArmorConstructionBase', N'U') IS NOT NULL
+--DROP TABLE #ArmorCost
+TRUNCATE TABLE ArmorConstructionBase_TEMP;
+
+
+DECLARE @ErrorNumber INT = ERROR_NUMBER();
+DECLARE @ErrorLine INT = ERROR_LINE();
+
+	BEGIN TRY
+		BEGIN TRAN
+
+		INSERT INTO ArmorConstructionBase_TEMP
+		SELECT Base, Resources + OverHead + AmorMaterialCost as ArmorLoadedCost, ArmorExtension, AmorMaterialCost, ArmorWeight, ArmorOD, Armor, JacketRating, ArmorCostAdder
+		,ArmorSize
+		--INTO ArmorConstructionBase
+		FROM 
+		(
+			SELECT G.*, 0.02482 + 0.001667 as Resources, 0.12836 as OverHead
+			FROM #BaseArmor G INNER JOIN #BaseMaxArmor K ON G.MaxCoreOD = K.MaxCoreOD AND G.Base = K.Base AND K.JacketLetter = G.JacketLetter
+
+		) Armor
+
+
+		INSERT INTO tblSalesForce_Catalog
+								 (CatalogCode, Base, Weight_kg_per_m, 
+								 DesignTypeDesc, Jacket, TBType, TBDescription, NominalOD, NumSubFillers, NumSubPositions,FinishedCableColor,TBLetter,
+								 CablePasses,FiberCount,UnitOD, BaseID,DesignTypeId, LoadedBaseCost, Armored, 
+								 BaseCost, Boxed, OracleItem,Fiber_Type__c,Armor_Type__c,Print_Type__c, Min_Order_Quantity__c, ArmorJacket,FiberID,
+								 FurcationTube, SetupID, Non_Standard, Active, ProdLevel3)
+
+		SELECT		CatalogCode  + ArmorExtension, c. Base, Weight_kg_per_m+ArmorWeight, 
+								 C.DesignTypeDesc, Jacket, TBType, TBDescription, ArmorOD, NumSubFillers, NumSubPositions,FinishedCableColor,TBLetter,
+								 CablePasses,FiberCount,UnitOD, BaseID,C.DesignTypeId, LoadedBaseCost ,1, 
+								 BaseCost ,0 as Boxed, OracleItem,Fiber_Type__c, 'Armored' as Armor_Type__c,Print_Type__c,C.Min_Order_Quantity__c, JacketRating,FiberID
+								 ,FurcationTube, SetupID, Non_Standard, C.Active,ProdLevel3
+		FROM		ArmorConstructionBase_TEMP A INNER JOIN tblSalesForce_Catalog C ON A.BASE = C.BASE INNER JOIN dbo.tblDesignTypes K ON K.DesignTypeID = C.DesignTypeID
+		WHERE		K.Armor = 1 AND C.NominalOD > 2.9
+
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+
+END
+
+GO
diff --git a/Stored Procedures/SalesForce.usp_CatalogCode_Armor_Cost_Weight_Create_Table.sql b/Stored Procedures/SalesForce.usp_CatalogCode_Armor_Cost_Weight_Create_Table.sql
new file mode 100644
index 0000000..e915e04
--- /dev/null
+++ b/Stored Procedures/SalesForce.usp_CatalogCode_Armor_Cost_Weight_Create_Table.sql
@@ -0,0 +1,71 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+CREATE PROCEDURE [SalesForce].[usp_CatalogCode_Armor_Cost_Weight_Create_Table]
+as
+BEGIN 
+
+
+DECLARE @ErrorNumber INT = ERROR_NUMBER();
+DECLARE @ErrorLine INT = ERROR_LINE();
+
+TRUNCATE TABLE tblArmor_Costing_Weight;
+
+	BEGIN TRY
+		BEGIN TRAN
+		INSERT INTO tblArmor_Costing_Weight (AmorMaterialCost, ArmorWeight, MaxArmorOD,ArmorExtension, JacketLetter, Armor, MaxCoreOD, NominalOD, Compound, ArmorSize, JacketRating)
+		SELECT        ROUND((ColorCost.Item_Cost * 0.03 * tblMaterialDensity.SpecificGravity) * (PI() * (SQUARE((AmorMaterialCost.MaxArmorOD + A.WallThickness * 2) / 2) 
+								 - SQUARE(AmorMaterialCost.MaxArmorOD / 2))) / 1000 + (K.Item_Cost * 0.97 * tblMaterialDensity.SpecificGravity) * (PI() 
+								 * (SQUARE((AmorMaterialCost.MaxArmorOD + A.WallThickness * 2) / 2) - SQUARE(AmorMaterialCost.MaxArmorOD / 2))) / 1000 + AmorMaterialCost.AmorMaterialCost,6) AS AmorMaterialCost, 
+
+
+					ROUND(( tblMaterialDensity.SpecificGravity) * (PI()* (SQUARE((AmorMaterialCost.MaxArmorOD + A.WallThickness * 2) / 2) - SQUARE(AmorMaterialCost.MaxArmorOD / 2)))
+					 / 1000 + AmorMaterialCost.ArmorUsage,6) AS ArmorWeight, 
+
+								 AmorMaterialCost.MaxArmorOD, A.ArmorExtension, A.JacketLetter, AmorMaterialCost.Armor, AmorMaterialCost.MaxCoreOD, ROUND(A.WallThickness * 2 + AmorMaterialCost.MaxArmorOD, 2) 
+								 AS NominalOD, tblMaterialDensity.Compound, ArmorSize, JacketRating
+		--INTO	tblArmor_Costing_Weight
+		FROM            tblDesignArmorJacket AS A INNER JOIN
+								 dbo.AFLPRD_INVSysItemCost_CAB AS K ON A.JacketMaterial = K.ItemNumber INNER JOIN
+								 dbo.AFLPRD_INVSysItemCost_CAB AS ColorCost ON ColorCost.ItemNumber = A.ColorChip INNER JOIN
+								 tblMaterialDensity ON A.JacketMaterial = tblMaterialDensity.Compound CROSS JOIN
+									 (SELECT        tblDesignArmor.MaxCoreOD, tblDesignArmor.MaxArmorOD, armorsize,ArmorUsage,
+																 tblDesignArmor.ArmorUsage * dbo.AFLPRD_INVSysItemCost_CAB.Item_Cost AS AmorMaterialCost, tblDesignArmor.Armor
+									   FROM            tblDesignArmor INNER JOIN
+																 dbo.AFLPRD_INVSysItemCost_CAB ON tblDesignArmor.OracleArmor = dbo.AFLPRD_INVSysItemCost_CAB.ItemNumber) 
+								 AS AmorMaterialCost
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+	BEGIN TRY
+		BEGIN TRAN
+		UPDATE tblArmor_Costing_Weight
+		SET ArmorLoadedCost = 0.02482 + 0.001667 + 0.12836 + AmorMaterialCost
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+
+END
+
+GO
diff --git a/Stored Procedures/SalesForce.usp_CatalogCode_Boxed_Items.sql b/Stored Procedures/SalesForce.usp_CatalogCode_Boxed_Items.sql
new file mode 100644
index 0000000..7a192ac
--- /dev/null
+++ b/Stored Procedures/SalesForce.usp_CatalogCode_Boxed_Items.sql
@@ -0,0 +1,53 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+-- =============================================
+-- Author:		Bryan Eddy
+-- ALTER date: 10/19/2016
+-- Description:	Sales Force catalog code procedure to update eligigle items to have box indicators
+-- =============================================
+CREATE PROCEDURE [SalesForce].[usp_CatalogCode_Boxed_Items]
+
+AS
+BEGIN
+
+DECLARE @ErrorNumber INT = ERROR_NUMBER();
+DECLARE @ErrorLine INT = ERROR_LINE();
+
+
+	BEGIN TRY
+		BEGIN TRAN
+
+		INSERT INTO tblSalesForce_Catalog
+								 (CatalogCode, Base, Weight_kg_per_m, 
+								 DesignTypeDesc, Jacket, TBType, TBDescription, NominalOD, NumSubFillers, NumSubPositions,FinishedCableColor,TBLetter
+								 ,CablePasses,FiberCount,UnitOD, BaseID,DesignTypeId, Armored,Boxed, 
+								 BoxedLength_FT,LoadedBaseCost,BaseCost,OracleItem,Fiber_Type__c,Packaging__c,UOM__c,Print_Type__c,Min_Order_Quantity__c,FiberID
+								 ,FurcationTube,SetupID, Non_Standard, Active,ProdLevel3,Minimum_Order_Multiple__c)
+
+		SELECT				CatalogCode+BoxExtension, Base, Weight_kg_per_m, 
+								 DesignTypeDesc, Jacket, TBType, TBDescription, NominalOD, NumSubFillers, NumSubPositions,FinishedCableColor,TBLetter
+								 ,CablePasses,FiberCount,UnitOD, BaseID,A.DesignTypeId, 0,1, 
+								 FeetCablePerBox,LoadedBaseCost, BaseCost ,OracleItem,Fiber_Type__c,'Box' as Packaging__c, 'Each' as UOM__c,Print_Type__c,Minimum_Order_Multiple,FiberID
+								 ,FurcationTube, SetupID, Non_Standard, Active,ProdLevel3,Minimum_Order_Multiple
+		  FROM [Premise].[dbo].[tblDesignCode_BoxedFiber] A INNER JOIN tblSalesForce_Catalog K ON k.DesignTypeID = A.DesignTypeID
+		WHERE NominalOD <= MaxOD AND K.Armored <> 1 and tbtype <>'furcation' --AND Base LIKE 'C%'
+
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+
+END
+
+
+GO
diff --git a/Stored Procedures/SalesForce.usp_CatalogCode_Cables.sql b/Stored Procedures/SalesForce.usp_CatalogCode_Cables.sql
new file mode 100644
index 0000000..4efe8bb
--- /dev/null
+++ b/Stored Procedures/SalesForce.usp_CatalogCode_Cables.sql
@@ -0,0 +1,124 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+-- =============================================
+-- Author:		Bryan Eddy
+-- ALTER date: 10/5/2016
+-- Description:	Generate the catalog code and attributes for Sales Force Quoting - Appends All base cables to the table
+-- Update:		Added error handling
+-- Version:		3
+-- =============================================
+CREATE PROCEDURE [SalesForce].[usp_CatalogCode_Cables] 
+
+AS
+BEGIN
+
+
+
+	--EXEC [OracleExtracts].[dbo].[usp_BOMCalculator_AllCables]
+
+
+DELETE FROM tblSalesForce_Catalog
+
+	-- SET NOCOUNT ON added to prevent extra result sets from
+	-- interfering with SELECT statements.
+	SET NOCOUNT ON;
+
+    -- Insert statements for procedure here
+
+	--IF OBJECT_ID (N'dbo.tblSalesForce_Catalog_Generator', N'U') IS NOT NULL
+	--DROP TABLE dbo.tblSalesForce_Catalog_Generator;
+
+
+	--Code appends all non-furcation cables to tblSalesForce_Catalog
+
+
+DECLARE @ErrorNumber INT = ERROR_NUMBER();
+DECLARE @ErrorLine INT = ERROR_LINE();
+
+
+	BEGIN TRY
+		BEGIN TRAN
+
+		INSERT  INTO tblSalesForce_Catalog
+								 (CatalogCode, Base,Weight_kg_per_m, 
+								 DesignTypeDesc, Jacket, TBType, TBDescription, NominalOD, NumSubFillers, NumSubPositions
+								 ,CablePasses,FiberCount,UnitOD, BaseID,DesignTypeId, Armored,Boxed, Fiber_Type__c,Print_Type__c, Min_Order_Quantity__c,FiberID,FinishedCableColor,TBLetter,SetupID
+								 , Active,Non_Standard, ProdLevel3)
+		SELECT DISTINCT 
+								 LEFT(tblCableConstructionReferences.DesignCode, 5) + tblDesignCodeFiberElementValue.FiberLetter + SUBSTRING(tblCableConstructionReferences.DesignCode, 6, 2) 
+								 + tblDesignCodeFiberElementValue.CablePrintType
+								 + COALESCE(tblDesignTypeS.DefaultFamilyColor,tblDesignCodeFiberElementValue.PreferedCableColor)
+								 --+ FinishedColor.ColorLetter
+								 + CASE WHEN tblCableConstructions.CablePasses = 1 AND tblCableConstructionReferences.TBType <> 'Ribbon' THEN '0' 
+										WHEN tblCableTightBufferReference.TBTypeID = 20 THEN 'X'
+										WHEN tblCableConstructionReferences.TBType = 'Ribbon' THEN '1'
+										ELSE 
+											--FinishedColor.ColorLetter
+											COALESCE(tblDesignTypeS.DefaultFamilyColor,tblDesignCodeFiberElementValue.PreferedCableColor )
+									END
+								  + tblCableTBType.TBLetter + CASE WHEN [DesignExtension] IS NULL 
+								 THEN '' ELSE [DesignExtension] END + + COALESCE(tblDesignCodeFiberElementValue.FiberExt,'') AS CatalogCode, tblCableConstructionReferences.Base, 
+								  tblBOM_Base_Weight.Weight AS Weight_kg_per_m, tblDesignTypes.SalesForceDescription, 
+								 JacketDescription_SalesForce, tblCableConstructionReferences.TBType, tblCableTBType.TightBufferDescription_SalesForce, 
+								 tblCableConstructions.NominalOD, tblCableConstructionReferences.NumSubFillers, tblCableConstructionReferences.NumSubPositions,
+								 tblCableConstructions.CablePasses, FiberCount--cast(substring(tblCableConstructionReferences.DesignCode, 3,3) as int) FiberCount
+								 ,CASE WHEN tblCableConstructionReferences.TBType = 'Ribbon' THEN SUBSTRING(tblCableConstructionReferences.DesignCode, 6,2) 
+								 ELSE (SUBSTRING(tblCableConstructionReferences.DesignCode, 6,1) + '.' + SUBSTRING(tblCableConstructionReferences.DesignCode, 7,1))+' mm'  END UnitOD
+								 , tblCableConstructionReferences.BaseID, dbo.tblCableConstructionReferences.DesignTypeID
+								 ,0 AS Armored
+								 ,0 AS Boxed
+								 ,Fiber_Type__c
+								 ,CASE WHEN tblDesignCodeFiberElementValue.CablePrintType = 1 THEN 'AFL Standard'
+									WHEN tblDesignCodeFiberElementValue.CablePrintType = 2 THEN 'Generic'
+									END  AS Print_Type__c
+								,tblDesignTypes.Min_Order_Quantity__c
+								,tblDesignCodeFiberElementValue.FiberID
+								,CASE WHEN tblDesignTypeS.DefaultFamilyColor IS NOT NULL THEN tblDesignTypeS.DefaultFamilyColor ELSE tblDesignCodeFiberElementValue.PreferedCableColor END
+								,tblCableTBType.TBLetter
+								,tblCableConstructionReferences.SetupID
+								, tblCableConstructionReferences.ReleasedDesign
+								, tblCableTBType.Non_Standard_Product
+								, tblDesignTypeGroups.DesignTypeGroupDesc
+		FROM            tbl_Fibers INNER JOIN SalesForce.FiberToFiberDescriptionQuoting FiberLink ON FiberLink.FiberItemID = tbl_Fibers.FiberItemID
+								 INNER JOIN tblDesignCodeFiberElementValue ON tblDesignCodeFiberElementValue.FiberID = FiberLink.FiberID
+								 INNER JOIN tblFiberTBCatalog ON tbl_Fibers.TBCatalogType = tblFiberTBCatalog.TBCatalogType INNER JOIN
+								 tblFiberTBIndicators ON tblFiberTBCatalog.TBCatalogType = tblFiberTBIndicators.TBCatalogType INNER JOIN
+								 tblBOM_Base_Weight INNER JOIN
+								 tblCableTBType INNER JOIN
+								 tblCableConstructionReferences INNER JOIN
+								 tblCableTightBufferReference ON tblCableConstructionReferences.TBType = tblCableTightBufferReference.TBType INNER JOIN
+								 tblCableConstructions ON tblCableConstructionReferences.BaseID = tblCableConstructions.BaseID ON 
+								 tblCableTBType.TBIndicatorID = tblCableTightBufferReference.TBTypeID ON tblBOM_Base_Weight.BASE = tblCableConstructionReferences.Base INNER JOIN
+								 tblDesignTypes ON tblCableConstructionReferences.DesignTypeID = tblDesignTypes.DesignTypeID INNER JOIN
+								 tblDesignTypeGroups ON tblDesignTypes.DesignTypeGroupID = tblDesignTypeGroups.DesignTypeGroupID INNER JOIN
+								 tblDesignCodeJacket ON tblCableConstructionReferences.CableFamily = tblDesignCodeJacket.CableLetter AND 
+								 tblCableConstructionReferences.CableLevel1 = tblDesignCodeJacket.JacketLetter ON tblFiberTBIndicators.TBLetter = tblCableTBType.TBLetter 
+		WHERE          (tblDesignCodeFiberElementValue.Active = 1) AND tblCableConstructionReferences.ApprovedForQuoting = 1 AND
+								 (tblDesignCodeFiberElementValue.FiberLetter NOT LIKE '%@%') AND (tblCableConstructionReferences.DesignTypeID IS NOT NULL) AND (tblDesignTypes.Active = 1) 
+								AND (tblDesignTypeGroups.Active = 1) 
+								 AND (tblCableConstructionReferences.TBType <> 'Furcation' ) AND (tblCableConstructionReferences.ApprovedForQuoting = 1) 
+								 AND (tbl_Fibers.Active = 1) AND dbo.tblCableTBType.Active = 1
+
+
+
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+
+END
+
+
+
+
+GO
diff --git a/Stored Procedures/SalesForce.usp_CatalogCode_Descriptions.sql b/Stored Procedures/SalesForce.usp_CatalogCode_Descriptions.sql
new file mode 100644
index 0000000..b8397aa
--- /dev/null
+++ b/Stored Procedures/SalesForce.usp_CatalogCode_Descriptions.sql
@@ -0,0 +1,126 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+-- =============================================
+-- Author:		Bryan Eddy
+-- ALTER date: 11/1/2016
+-- Description:	ALTER item description for armored items, cables, and furcation tubes for the sales force quoting system
+-- Version: 2
+-- Update:	Added error handling
+-- =============================================
+CREATE PROCEDURE [SalesForce].[usp_CatalogCode_Descriptions] 
+	-- Add the parameters for the stored procedure here
+
+AS
+BEGIN
+
+
+
+DECLARE @ErrorNumber INT = ERROR_NUMBER();
+DECLARE @ErrorLine INT = ERROR_LINE();
+
+
+
+	BEGIN TRY
+		BEGIN TRAN
+		--ALTERs description for all basic cables (non-armored, non-furcation)
+		Update dbo.tblSalesForce_Catalog 
+		SET Product_Quote_Description__c = K.DesignTypeDesc + ', ' + 
+			Case WHEN K.Jacket = 'Riser' or K.Jacket = 'Plenum' THEN k.jacket + ' Rated'
+				 ELSE k.jacket 
+				 END
+			+ ', ' --+ K.COLOR__c +' jacket color, ' 
+			+ cast(k.FiberCount as nvarchar ) + ' ' + G.FiberDescription_SalesForce 
+				+ ' fibers, ' + CAST(k.UnitOD AS NVARCHAR) + ', RoHS, ' + k.TBDescription
+		FROM [dbo].[tblSalesForce_Catalog] K INNER JOIN dbo.tblDesignCodeFiberElementValue G ON K.FiberID = G.FiberID
+		WHERE k.TBType <> 'FURCATION'
+
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+	BEGIN TRY
+		BEGIN TRAN
+
+		--Descriptin for furcation cables
+		Update dbo.tblSalesForce_Catalog 
+		SET Product_Quote_Description__c = K.DesignTypeDesc +  ', ' --+ K.COLOR__c +' jacket color, ' 
+		+ (CASE WHEN  k.FurcationTube IS NOT NULL THEN K.FurcationTube ELSE 'Furcation' END)
+		FROM [dbo].[tblSalesForce_Catalog] K
+		WHERE k.TBType = 'FURCATION'
+
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+
+	BEGIN TRY
+		BEGIN TRAN
+		--Update armor description for armored cables
+		Update dbo.tblSalesForce_Catalog 
+		SET Product_Quote_Description__c = Product_Quote_Description__c + ', Aluminum Interlocking armor'-- with a ' + K.ArmorJacket + ' Jacket '
+		FROM [dbo].[tblSalesForce_Catalog] K 
+		WHERE k.Armored = 1
+
+
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+
+	BEGIN TRY
+		BEGIN TRAN
+		--Update ribbon description
+		Update dbo.tblSalesForce_Catalog 
+		SET Product_Quote_Description__c = K.DesignTypeDesc + ', ' + 
+			Case WHEN K.Jacket = 'Riser' or K.Jacket = 'Plenum' THEN k.jacket + ' Rated'
+				 ELSE k.jacket 
+				 END
+			+ ', ' --+ K.COLOR__c +' jacket color, ' 
+			+ cast(k.FiberCount as nvarchar ) + ' ' + G.FiberDescription_SalesForce 
+				+ ' fibers, ' + CAST(k.UnitOD AS NVARCHAR) + ', RoHS, ' + k.TBDescription + ', No skew testing required'
+		FROM [dbo].[tblSalesForce_Catalog] K INNER JOIN dbo.tblDesignCodeFiberElementValue G ON K.FiberID = G.FiberID
+		WHERE k.TBType = 'RIBBON'
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+
+
+END
+
+
+GO
diff --git a/Stored Procedures/SalesForce.usp_CatalogCode_FlateFile_Export.sql b/Stored Procedures/SalesForce.usp_CatalogCode_FlateFile_Export.sql
new file mode 100644
index 0000000..2411419
--- /dev/null
+++ b/Stored Procedures/SalesForce.usp_CatalogCode_FlateFile_Export.sql
@@ -0,0 +1,15 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+CREATE PROCEDURE [SalesForce].[usp_CatalogCode_FlateFile_Export]
+as
+
+
+BEGIN
+EXEC msdb.dbo.sp_start_job  
+    @job_name = N'SalesForce_Catalog_Export'
+END
+
+
+GO
diff --git a/Stored Procedures/SalesForce.usp_CatalogCode_Furcation.sql b/Stored Procedures/SalesForce.usp_CatalogCode_Furcation.sql
new file mode 100644
index 0000000..dfbdff9
--- /dev/null
+++ b/Stored Procedures/SalesForce.usp_CatalogCode_Furcation.sql
@@ -0,0 +1,122 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+-- =============================================
+-- Author:		Bryan Eddy
+-- ALTER date: 10/5/2016
+-- Description:	Generate the catalog code and attributes for Sales Force Quoting - Furcation Cables
+-- =============================================
+CREATE PROCEDURE [SalesForce].[usp_CatalogCode_Furcation] 
+
+AS
+BEGIN
+
+DECLARE @ErrorNumber INT = ERROR_NUMBER();
+DECLARE @ErrorLine INT = ERROR_LINE();
+
+
+	BEGIN TRY
+		BEGIN TRAN
+
+		INSERT INTO tblSalesForce_Catalog
+								 (CatalogCode
+								 , Base
+								 , Weight_kg_per_m
+								 ,DesignTypeDesc
+								 , Jacket
+								 , TBType
+								 , TBDescription
+								 , NominalOD
+								 , NumSubFillers
+								 , NumSubPositions
+								 ,CablePasses
+								 ,FiberCount
+								 ,UnitOD
+								 ,baseid
+								 ,DesignTypeID
+								 ,Armored
+								 ,Boxed
+								 ,Fiber_Type__c
+								 ,Min_Order_Quantity__c
+								 ,FiberID
+								 , FinishedCableColor,TBLetter
+								 ,FurcationTube
+								 ,SetupID
+								 ,Active
+								 ,Non_Standard
+								 ,ProdLevel3)
+		SELECT DISTINCT 
+								 LEFT(tblCableConstructionReferences.DesignCode, 5) + '@' + SUBSTRING(tblCableConstructionReferences.DesignCode, 6, 2) 
+								 + tblDesignCodeFiberElementValue.CablePrintType +  tblDesignCodeJacketColor.ColorLetter + CASE WHEN dbo.tblFurcationTubeReference.BaseID IS NULL 
+								 THEN '0' ELSE dbo.tblDesignCodeFurcationTube.FurcationLetter END + tblCableTBType.TBLetter + CASE WHEN [DesignExtension] IS NULL 
+								 THEN '' ELSE [DesignExtension] END + tblDesignCodeFiberElementValue.FiberExt AS CatalogCode
+								 , tblCableConstructionReferences.Base
+								 , tblBOM_Base_Weight.Weight AS Weight_kg_per_m
+								 , tblDesignTypes.SalesForceDescription
+								 , JacketDescription_SalesForce
+								 , tblCableConstructionReferences.TBType
+								 , tblCableTBType.TightBufferDescription_SalesForce
+								 ,tblCableConstructions.NominalOD
+								 , tblCableConstructionReferences.NumSubFillers
+								 , tblCableConstructionReferences.NumSubPositions 
+								 , tblCableConstructions.CablePasses
+								 ,NumSubPositions FiberCount
+								 ,CASE WHEN tblDesignTypes.DesignTypeID = 21 THEN substring(tblCableConstructionReferences.DesignCode, 6,2) 
+								 ELSE (substring(tblCableConstructionReferences.DesignCode, 6,1) + '.' + substring(tblCableConstructionReferences.DesignCode, 7,1))+' mm'  END UnitOD
+								 ,tblCableConstructionReferences.BaseID
+								 , dbo.tblCableConstructionReferences.DesignTypeID
+								 ,0 Armored
+								 ,0 Boxed
+								 ,Fiber_Type__c
+								 ,tblDesignTypes.Min_Order_Quantity__c
+								 ,FiberID
+								 ,tblDesignCodeFiberElementValue.PreferedCableColor
+								,tblCableTBType.TBLetter
+								,tblDesignCodeFurcationTube.FurcationTube
+								,tblCableConstructionReferences.SetupID
+								,tblCableConstructionReferences.Active
+								,tblCableTBType.Non_Standard_Product
+								,tblDesignTypeGroups.DesignTypeGroupDesc
+		FROM            tblDesignCodeFiberElementValue INNER JOIN
+								 tblCableTBType INNER JOIN
+								 tblDesignCodeJacketColor AS tblDesignCodeJacketColor_1 INNER JOIN
+								 tblDesignCodeJacketColor INNER JOIN
+								 tblCableConstructionReferences INNER JOIN
+								 tblCableTightBufferReference ON tblCableConstructionReferences.TBType = tblCableTightBufferReference.TBType INNER JOIN
+								 tblCableConstructions ON tblCableConstructionReferences.BaseID = tblCableConstructions.BaseID ON 
+								 tblDesignCodeJacketColor.CablePasses = tblCableConstructions.CablePasses ON 
+								 tblDesignCodeJacketColor_1.CablePasses = tblCableConstructions.CablePasses ON tblCableTBType.TBIndicatorID = tblCableTightBufferReference.TBTypeID ON 
+								 tblDesignCodeFiberElementValue.PreferedCableColor = tblDesignCodeJacketColor.ColorLetter INNER JOIN
+								 tblDesignTypes ON tblCableConstructionReferences.DesignTypeID = tblDesignTypes.DesignTypeID INNER JOIN
+								 tblDesignTypeGroups ON tblDesignTypes.DesignTypeGroupID = tblDesignTypeGroups.DesignTypeGroupID INNER JOIN
+								 tblDesignCodeJacket ON tblCableConstructionReferences.CableFamily = tblDesignCodeJacket.CableLetter AND 
+								 tblCableConstructionReferences.CableLevel1 = tblDesignCodeJacket.JacketLetter LEFT OUTER JOIN
+								 tblFurcationTubeReference ON tblCableConstructions.BaseID = tblFurcationTubeReference.BaseID LEFT OUTER JOIN
+								 tblDesignCodeFurcationTube ON tblFurcationTubeReference.Furcation = tblDesignCodeFurcationTube.Furcation LEFT OUTER JOIN
+								 tblBOM_Base_Weight ON tblCableConstructionReferences.Base = tblBOM_Base_Weight.BASE
+		WHERE         (tblDesignCodeFiberElementValue.Active = 1) AND tblCableConstructionReferences.ApprovedForQuoting = 1 AND
+								 (tblDesignCodeJacketColor.FinsishedCableColorPosition = 1) AND (tblDesignCodeJacketColor_1.SubunitCableColorPostion = 1) AND 
+								 (tblDesignCodeFiberElementValue.FiberLetter = '@') AND (tblCableConstructionReferences.DesignTypeID IS NOT NULL) AND (tblDesignTypes.Active = 1) AND 
+								 (tblDesignTypeGroups.Active = 1) AND (tblCableConstructionReferences.TBType = 'Furcation') AND (tblCableConstructionReferences.ApprovedForQuoting = 1)
+
+
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+
+END
+
+
+
+GO
diff --git a/Stored Procedures/SalesForce.usp_CatalogCode_Generator.sql b/Stored Procedures/SalesForce.usp_CatalogCode_Generator.sql
new file mode 100644
index 0000000..6dee850
--- /dev/null
+++ b/Stored Procedures/SalesForce.usp_CatalogCode_Generator.sql
@@ -0,0 +1,344 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+-- =============================================
+-- Author:		Bryan Eddy
+-- date:		10/5/2016
+-- Description:	Generate the catalog code and attributes for Sales Force Quoting
+-- Version:		3
+-- Update:		Added error handling
+-- =============================================
+CREATE PROCEDURE [SalesForce].[usp_CatalogCode_Generator] 
+
+AS
+BEGIN
+SET NOCOUNT ON;
+
+--ALTERs table of BOM weights
+--EXEC [OracleExtracts].[dbo].[usp_BOMCalculator_AllCables]
+	DECLARE @ErrorNumber INT = ERROR_NUMBER();
+	DECLARE @ErrorLine INT = ERROR_LINE();
+
+TRUNCATE TABLE tblSalesForce_Catalog;
+
+--Appends all base cables to tblSalesForce_Catalog
+EXEC SalesForce.usp_CatalogCode_Cables;
+
+
+--Appends all furcation cables to tblSalesForce_Catalog
+EXEC SalesForce.usp_CatalogCode_Furcation;
+
+
+DELETE FROM dbo.tblSalesForce_Catalog 
+WHERE (FiberCount > 4 or DesignTypeDesc LIKE '%BREAKOUT%') AND TBType = 'TightBuffer' AND tbletter <>'1'
+
+--Delete OM4+ Spdier web ribbons from catalog code table
+DELETE FROM dbo.tblSalesForce_Catalog
+WHERE (TBLetter ='r' or TBLetter ='s')  AND CatalogCode like '%+'
+
+--Delete Mixed fiber option for cables with 1 fiber
+DELETE  FROM dbo.tblSalesForce_Catalog
+where FiberCount = 1 and Fiber_Type__c like '%MIXED%'
+
+
+		BEGIN TRY
+			BEGIN TRAN
+
+
+			--Update Unit OD for ribbon cables 
+			UPDATE       tblSalesForce_Catalog
+			SET                UnitOD = tblCableRibbonUnitType.Ribbon_Description
+			FROM            tblSalesForce_Catalog INNER JOIN
+									 tblCableRibbonUnitType ON tblSalesForce_Catalog.FiberCount = tblCableRibbonUnitType.FiberCount AND 
+									 tblSalesForce_Catalog.UnitOD = tblCableRibbonUnitType.RibbonUnitType
+			COMMIT TRAN
+		END TRY
+		BEGIN CATCH
+			IF @@TRANCOUNT > 0
+			ROLLBACK TRANSACTION;
+ 
+			PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+			PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+			THROW;
+		END CATCH;
+
+--Updates all special items in tblSalesForce_Catalog to have X and Z subunits
+EXEC SalesForce.usp_CatalogCode_Special_Subunit 
+
+--Updates costing for all non-armored cable in tblSalesForce_Catalog
+EXEC SalesForce.usp_CatalogCode_NonArmored_Costing
+
+--Calculates weights and cost for armoring of cables and appends armored versions of the cables into tblSalesForce_Catalog
+EXEC SalesForce.usp_CatalogCode_Armor_Cost_Weight
+
+--Identifies which cables can be boxed and appends those cables with the box suffix to tblSalesForce_Catalog
+EXEC SalesForce.usp_CatalogCode_Boxed_Items
+
+
+--Update the color of each cable based on the color indicator
+		BEGIN TRY
+			BEGIN TRAN
+			UPDATE tblSalesForce_Catalog
+			SET COLOR__c = G.ColorDescription_SalesForce
+			FROM tblSalesForce_Catalog K INNER JOIN [dbo].[tblDesignCodeJacketColor] G ON  G.ColorLetter = K.FinishedCableColor
+
+			COMMIT TRAN
+		END TRY
+		BEGIN CATCH
+			IF @@TRANCOUNT > 0
+			ROLLBACK TRANSACTION;
+ 
+			PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+			PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+			THROW;
+		END CATCH;
+
+
+
+--Add spec and image links to each row (non-boxed)
+		BEGIN TRY
+			BEGIN TRAN
+			UPDATE tblSalesForce_Catalog
+			SET [ImageURL__c] = G.[ImageURL__c], Product_Spec_link__c = g.Product_Spec_link__c
+			FROM tblSalesForce_Catalog K INNER JOIN [dbo].[tblDesignCode_CableImages] G ON k.DesignTypeID = G.DesignTypeID AND K.Armor_Type__c = G.Armor_Type__c  
+			WHERE K.Packaging__c = 'REEL'
+
+			COMMIT TRAN
+		END TRY
+		BEGIN CATCH
+			IF @@TRANCOUNT > 0
+			ROLLBACK TRANSACTION;
+ 
+			PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+			PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+			THROW;
+		END CATCH;
+
+
+--Add spec and image links to Boxed items
+		BEGIN TRY
+			BEGIN TRAN
+			UPDATE tblSalesForce_Catalog
+			SET [ImageURL__c] = G.[ImageURL__c], Product_Spec_link__c = g.Product_Spec_link__c
+			FROM tblSalesForce_Catalog K CROSS JOIN [dbo].[tblDesignCode_CableImages] G
+			WHERE K.Boxed = 1 AND G.Packaging__c = 'box'
+
+			COMMIT TRAN
+		END TRY
+		BEGIN CATCH
+			IF @@TRANCOUNT > 0
+			ROLLBACK TRANSACTION;
+ 
+			PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+			PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+			THROW;
+		END CATCH;
+
+--Update descriptions of each cable
+EXEC SalesForce.usp_CatalogCode_Descriptions
+
+
+--Update lead time ID's for each item
+		BEGIN TRY
+			BEGIN TRAN
+			UPDATE dbo.tblSalesForce_Catalog
+			Set Lead_Time_ID__c = 
+				CASE WHEN Armor_Type__c = 'Armored' THEN K.LeadTime_ID_Armored
+				ELSE K.LeadTime_ID
+				END 
+			FROM dbo.tblCableConstructionReferences K INNER JOIN DBO.tblSalesForce_Catalog G ON  K.base = g.base	
+			COMMIT TRAN
+		END TRY
+		BEGIN CATCH
+			IF @@TRANCOUNT > 0
+			ROLLBACK TRANSACTION;
+ 
+			PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+			PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+			THROW;
+		END CATCH;
+--Update the price of all cables
+EXEC SalesForce.usp_CatalogCode_PricingUpdate
+
+--Identify stock items and set Stock__c to 1
+		BEGIN TRY
+			BEGIN TRAN
+			UPDATE DBO.tblSalesForce_Catalog
+			SET Stock__b = 1,Stock__c='Yes', Min_Order_Quantity__c = G.Min_Order_Quantity, UOM__c = 'Feet'
+			, LoadedBaseCost = LoadedBaseCost /3.281, BaseCost = BaseCost /3.281--, Weight_kg_per_m = Weight_kg_per_m * 0.671969
+			,price = G.Price_feet, Lead_Time_ID__c = G.LeadTime_ID
+			FROM dbo.tblstockitems G INNER JOIN dbo.tblSalesForce_Catalog K ON G.itemno = k.CatalogCode
+			COMMIT TRAN
+		END TRY
+		BEGIN CATCH
+			IF @@TRANCOUNT > 0
+			ROLLBACK TRANSACTION;
+ 
+			PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+			PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+			THROW;
+		END CATCH;
+
+--Remove -BIF for all Tactical cable products
+		BEGIN TRY
+			BEGIN TRAN
+			UPDATE C
+			SET CatalogCode = REPLACE(CatalogCode,'-BIF','')
+			FROM dbo.tblSalesForce_Catalog C INNER JOIN dbo.tblDesignTypes I ON I.DesignTypeID = C.DesignTypeID 
+			INNER JOIN dbo.tblDesignTypeGroups K ON K.DesignTypeGroupID = I.DesignTypeGroupID
+			WHERE I.DesignTypeGroupID = 5 
+			COMMIT TRAN
+		END TRY
+		BEGIN CATCH
+			IF @@TRANCOUNT > 0
+			ROLLBACK TRANSACTION;
+ 
+			PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+			PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+			THROW;
+		END CATCH;
+
+--Update pricing static priced list
+/* eABF and Tactical don't want a calculated version.  They have supplied a list they would like the price to reflect*/
+--Static price list in Feet
+		BEGIN TRY
+			BEGIN TRAN
+			UPDATE DBO.tblSalesForce_Catalog
+			SET   UOM__c = I.UnitOfMeasure
+			, LoadedBaseCost = LoadedBaseCost /3.281
+			, BaseCost = BaseCost /3.281
+			,Loaded_Base_Cost_Fiber_Included__c =Loaded_Base_Cost_Fiber_Included__c/3.281 --, Weight_kg_per_m = Weight_kg_per_m * 0.671969
+			,price = G.Price
+			FROM SalesForce.ItemPriceOverride G INNER JOIN dbo.tblSalesForce_Catalog K ON G.itemno = k.CatalogCode
+			INNER JOIN SalesForce.UnitOfMeasure I ON I.UnitOfMeasureID = G.UnitOfMeasureID
+			WHERE G.UnitOfMeasureID = 2
+			COMMIT TRAN
+		END TRY
+		BEGIN CATCH
+			IF @@TRANCOUNT > 0
+			ROLLBACK TRANSACTION;
+ 
+			PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+			PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+			THROW;
+		END CATCH;
+
+--Static Price List in Meters
+		BEGIN TRY
+			BEGIN TRAN
+			UPDATE DBO.tblSalesForce_Catalog
+			SET   UOM__c = I.UnitOfMeasure
+			, LoadedBaseCost = LoadedBaseCost 
+			, BaseCost = BaseCost
+			,Loaded_Base_Cost_Fiber_Included__c =Loaded_Base_Cost_Fiber_Included__c --, Weight_kg_per_m = Weight_kg_per_m * 0.671969
+			,price = G.Price
+			,Status__c = 'Inactive'/*Temporary change to deactivate all Tactical items until teiring is in place*/
+			FROM SalesForce.ItemPriceOverride G INNER JOIN dbo.tblSalesForce_Catalog K ON G.itemno = k.CatalogCode
+			INNER JOIN SalesForce.UnitOfMeasure I ON I.UnitOfMeasureID = G.UnitOfMeasureID
+			WHERE G.UnitOfMeasureID = 1
+			COMMIT TRAN
+		END TRY
+		BEGIN CATCH
+			IF @@TRANCOUNT > 0
+			ROLLBACK TRANSACTION;
+ 
+			PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+			PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+			THROW;
+		END CATCH;
+
+--Remove all tactical cables that are not in the override table
+		BEGIN TRY
+			BEGIN TRAN
+			DELETE dbo.tblSalesForce_Catalog
+			FROM dbo.tblSalesForce_Catalog C LEFT JOIN SalesForce.ItemPriceOverride X ON X.ItemNo = C.CatalogCode
+			INNER JOIN dbo.tblDesignTypes I ON I.DesignTypeID = C.DesignTypeID 
+			INNER JOIN dbo.tblDesignTypeGroups K ON K.DesignTypeGroupID = I.DesignTypeGroupID
+			WHERE I.DesignTypeGroupID = 5 --AND X.ItemNo IS NULL
+			COMMIT TRAN
+		END TRY
+		BEGIN CATCH
+			IF @@TRANCOUNT > 0
+			ROLLBACK TRANSACTION;
+ 
+			PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+			PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+			THROW;
+		END CATCH;
+
+--Updating binary fields to Salesforce defined values
+		BEGIN TRY
+			BEGIN TRAN
+			UPDATE dbo.tblSalesForce_Catalog
+			  SET Non_Standard_Design__c = (CASE WHEN Non_Standard = 1 THEN 'TRUE' ELSE 'FALSE' END),
+			   Distributor_Price_List__c = (CASE WHEN Stock__b = 1 THEN 'Yes' ELSE 'No' END),
+			   Override__c = (CASE WHEN Stock__b = 1 THEN 'TRUE' ELSE 'FALSE' END),
+			   Fiber_Count_Config__c = FiberCount,
+			   Fiber_Type_Config__c = Fiber_Type__c,
+			   Status__c = (CASE WHEN Active = 1 THEN 'Active' ELSE 'Inactive' END ),
+			   Premise_Design_Program_Synch_ID = CatalogCode, 
+			   Subunit_Color__c = (CASE WHEN CablePasses = 2 THEN COLOR__c ELSE Subunit_Color__c END),
+			   Jacket_Print__c = Print_Type__c;
+			COMMIT TRAN
+		END TRY
+		BEGIN CATCH
+			IF @@TRANCOUNT > 0
+			ROLLBACK TRANSACTION;
+ 
+			PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+			PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+			THROW;
+		END CATCH;
+
+--Remove the Subunit_Color_Position__c indicator for single pass cables
+		BEGIN TRY
+			BEGIN TRAN
+			UPDATE tblSalesForce_Catalog
+			SET Subunit_Color_Position__c = NULL
+			WHERE CablePasses = 1 ;
+			COMMIT TRAN
+		END TRY
+		BEGIN CATCH
+			IF @@TRANCOUNT > 0
+			ROLLBACK TRANSACTION;
+ 
+			PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+			PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+			THROW;
+		END CATCH;
+
+
+--Remove MultiMode SWR types
+DELETE FROM tblSalesForce_Catalog
+WHERE TBType LIKE '%SPIDER%' AND SUBSTRING(CatalogCode,12,1) = 'S'
+
+--DELETE any duplicates that may be housed in the table.
+EXEC SalesForce.usp_CatalogCode_RemoveDuplicates
+
+
+EXEC SalesForce.usp_CatalogCode_FlateFile_Export;
+
+--If the count of SalesForce_Catalog table is < 30k then send Bryan an email and don't run SF update
+
+exec SalesForce.usp_CatalogCode_InvokeUrl_Update ;
+
+
+
+END
+
+
+
+GO
diff --git a/Stored Procedures/SalesForce.usp_CatalogCode_InvokeUrl_Update.sql b/Stored Procedures/SalesForce.usp_CatalogCode_InvokeUrl_Update.sql
new file mode 100644
index 0000000..d5990f0
--- /dev/null
+++ b/Stored Procedures/SalesForce.usp_CatalogCode_InvokeUrl_Update.sql
@@ -0,0 +1,37 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+/*
+-- =============================================
+	Author:			Bryan Eddy
+	Create date:	12/11/2017
+	Description:	Invoke URL to push data to Sales Force
+	Version:		2
+	Update:			Added header.
+-- =============================================
+
+*/
+CREATE PROCEDURE [SalesForce].[usp_CatalogCode_InvokeUrl_Update] 
+
+
+AS
+BEGIN
+Declare @Object as Int;
+Declare @ResponseText as Varchar(8000);
+
+
+Exec sp_OACreate 'MSXML2.XMLHTTP', @Object OUT;
+Exec sp_OAMethod @Object, 'open', NULL, 'get',
+                 'http://ci-data.aflglobal.com/PRE_SF_Products', --Your Web Service Url (invoked)
+                 'false'
+Exec sp_OAMethod @Object, 'send'
+Exec sp_OAMethod @Object, 'responseText', @ResponseText OUTPUT
+
+Select @ResponseText
+
+Exec sp_OADestroy @Object
+
+
+END
+GO
diff --git a/Stored Procedures/SalesForce.usp_CatalogCode_InvokeUrl_Update_DEV.sql b/Stored Procedures/SalesForce.usp_CatalogCode_InvokeUrl_Update_DEV.sql
new file mode 100644
index 0000000..77c80fe
--- /dev/null
+++ b/Stored Procedures/SalesForce.usp_CatalogCode_InvokeUrl_Update_DEV.sql
@@ -0,0 +1,32 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+-- =============================================
+-- Author:		<Author,,Name>
+-- Create date: <Create Date,,>
+-- Description:	<Description,,>
+-- =============================================
+CREATE PROCEDURE [SalesForce].[usp_CatalogCode_InvokeUrl_Update_DEV] 
+
+
+AS
+BEGIN
+Declare @Object as Int;
+Declare @ResponseText as Varchar(8000);
+
+
+Exec sp_OACreate 'MSXML2.XMLHTTP', @Object OUT;
+Exec sp_OAMethod @Object, 'open', NULL, 'get',
+                 'http://ci-data-dev.aflglobal.com/PRE_SF_Products', --Your Web Service Url (invoked)
+                 'false'
+Exec sp_OAMethod @Object, 'send'
+Exec sp_OAMethod @Object, 'responseText', @ResponseText OUTPUT
+
+Select @ResponseText
+
+Exec sp_OADestroy @Object
+
+
+END
+GO
diff --git a/Stored Procedures/SalesForce.usp_CatalogCode_NonArmored_Costing.sql b/Stored Procedures/SalesForce.usp_CatalogCode_NonArmored_Costing.sql
new file mode 100644
index 0000000..ecce4bb
--- /dev/null
+++ b/Stored Procedures/SalesForce.usp_CatalogCode_NonArmored_Costing.sql
@@ -0,0 +1,38 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+-- =============================================
+-- Author:		Bryan Eddy
+-- ALTER date: 10/19/2016
+-- Description:	Costing Update for Sales Force Catalogs
+-- =============================================
+CREATE PROCEDURE [SalesForce].[usp_CatalogCode_NonArmored_Costing]
+AS
+BEGIN
+DECLARE @ErrorNumber INT = ERROR_NUMBER();
+DECLARE @ErrorLine INT = ERROR_LINE();
+	BEGIN TRY
+		BEGIN TRAN
+-- Updates Base item's material cost (minus the fiber)
+
+		UPDATE dbo.tblSalesForce_Catalog
+		SET BaseCost = BaseSkeletalCost, OracleItem = AssemblyItemNumber, LoadedBaseCost = x.LoadedBaseCost
+		FROM dbo.tblBase_Skeletal_Cost X INNER JOIN dbo.tblSalesForce_Catalog G ON G.SetupID = X.SetupID
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+
+END
+
+
+GO
diff --git a/Stored Procedures/SalesForce.usp_CatalogCode_NonArmored_Costing_InsertNewBase.sql b/Stored Procedures/SalesForce.usp_CatalogCode_NonArmored_Costing_InsertNewBase.sql
new file mode 100644
index 0000000..7b3bef6
--- /dev/null
+++ b/Stored Procedures/SalesForce.usp_CatalogCode_NonArmored_Costing_InsertNewBase.sql
@@ -0,0 +1,80 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+-- =============================================
+-- Author:		Bryan Eddy
+-- ALTER date: 12/2/2016
+-- Description:	Insert new base costs into tblBase_Skeletal_Cost
+-- Version:		1 
+-- Update:		refactored into a merge statement
+--				added error handling
+-- =============================================
+CREATE PROCEDURE [SalesForce].[usp_CatalogCode_NonArmored_Costing_InsertNewBase]
+AS
+
+BEGIN
+
+SET NOCOUNT ON;
+
+DECLARE @ErrorNumber INT = ERROR_NUMBER();
+DECLARE @ErrorLine INT = ERROR_LINE();
+	BEGIN TRY
+		BEGIN tran
+
+			INSERT INTO  dbo.tblBase_Skeletal_Cost( Base, BaseSkeletalCost, AssemblyItemNumber, LoadedBaseCost, SetupID)
+
+			SELECT Base, SUM(MaterialCost) AS BaseSkeletalCost, AssemblyItemNumber, SUM(MaterialCost) AS LoadedBaseCost, SetupID
+
+			FROM
+			(
+				SELECT d.AssemblyItemNumber,e.ComponentItemNumber,SUM(e.ExtendedQuantityPer*S.Material_Cost) AS MaterialCost,e.[PrimaryUOM],s.Make_Buy , SUM(e.UnitCost) AS UnitCost,  d.base, D.SetupID
+				FROM  [dbo].vOracleBaseItems AS d CROSS APPLY [dbo].[fn_ExplodeBOM](D.AssemblyItemNumber) AS e 
+				INNER JOIN [dbo].[AFLPRD_INVSysItemCost_CAB] AS S ON e.ComponentItemNumber = s.ItemNumber LEFT JOIN dbo.tblBase_Skeletal_Cost G ON G.SetupID = D.SetupID
+				GROUP BY  e.ComponentItemNumber,d.AssemblyItemNumber,e.[PrimaryUOM],s.Make_Buy , e.UnitCost, d.base, D.SetupID,G.SetupID
+				HAVING s.Make_Buy = 'buy' AND NOT (e.ComponentItemNumber LIKE 'fbr%' OR e.ComponentItemNumber LIKE 'rbn%' OR e.ComponentItemNumber LIKE 'swr%' OR e.ComponentItemNumber LIKE 'frc%') 
+				--AND d.Base = 'GQ072-2.0A' 
+						AND G.SetupID IS NULL
+						--(e.ComponentItemNumber  like 'rbn%' AND e.ComponentItemNumber  like '%osp%' and e.ComponentItemNumber  like '%rbn%f%')))
+						--OR  (e.ComponentItemNumber like 'swr%' AND e.ComponentItemNumber  LIKE  '%osp%'))
+				--having s.make_buy = 'buy' and base = 'GQ048-3.0-SW'
+			)X 
+			GROUP BY X.BASE, x.AssemblyItemNumber, X.SetupID 
+
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+	BEGIN TRY
+		BEGIN tran
+
+			UPDATE dbo.tblBase_Skeletal_Cost
+			SET LoadedBaseCost = g.Resource_Cost + g.Overhead_Cost + BaseSkeletalCost
+			FROM dbo.tblBase_Skeletal_Cost X INNER JOIN  dbo.AFLPRD_INVSysItemCost_CAB G ON G.ItemNumber = X.AssemblyItemNumber
+
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+
+END
+
+
+GO
diff --git a/Stored Procedures/SalesForce.usp_CatalogCode_PricingUpdate.sql b/Stored Procedures/SalesForce.usp_CatalogCode_PricingUpdate.sql
new file mode 100644
index 0000000..989cb22
--- /dev/null
+++ b/Stored Procedures/SalesForce.usp_CatalogCode_PricingUpdate.sql
@@ -0,0 +1,229 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+-- =============================================
+-- Author:		Bryan Eddy
+-- ALTER date: 12/1/2016
+-- Description:	Pricing Update for Sales Force Catalogs
+-- =============================================
+
+CREATE PROCEDURE [SalesForce].[usp_CatalogCode_PricingUpdate]
+
+AS
+-- Update the cost of all cables
+BEGIN
+
+DECLARE @ErrorNumber INT = ERROR_NUMBER();
+DECLARE @ErrorLine INT = ERROR_LINE();
+
+
+
+
+--******************************
+--Pricing for all typical cables.
+--********************************
+	BEGIN TRY
+		BEGIN TRAN
+		UPDATE tblSalesForce_Catalog
+		SET Price =								(CASE 
+														WHEN A.Contribution <> 0 THEN ROUND((K.LoadedBaseCost + K.FiberCount * E.CPQ_Fiber_Cost + A.Contribution) / (1 - T.Multiplier), 3)
+														ELSE ROUND((K.BaseCost + K.FiberCount * E.CPQ_Fiber_Cost + A.Contribution) / (1 - T.Multiplier), 3) 
+												END ),
+			--Price = ROUND((K.LoadedBaseCost + K.FiberCount * E.CPQ_Fiber_Cost + A.Contribution) / (1 - T.Multiplier), 3),
+		Loaded_Base_Cost_Fiber_Included__c =    ROUND((K.LoadedBaseCost + K.FiberCount * E.CPQ_Fiber_Cost),3)
+		FROM            tblSalesForce_Pricing AS A INNER JOIN
+								 tblDesignTypes AS G ON A.Product_Category = G.Product_Pricing_Group INNER JOIN
+								 tblSalesForce_Pricing_Multiplier AS T ON A.Product_Category = T.Product_Category INNER JOIN
+								 tblSalesForce_Catalog AS K ON T.FiberID = K.FiberID INNER JOIN
+								 tblDesignCodeFiberElementValue AS E ON E.FiberID = K.FiberID INNER JOIN
+								 tblCableConstructionReferences AS CR ON CR.Base = K.Base AND G.DesignTypeID = CR.DesignTypeID
+		WHERE        CR.TBType <> 'furcation' OR CablePasses = 2
+
+
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+--******************************
+--Pricing for furcation cables
+--********************************
+	BEGIN TRY
+		BEGIN TRAN
+		UPDATE       tblSalesForce_Catalog
+		SET    
+		--SELECT            catalogcode,k.base,k.BaseCost,k.loadedbasecost, e.item_cost,t.Multiplier,a.Contribution,P.FiberCount,
+						Price = (CASE WHEN A.Contribution <> 0 THEN ROUND((K.LoadedBaseCost + P.FiberCount * E.Item_Cost + A.Contribution) / (1 - T .Multiplier), 3) 
+								 ELSE ROUND((K.BaseCost + P.FiberCount * E.Item_Cost + A.Contribution) / (1 - T .Multiplier), 3) END)
+		FROM            tblSalesForce_Pricing AS A INNER JOIN
+								 tblDesignTypes AS G ON A.Product_Category = G.Product_Pricing_Group INNER JOIN
+								 tblSalesForce_Pricing_Multiplier AS T ON A.Product_Category = T.Product_Category INNER JOIN
+								 tblSalesForce_Catalog k ON T.FiberID = k.FiberID INNER JOIN
+								 tblDesignCodeFurcationTube AS B ON B.FurcationTube = k.FurcationTube INNER JOIN
+								 AFLPRD_INVSysItemCost_CAB AS E ON E.ItemNumber = B.Furcation INNER JOIN
+								 tblCableConstructionReferences P ON k.Base = P.Base AND 
+								 G.DesignTypeID = P.DesignTypeID
+		WHERE        (k.TBType = 'furcation') AND (k.CablePasses = 1)
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+--******************************
+--Pricing for boxed cables
+--********************************
+
+	BEGIN TRY
+		BEGIN TRAN
+		-- Update the cost of boxed cables
+		UPDATE tblSalesForce_Catalog
+		SET	Price = (Price * BoxedLength_FT /3.281) + 45
+		FROM tblSalesForce_Catalog
+		WHERE boxed = 1
+
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+--******************************
+--Pricing for ribbon cables
+--********************************
+
+	BEGIN TRY
+		BEGIN TRAN
+
+-- Update the cost of Ribbon cables
+		UPDATE tblSalesForce_Catalog
+		SET 
+			Price =								
+												 (CASE 
+														WHEN A.Contribution <> 0 THEN ROUND((K.LoadedBaseCost + K.FiberCount * E.CPQ_Fiber_Cost + A.Contribution + K.FiberCount*(.207 / 12) ) / (1 - T.Multiplier), 3)
+														ELSE ROUND((K.BaseCost + K.FiberCount * E.CPQ_Fiber_Cost + A.Contribution + K.FiberCount*(.207 / 12)*1.02) / (1 - T.Multiplier), 3) 
+												END ),
+			--Price =ROUND((K.LoadedBaseCost + K.FiberCount * E.CPQ_Fiber_Cost + A.Contribution + (.207 / 12) ) / (1 - T.Multiplier), 3),
+			Loaded_Base_Cost_Fiber_Included__c =    ROUND((K.LoadedBaseCost + K.FiberCount * E.CPQ_Fiber_Cost +  K.FiberCount*(.207 / 12)*1.02),3)
+		FROM            tblSalesForce_Pricing AS A INNER JOIN
+								 tblDesignTypes AS G ON A.Product_Category = G.Product_Pricing_Group INNER JOIN
+								 tblSalesForce_Pricing_Multiplier AS T ON A.Product_Category = T.Product_Category INNER JOIN
+								 tblSalesForce_Catalog AS K ON T.FiberID = K.FiberID INNER JOIN
+								 tblDesignCodeFiberElementValue AS E ON E.FiberID = K.FiberID INNER JOIN
+								 tblCableConstructionReferences AS CR ON CR.Base = K.Base AND G.DesignTypeID = CR.DesignTypeID
+		WHERE cr.TBType = 'Ribbon' 
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+
+
+--******************************
+--Pricing for SWR Cables
+--********************************
+	BEGIN TRY
+		BEGIN TRAN
+
+		UPDATE tblSalesForce_Catalog
+		SET 
+			Price =				
+												(CASE 
+														WHEN A.Contribution <> 0 THEN ROUND((K.LoadedBaseCost + K.FiberCount * E.CPQ_Fiber_Cost + A.Contribution +  K.FiberCount*(.10800 / 12) ) / (1 - T.Multiplier), 3)
+														ELSE ROUND((K.BaseCost + K.FiberCount * E.CPQ_Fiber_Cost + A.Contribution + K.FiberCount*(.10800 / 12)) / (1 - T.Multiplier), 3) 
+												END ),
+			--Price = ROUND((K.LoadedBaseCost + K.FiberCount * E.CPQ_Fiber_Cost + A.Contribution + (.10800 / 12) ) / (1 - T.Multiplier), 3),
+			Loaded_Base_Cost_Fiber_Included__c =    ROUND((K.LoadedBaseCost + K.FiberCount * E.CPQ_Fiber_Cost + K.FiberCount *(.10800 / 12)),3)
+		FROM            tblSalesForce_Pricing AS A INNER JOIN
+								 tblDesignTypes AS G ON A.Product_Category = G.Product_Pricing_Group INNER JOIN
+								 tblSalesForce_Pricing_Multiplier AS T ON A.Product_Category = T.Product_Category INNER JOIN
+								 tblSalesForce_Catalog AS K ON T.FiberID = K.FiberID INNER JOIN
+								 tblDesignCodeFiberElementValue AS E ON E.FiberID = K.FiberID INNER JOIN
+								 tblCableConstructionReferences AS CR ON CR.Base = K.Base AND G.DesignTypeID = CR.DesignTypeID
+		WHERE TBLetter IN( 'r', 's' )
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+
+--******************************
+--Pricing for armored cables
+--********************************
+	BEGIN TRY
+		BEGIN TRAN
+		UPDATE tblSalesForce_Catalog
+		SET Price =	Price + G.ArmorCostAdder, LoadedBaseCost = LoadedBaseCost + ArmorLoadedCost, BaseCost = AmorMaterialCost + BaseCost
+		FROM            tblSalesForce_Catalog AS K INNER JOIN ArmorConstructionBase_TEMP G ON K.Base = G.Base
+		WHERE armored = 1
+			
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+--******************************
+--Pricing for mixed fiber cables
+--********************************
+	BEGIN TRY
+		BEGIN TRAN
+		UPDATE dbo.tblSalesForce_Catalog 
+		SET Loaded_Base_Cost_Fiber_Included__c   = NULL
+		WHERE Fiber_Type_Config__c like '%mixed%'
+
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+end
+
+
+
+GO
diff --git a/Stored Procedures/SalesForce.usp_CatalogCode_RemoveDuplicates.sql b/Stored Procedures/SalesForce.usp_CatalogCode_RemoveDuplicates.sql
new file mode 100644
index 0000000..f15384f
--- /dev/null
+++ b/Stored Procedures/SalesForce.usp_CatalogCode_RemoveDuplicates.sql
@@ -0,0 +1,40 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+-- =============================================
+-- Author:      Bryan Eddy
+-- Create date: 7/20/2017
+-- Description: Delete duplicate records to prevent the Quoting item creation procedure from erroring out.
+-- =============================================
+
+CREATE PROCEDURE [SalesForce].[usp_CatalogCode_RemoveDuplicates]
+as
+BEGIN
+	DECLARE @ErrorNumber INT = ERROR_NUMBER();
+	DECLARE @ErrorLine INT = ERROR_LINE();
+		BEGIN TRY
+			BEGIN TRAN
+			;WITH cte AS (
+				SELECT *, ROW_NUMBER() OVER (PARTITION BY CatalogCode ORDER BY CatalogCode,Base Desc ) AS RowNumber
+				FROM 
+				(
+					SELECT CatalogCode, F.Base,COUNT(F.CatalogCode) OVER (PARTITION BY CatalogCode) Countof--, MAX(G.DateCreated) OVER (PARTITION BY CatalogCode) MaxDateCreated_Construction, G.DateCreated--, MAX(F.DateCreated) OVER (PARTITION BY CatalogCode) MaxDateCreated_Item, f.DateCreated DateCreated_Item
+					FROM tblSalesForce_Catalog F --INNER JOIN tblCableConstructionReferences G ON G.Base = F.Base
+				)X 
+				WHERE Countof > 1
+			)
+			DELETE cte WHERE RowNumber > 1
+			COMMIT TRAN
+		END TRY
+		BEGIN CATCH
+			IF @@TRANCOUNT > 0
+			ROLLBACK TRANSACTION;
+ 
+			PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+			PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+			THROW;
+		END CATCH;
+END
+GO
diff --git a/Stored Procedures/SalesForce.usp_CatalogCode_Special_Subunit.sql b/Stored Procedures/SalesForce.usp_CatalogCode_Special_Subunit.sql
new file mode 100644
index 0000000..d53adaf
--- /dev/null
+++ b/Stored Procedures/SalesForce.usp_CatalogCode_Special_Subunit.sql
@@ -0,0 +1,53 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+-- Author:		Bryan Eddy
+-- ALTER date: 10/5/2016
+-- Description:	Generate the catalog code and attributes for Sales Force Quoting - Update certain items with the special subunit coloring indicator
+
+-- =============================================
+CREATE PROCEDURE [SalesForce].[usp_CatalogCode_Special_Subunit] 
+AS
+BEGIN
+
+
+DECLARE @ErrorNumber INT = ERROR_NUMBER();
+DECLARE @ErrorLine INT = ERROR_LINE();
+
+
+	BEGIN TRY
+		BEGIN TRAN
+
+
+
+		INSERT INTO tblSalesForce_Catalog
+								 (CatalogCode, Base, Weight_kg_per_m, 
+								 K.DesignTypeDesc, Jacket, TBType, TBDescription, NominalOD, NumSubFillers, NumSubPositions,FinishedCableColor,TBLetter,
+								 CablePasses,FiberCount,UnitOD, BaseID,K.DesignTypeId, Armored,Boxed, Print_Type__c, Min_Order_Quantity__c, Fiber_Type__c,FiberID,SetupID
+								 ,Non_Standard,Active,ProdLevel3)
+
+		SELECT LEFT(CatalogCode,10) + Special_Subunit_Indicator + SUBSTRING(CatalogCode,12,LEN(CatalogCode)-11), Base, Weight_kg_per_m, 
+								 K.DesignTypeDesc, Jacket, TBType, TBDescription, NominalOD, NumSubFillers, NumSubPositions,FinishedCableColor,TBLetter,
+								 CablePasses,FiberCount,UnitOD, BaseID,K.DesignTypeId, Armored,Boxed,Print_Type__c,k.Min_Order_Quantity__c,Fiber_Type__c,FiberID,SetupID
+								 ,1,k.Active,ProdLevel3
+		FROM [dbo].[tblDesignSpecialSubunitColor] CROSS JOIN dbo.tblDesignTypes A  INNER JOIN dbo.tblSalesForce_Catalog K ON A.DesignTypeID = K.DesignTypeID
+		WHERE Special_Subunit_Color_X = 1 and CablePasses = 2
+
+
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+
+END
+
+GO
diff --git a/Stored Procedures/SalesForce.usp_CatalogCode_UpdateStage.sql b/Stored Procedures/SalesForce.usp_CatalogCode_UpdateStage.sql
new file mode 100644
index 0000000..0006a4a
--- /dev/null
+++ b/Stored Procedures/SalesForce.usp_CatalogCode_UpdateStage.sql
@@ -0,0 +1,43 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+/****** Script for SelectTopNRows command from SSMS  ******/
+
+CREATE PROCEDURE [SalesForce].[usp_CatalogCode_UpdateStage]
+AS
+BEGIN
+	TRUNCATE TABLE tblSalesForce_Catalog_Stage
+
+	DECLARE @ErrorNumber INT = ERROR_NUMBER();
+	DECLARE @ErrorLine INT = ERROR_LINE();
+
+
+		BEGIN TRY
+			BEGIN TRAN
+
+			INSERT INTO tblSalesForce_Catalog_Stage
+									 (CatalogCode, Base, Weight_kg_per_m, DesignTypeDesc, Jacket, TBType, TBDescription, NominalOD, NumSubFillers, NumSubPositions, CablePasses, BaseID, 
+									 BaseCost, FiberCount, UnitOD, OracleItem, COLOR__c, LoadedBaseCost, Armored, Boxed, BoxedLength_FT, DesignTypeID, DateCreated, Fiber_Type__c, 
+									 Armor_Type__c, Packaging__c, UOM__c, Stock__c, Lead_Time_ID__c, ImageURL__c, Product_Spec_Link__c, Min_Order_Quantity__c, Print_Type__c, 
+									 Product_Quote_Description__c, ArmorJacket, FiberID, TBLetter, FinishedCableColor, FurcationTube, SetupID,Non_Standard, Active, Price, ProdLevel1, ProdLevel2, ProdLevel3, ID)
+			SELECT        CatalogCode, Base, Weight_kg_per_m, DesignTypeDesc, Jacket, TBType, TBDescription, NominalOD, NumSubFillers, NumSubPositions, CablePasses, BaseID, 
+									 BaseCost, FiberCount, UnitOD, OracleItem, COLOR__c, LoadedBaseCost, Armored, Boxed, BoxedLength_FT, DesignTypeID, DateCreated, Fiber_Type__c, 
+									 Armor_Type__c, Packaging__c, UOM__c, Stock__c, Lead_Time_ID__c, ImageURL__c, Product_Spec_Link__c, Min_Order_Quantity__c, Print_Type__c, 
+									 Product_Quote_Description__c, ArmorJacket, FiberID, TBLetter, FinishedCableColor, FurcationTube, SetupID, Non_Standard, Active, Price, ProdLevel1, ProdLevel2, 
+									 ProdLevel3, ID
+			FROM            tblSalesForce_Catalog
+
+			COMMIT TRAN
+		END TRY
+		BEGIN CATCH
+			IF @@TRANCOUNT > 0
+			ROLLBACK TRANSACTION;
+ 
+			PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+			PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+			THROW;
+		END CATCH;
+END
+GO
diff --git a/Stored Procedures/Schedule.usp_GetFurcationTube.sql b/Stored Procedures/Schedule.usp_GetFurcationTube.sql
new file mode 100644
index 0000000..a21cd1e
--- /dev/null
+++ b/Stored Procedures/Schedule.usp_GetFurcationTube.sql
@@ -0,0 +1,34 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+/*
+Author:		Bryan Eddy
+Date:		5/21/2018
+Desc:		Produre to get the furcation tube
+Version:	1
+Update:		n/a
+*/
+CREATE PROCEDURE [Schedule].[usp_GetFurcationTube] 
+(
+@Item NVARCHAR(100)
+)
+AS
+BEGIN
+	WITH cteFurcation
+	AS(
+	SELECT AssemblyItemNumber, ComponentItemNumber,SUM(CAST(ComponentQuantity AS INT)) AS ComponentQuantity--, SUM(CAST(CountPerUOM AS INT)) AS CountPerUOM
+	FROM dbo.AFLPRD_BOMInvComp_CAB
+	GROUP BY AssemblyItemNumber, ComponentItemNumber
+	HAVING ComponentItemNumber LIKE 'frc%'
+	)
+	SELECT e.AssemblyItemNumber,
+		   e.ComponentItemNumber,
+		   e.ComponentQuantity
+	FROM cteFurcation e
+	WHERE e.AssemblyItemNumber = @Item
+	ORDER BY e.AssemblyItemNumber
+
+END
+
+GO
diff --git a/Stored Procedures/dbo.usp_CatalogCode_SalesForce_Armor_Cost_Weight.sql b/Stored Procedures/dbo.usp_CatalogCode_SalesForce_Armor_Cost_Weight.sql
deleted file mode 100644
index 50c04aa..0000000
--- a/Stored Procedures/dbo.usp_CatalogCode_SalesForce_Armor_Cost_Weight.sql
+++ /dev/null
@@ -1,75 +0,0 @@
-SET QUOTED_IDENTIFIER ON
-GO
-SET ANSI_NULLS ON
-GO
-
-
-CREATE PROCEDURE [dbo].[usp_CatalogCode_SalesForce_Armor_Cost_Weight]
-as
-BEGIN 
-
-
-
-IF OBJECT_ID(N'tempdb..#BaseArmor', N'U') IS NOT NULL
-DROP TABLE #BaseArmor
-
-	SELECT JacketLetter, B.NominalOD CoreOD, G.MaxCoreOD, Base, ArmorExtension, G.NominalOD ArmorOD, AmorMaterialCost
-	, ArmorWeight, SalesForceDescription, K.BaseID, G.Armor, JacketRating, ArmorCostAdder, P.ArmorSize
-	INTO #BaseArmor
-	FROM dbo.tblCableConstructionReferences K INNER JOIN dbo.tblCableConstructions B ON K.BaseID = B.BaseID INNER JOIN dbo.tblArmor_Costing_Weight G ON G.JacketLetter = K.CableLevel1
-		INNER JOIN dbo.tblDesignTypes E ON E.DesignTypeID = K.DesignTypeID INNER JOIN tblDesignArmor P ON P.Armor = G.Armor
-	WHERE B.NominalOD <= G.MaxCoreOD AND E.Armor = 1
-	order by base
-
-
-IF OBJECT_ID(N'tempdb..#BaseMaxArmor', N'U') IS NOT NULL
-DROP TABLE #BaseMaxArmor
-
-SELECT MIN(MaxCoreOD) MaxCoreOD, Base, JacketLetter
-INTO #BaseMaxArmor
-FROM #BaseArmor
-GROUP BY Base, JacketLetter
-
-
---IF OBJECT_ID(N'ArmorConstructionBase', N'U') IS NOT NULL
---DROP TABLE #ArmorCost
-
-DELETE FROM ArmorConstructionBase_TEMP;
-
-INSERT INTO ArmorConstructionBase_TEMP
-SELECT Base, Resources + OverHead + AmorMaterialCost as ArmorLoadedCost, ArmorExtension, AmorMaterialCost, ArmorWeight, ArmorOD, Armor, JacketRating, ArmorCostAdder
-,ArmorSize
---INTO ArmorConstructionBase
-FROM 
-(
-	SELECT G.*, 0.02482 + 0.001667 as Resources, 0.12836 as OverHead
-	FROM #BaseArmor G INNER JOIN #BaseMaxArmor K ON G.MaxCoreOD = K.MaxCoreOD AND G.Base = K.Base AND K.JacketLetter = G.JacketLetter
-
-	--ORDER BY g.Base 
-) Armor
-
---SELECT K.*, G.Active,G.ApprovedForQuoting
---FROM ArmorConstructionBase_TEMP K INNER JOIN tblCableConstructionReferences G ON G.Base = K.Base
---WHERE ApprovedForQuoting = 1 AND Active = 1
-
-INSERT INTO tblSalesForce_Catalog
-                         (CatalogCode, Base, Weight_kg_per_m, 
-                         DesignTypeDesc, Jacket, TBType, TBDescription, NominalOD, NumSubFillers, NumSubPositions,FinishedCableColor,TBLetter,
-						 CablePasses,FiberCount,UnitOD, BaseID,DesignTypeId, LoadedBaseCost, Armored, 
-						 BaseCost, Boxed, OracleItem,Fiber_Type__c,Armor_Type__c,Print_Type__c, Min_Order_Quantity__c, ArmorJacket,FiberID,
-						 FurcationTube, SetupID, Non_Standard, Active, ProdLevel3)
-
-SELECT		CatalogCode  + ArmorExtension, c. Base, Weight_kg_per_m+ArmorWeight, 
-                         C.DesignTypeDesc, Jacket, TBType, TBDescription, ArmorOD, NumSubFillers, NumSubPositions,FinishedCableColor,TBLetter,
-						 CablePasses,FiberCount,UnitOD, BaseID,C.DesignTypeId, LoadedBaseCost ,1, 
-						 BaseCost ,0 as Boxed, OracleItem,Fiber_Type__c, 'Armored' as Armor_Type__c,Print_Type__c,C.Min_Order_Quantity__c, JacketRating,FiberID
-						 ,FurcationTube, SetupID, Non_Standard, C.Active,ProdLevel3
-FROM		ArmorConstructionBase_TEMP A INNER JOIN tblSalesForce_Catalog C ON A.BASE = C.BASE INNER JOIN dbo.tblDesignTypes K ON K.DesignTypeID = C.DesignTypeID
-WHERE		K.Armor = 1 AND C.NominalOD > 2.9
-
-
-
-
-END
-
-GO
diff --git a/Stored Procedures/dbo.usp_CatalogCode_SalesForce_Armor_Cost_Weight_Create_Table.sql b/Stored Procedures/dbo.usp_CatalogCode_SalesForce_Armor_Cost_Weight_Create_Table.sql
deleted file mode 100644
index 8be0495..0000000
--- a/Stored Procedures/dbo.usp_CatalogCode_SalesForce_Armor_Cost_Weight_Create_Table.sql
+++ /dev/null
@@ -1,46 +0,0 @@
-SET QUOTED_IDENTIFIER ON
-GO
-SET ANSI_NULLS ON
-GO
-
-
-CREATE PROCEDURE [dbo].[usp_CatalogCode_SalesForce_Armor_Cost_Weight_Create_Table]
-as
-BEGIN 
-
---IF OBJECT_ID(N'tblArmor_Costing_Weight', N'U') IS NOT NULL
---DROP TABLE tblArmor_Costing_Weight;
-
-DELETE FROM tblArmor_Costing_Weight;
-
-INSERT INTO tblArmor_Costing_Weight (AmorMaterialCost, ArmorWeight, MaxArmorOD,ArmorExtension, JacketLetter, Armor, MaxCoreOD, NominalOD, Compound, ArmorSize, JacketRating)
-SELECT        ROUND((ColorCost.Item_Cost * 0.03 * tblMaterialDensity.SpecificGravity) * (PI() * (SQUARE((AmorMaterialCost.MaxArmorOD + A.WallThickness * 2) / 2) 
-                         - SQUARE(AmorMaterialCost.MaxArmorOD / 2))) / 1000 + (K.Item_Cost * 0.97 * tblMaterialDensity.SpecificGravity) * (PI() 
-                         * (SQUARE((AmorMaterialCost.MaxArmorOD + A.WallThickness * 2) / 2) - SQUARE(AmorMaterialCost.MaxArmorOD / 2))) / 1000 + AmorMaterialCost.AmorMaterialCost,6) AS AmorMaterialCost, 
-
-
-			ROUND(( tblMaterialDensity.SpecificGravity) * (PI()* (SQUARE((AmorMaterialCost.MaxArmorOD + A.WallThickness * 2) / 2) - SQUARE(AmorMaterialCost.MaxArmorOD / 2)))
-			 / 1000 + AmorMaterialCost.ArmorUsage,6) AS ArmorWeight, 
-
-                         AmorMaterialCost.MaxArmorOD, A.ArmorExtension, A.JacketLetter, AmorMaterialCost.Armor, AmorMaterialCost.MaxCoreOD, ROUND(A.WallThickness * 2 + AmorMaterialCost.MaxArmorOD, 2) 
-                         AS NominalOD, tblMaterialDensity.Compound, ArmorSize, JacketRating
---INTO	tblArmor_Costing_Weight
-FROM            tblDesignArmorJacket AS A INNER JOIN
-                         dbo.AFLPRD_INVSysItemCost_CAB AS K ON A.JacketMaterial = K.ItemNumber INNER JOIN
-                         dbo.AFLPRD_INVSysItemCost_CAB AS ColorCost ON ColorCost.ItemNumber = A.ColorChip INNER JOIN
-                         tblMaterialDensity ON A.JacketMaterial = tblMaterialDensity.Compound CROSS JOIN
-                             (SELECT        tblDesignArmor.MaxCoreOD, tblDesignArmor.MaxArmorOD, armorsize,ArmorUsage,
-                                                         tblDesignArmor.ArmorUsage * dbo.AFLPRD_INVSysItemCost_CAB.Item_Cost AS AmorMaterialCost, tblDesignArmor.Armor
-                               FROM            tblDesignArmor INNER JOIN
-                                                         dbo.AFLPRD_INVSysItemCost_CAB ON tblDesignArmor.OracleArmor = dbo.AFLPRD_INVSysItemCost_CAB.ItemNumber) 
-                         AS AmorMaterialCost
---ORDER BY		ArmorSize
-
-UPDATE tblArmor_Costing_Weight
-SET ArmorLoadedCost = 0.02482 + 0.001667 + 0.12836 + AmorMaterialCost
-
-
-
-END
-
-GO
diff --git a/Stored Procedures/dbo.usp_CatalogCode_SalesForce_Boxed_Items.sql b/Stored Procedures/dbo.usp_CatalogCode_SalesForce_Boxed_Items.sql
deleted file mode 100644
index 8a31f87..0000000
--- a/Stored Procedures/dbo.usp_CatalogCode_SalesForce_Boxed_Items.sql
+++ /dev/null
@@ -1,36 +0,0 @@
-SET QUOTED_IDENTIFIER ON
-GO
-SET ANSI_NULLS ON
-GO
--- =============================================
--- Author:		Bryan Eddy
--- ALTER date: 10/19/2016
--- Description:	Sales Force catalog code procedure to update eligigle items to have box indicators
--- =============================================
-CREATE PROCEDURE [dbo].[usp_CatalogCode_SalesForce_Boxed_Items]
-
-AS
-BEGIN
-
-INSERT INTO tblSalesForce_Catalog
-                         (CatalogCode, Base, Weight_kg_per_m, 
-                         DesignTypeDesc, Jacket, TBType, TBDescription, NominalOD, NumSubFillers, NumSubPositions,FinishedCableColor,TBLetter
-						 ,CablePasses,FiberCount,UnitOD, BaseID,DesignTypeId, Armored,Boxed, 
-						 BoxedLength_FT,LoadedBaseCost,BaseCost,OracleItem,Fiber_Type__c,Packaging__c,UOM__c,Print_Type__c,Min_Order_Quantity__c,FiberID
-						 ,FurcationTube,SetupID, Non_Standard, Active,ProdLevel3,Minimum_Order_Multiple__c)
-
-SELECT				CatalogCode+BoxExtension, Base, Weight_kg_per_m, 
-                         DesignTypeDesc, Jacket, TBType, TBDescription, NominalOD, NumSubFillers, NumSubPositions,FinishedCableColor,TBLetter
-						 ,CablePasses,FiberCount,UnitOD, BaseID,A.DesignTypeId, 0,1, 
-						 FeetCablePerBox,LoadedBaseCost, BaseCost ,OracleItem,Fiber_Type__c,'Box' as Packaging__c, 'Each' as UOM__c,Print_Type__c,Minimum_Order_Multiple,FiberID
-						 ,FurcationTube, SetupID, Non_Standard, Active,ProdLevel3,Minimum_Order_Multiple
-  FROM [Premise].[dbo].[tblDesignCode_BoxedFiber] A INNER JOIN tblSalesForce_Catalog K ON k.DesignTypeID = A.DesignTypeID
-WHERE NominalOD <= MaxOD AND K.Armored <> 1 and tbtype <>'furcation' --AND Base LIKE 'C%'
---ORDER BY NominalOD desc
-
-
-
-END
-
-
-GO
diff --git a/Stored Procedures/dbo.usp_CatalogCode_SalesForce_Cables.sql b/Stored Procedures/dbo.usp_CatalogCode_SalesForce_Cables.sql
deleted file mode 100644
index 7d2a97a..0000000
--- a/Stored Procedures/dbo.usp_CatalogCode_SalesForce_Cables.sql
+++ /dev/null
@@ -1,111 +0,0 @@
-SET QUOTED_IDENTIFIER ON
-GO
-SET ANSI_NULLS ON
-GO
-
-
--- =============================================
--- Author:		Bryan Eddy
--- ALTER date: 10/5/2016
--- Description:	Generate the catalog code and attributes for Sales Force Quoting - Appends All base cables to the table
--- Update:		Added table SalesForce.FiberToFiberDescriptionQuoting to allow for fibers to have multiple Sales Force Descriptions
--- Version:		2
--- =============================================
-CREATE PROCEDURE [dbo].[usp_CatalogCode_SalesForce_Cables] 
-
-AS
-BEGIN
-
-
-
-	--EXEC [OracleExtracts].[dbo].[usp_BOMCalculator_AllCables]
-
-
-DELETE FROM tblSalesForce_Catalog
-
-	-- SET NOCOUNT ON added to prevent extra result sets from
-	-- interfering with SELECT statements.
-	SET NOCOUNT ON;
-
-    -- Insert statements for procedure here
-
-	--IF OBJECT_ID (N'dbo.tblSalesForce_Catalog_Generator', N'U') IS NOT NULL
-	--DROP TABLE dbo.tblSalesForce_Catalog_Generator;
-
-
-	--Code appends all non-furcation cables to tblSalesForce_Catalog
-
-INSERT  INTO tblSalesForce_Catalog
-                         (CatalogCode, Base,Weight_kg_per_m, 
-                         DesignTypeDesc, Jacket, TBType, TBDescription, NominalOD, NumSubFillers, NumSubPositions
-						 ,CablePasses,FiberCount,UnitOD, BaseID,DesignTypeId, Armored,Boxed, Fiber_Type__c,Print_Type__c, Min_Order_Quantity__c,FiberID,FinishedCableColor,TBLetter,SetupID
-						 , Active,Non_Standard, ProdLevel3)
-SELECT DISTINCT 
-                         LEFT(tblCableConstructionReferences.DesignCode, 5) + tblDesignCodeFiberElementValue.FiberLetter + SUBSTRING(tblCableConstructionReferences.DesignCode, 6, 2) 
-						 + tblDesignCodeFiberElementValue.CablePrintType
-                         + COALESCE(tblDesignTypeS.DefaultFamilyColor,tblDesignCodeFiberElementValue.PreferedCableColor)
-						 --+ FinishedColor.ColorLetter
-						 + CASE WHEN tblCableConstructions.CablePasses = 1 AND tblCableConstructionReferences.TBType <> 'Ribbon' THEN '0' 
-								WHEN tblCableTightBufferReference.TBTypeID = 20 THEN 'X'
-							    WHEN tblCableConstructionReferences.TBType = 'Ribbon' THEN '1'
-							    ELSE 
-									--FinishedColor.ColorLetter
-									COALESCE(tblDesignTypeS.DefaultFamilyColor,tblDesignCodeFiberElementValue.PreferedCableColor )
-							END
-                          + tblCableTBType.TBLetter + CASE WHEN [DesignExtension] IS NULL 
-                         THEN '' ELSE [DesignExtension] END + + COALESCE(tblDesignCodeFiberElementValue.FiberExt,'') AS CatalogCode, tblCableConstructionReferences.Base, 
-                          tblBOM_Base_Weight.Weight AS Weight_kg_per_m, tblDesignTypes.SalesForceDescription, 
-                         JacketDescription_SalesForce, tblCableConstructionReferences.TBType, tblCableTBType.TightBufferDescription_SalesForce, 
-                         tblCableConstructions.NominalOD, tblCableConstructionReferences.NumSubFillers, tblCableConstructionReferences.NumSubPositions,
-                         tblCableConstructions.CablePasses, FiberCount--cast(substring(tblCableConstructionReferences.DesignCode, 3,3) as int) FiberCount
-						 ,CASE WHEN tblCableConstructionReferences.TBType = 'Ribbon' THEN SUBSTRING(tblCableConstructionReferences.DesignCode, 6,2) 
-						 ELSE (SUBSTRING(tblCableConstructionReferences.DesignCode, 6,1) + '.' + SUBSTRING(tblCableConstructionReferences.DesignCode, 7,1))+' mm'  END UnitOD
-						 , tblCableConstructionReferences.BaseID, dbo.tblCableConstructionReferences.DesignTypeID
-						 ,0 AS Armored
-						 ,0 AS Boxed
-						 ,Fiber_Type__c
-						 ,CASE WHEN tblDesignCodeFiberElementValue.CablePrintType = 1 THEN 'AFL Standard'
-							WHEN tblDesignCodeFiberElementValue.CablePrintType = 2 THEN 'Generic'
-							END  AS Print_Type__c
-						,tblDesignTypes.Min_Order_Quantity__c
-						,tblDesignCodeFiberElementValue.FiberID
-						,CASE WHEN tblDesignTypeS.DefaultFamilyColor IS NOT NULL THEN tblDesignTypeS.DefaultFamilyColor ELSE tblDesignCodeFiberElementValue.PreferedCableColor END
-						,tblCableTBType.TBLetter
-						,tblCableConstructionReferences.SetupID
-						, tblCableConstructionReferences.ReleasedDesign
-						, tblCableTBType.Non_Standard_Product
-						, tblDesignTypeGroups.DesignTypeGroupDesc
-FROM            tbl_Fibers INNER JOIN SalesForce.FiberToFiberDescriptionQuoting FiberLink ON FiberLink.FiberItemID = tbl_Fibers.FiberItemID
-                         INNER JOIN tblDesignCodeFiberElementValue ON tblDesignCodeFiberElementValue.FiberID = FiberLink.FiberID
-                         INNER JOIN tblFiberTBCatalog ON tbl_Fibers.TBCatalogType = tblFiberTBCatalog.TBCatalogType INNER JOIN
-                         tblFiberTBIndicators ON tblFiberTBCatalog.TBCatalogType = tblFiberTBIndicators.TBCatalogType INNER JOIN
-                         tblBOM_Base_Weight INNER JOIN
-                         tblCableTBType INNER JOIN
-                         tblCableConstructionReferences INNER JOIN
-                         tblCableTightBufferReference ON tblCableConstructionReferences.TBType = tblCableTightBufferReference.TBType INNER JOIN
-                         tblCableConstructions ON tblCableConstructionReferences.BaseID = tblCableConstructions.BaseID ON 
-                         tblCableTBType.TBIndicatorID = tblCableTightBufferReference.TBTypeID ON tblBOM_Base_Weight.BASE = tblCableConstructionReferences.Base INNER JOIN
-                         tblDesignTypes ON tblCableConstructionReferences.DesignTypeID = tblDesignTypes.DesignTypeID INNER JOIN
-                         tblDesignTypeGroups ON tblDesignTypes.DesignTypeGroupID = tblDesignTypeGroups.DesignTypeGroupID INNER JOIN
-                         tblDesignCodeJacket ON tblCableConstructionReferences.CableFamily = tblDesignCodeJacket.CableLetter AND 
-                         tblCableConstructionReferences.CableLevel1 = tblDesignCodeJacket.JacketLetter ON tblFiberTBIndicators.TBLetter = tblCableTBType.TBLetter 
-						 --INNER JOIN
-						 --tblDesignCodeJacketColor FinishedColor ON FinishedColor.CablePasses = tblCableConstructions.CablePasses --
-						 --INNER JOIN tblDesignCodeJacketColor SubColor ON SubColor.CablePasses = tblCableConstructions.CablePasses
-WHERE          (tblDesignCodeFiberElementValue.Active = 1) AND tblCableConstructionReferences.ApprovedForQuoting = 1 AND
-                         (tblDesignCodeFiberElementValue.FiberLetter NOT LIKE '%@%') AND (tblCableConstructionReferences.DesignTypeID IS NOT NULL) AND (tblDesignTypes.Active = 1) 
-                        AND (tblDesignTypeGroups.Active = 1) 
-						 AND (tblCableConstructionReferences.TBType <> 'Furcation' ) AND (tblCableConstructionReferences.ApprovedForQuoting = 1) 
-                         AND (tbl_Fibers.Active = 1) AND dbo.tblCableTBType.Active = 1
-						 --and tblCableConstructionReferences.Base like 'GQ144-2.0%'
-
-
-
-
-
-END
-
-
-
-
-GO
diff --git a/Stored Procedures/dbo.usp_CatalogCode_SalesForce_Descriptions.sql b/Stored Procedures/dbo.usp_CatalogCode_SalesForce_Descriptions.sql
deleted file mode 100644
index 18ac998..0000000
--- a/Stored Procedures/dbo.usp_CatalogCode_SalesForce_Descriptions.sql
+++ /dev/null
@@ -1,63 +0,0 @@
-SET QUOTED_IDENTIFIER ON
-GO
-SET ANSI_NULLS ON
-GO
--- =============================================
--- Author:		Bryan Eddy
--- ALTER date: 11/1/2016
--- Description:	ALTER item description for armored items, cables, and furcation tubes for the sales force quoting system
--- Update: 12/31/2017 Removed jacket color from description
--- =============================================
-CREATE PROCEDURE [dbo].[usp_CatalogCode_SalesForce_Descriptions] 
-	-- Add the parameters for the stored procedure here
-
-AS
-BEGIN
-
-
-
-
-
---ALTERs description for all basic cables (non-armored, non-furcation)
-Update dbo.tblSalesForce_Catalog 
-SET Product_Quote_Description__c = K.DesignTypeDesc + ', ' + 
-	Case WHEN K.Jacket = 'Riser' or K.Jacket = 'Plenum' THEN k.jacket + ' Rated'
-		 ELSE k.jacket 
-		 END
-	+ ', ' --+ K.COLOR__c +' jacket color, ' 
-	+ cast(k.FiberCount as nvarchar ) + ' ' + G.FiberDescription_SalesForce 
-		+ ' fibers, ' + CAST(k.UnitOD AS NVARCHAR) + ', RoHS, ' + k.TBDescription
-FROM [dbo].[tblSalesForce_Catalog] K INNER JOIN dbo.tblDesignCodeFiberElementValue G ON K.FiberID = G.FiberID
-WHERE k.TBType <> 'FURCATION'
-
---Descriptin for furcation cables
-Update dbo.tblSalesForce_Catalog 
-SET Product_Quote_Description__c = K.DesignTypeDesc +  ', ' --+ K.COLOR__c +' jacket color, ' 
-+ (CASE WHEN  k.FurcationTube IS NOT NULL THEN K.FurcationTube ELSE 'Furcation' END)
-FROM [dbo].[tblSalesForce_Catalog] K
-WHERE k.TBType = 'FURCATION'
-
---Update armor description for armored cables
-Update dbo.tblSalesForce_Catalog 
-SET Product_Quote_Description__c = Product_Quote_Description__c + ', Aluminum Interlocking armor'-- with a ' + K.ArmorJacket + ' Jacket '
-FROM [dbo].[tblSalesForce_Catalog] K 
-WHERE k.Armored = 1
-
---Update ribbon description
-Update dbo.tblSalesForce_Catalog 
-SET Product_Quote_Description__c = K.DesignTypeDesc + ', ' + 
-	Case WHEN K.Jacket = 'Riser' or K.Jacket = 'Plenum' THEN k.jacket + ' Rated'
-		 ELSE k.jacket 
-		 END
-	+ ', ' --+ K.COLOR__c +' jacket color, ' 
-	+ cast(k.FiberCount as nvarchar ) + ' ' + G.FiberDescription_SalesForce 
-		+ ' fibers, ' + CAST(k.UnitOD AS NVARCHAR) + ', RoHS, ' + k.TBDescription + ', No skew testing required'
-FROM [dbo].[tblSalesForce_Catalog] K INNER JOIN dbo.tblDesignCodeFiberElementValue G ON K.FiberID = G.FiberID
-WHERE k.TBType = 'RIBBON'
-
-
-
-END
-
-
-GO
diff --git a/Stored Procedures/dbo.usp_CatalogCode_SalesForce_FlateFile_Export.sql b/Stored Procedures/dbo.usp_CatalogCode_SalesForce_FlateFile_Export.sql
deleted file mode 100644
index 2ae0605..0000000
--- a/Stored Procedures/dbo.usp_CatalogCode_SalesForce_FlateFile_Export.sql
+++ /dev/null
@@ -1,15 +0,0 @@
-SET QUOTED_IDENTIFIER ON
-GO
-SET ANSI_NULLS ON
-GO
-CREATE PROCEDURE [dbo].[usp_CatalogCode_SalesForce_FlateFile_Export]
-as
-
-
-BEGIN
-EXEC msdb.dbo.sp_start_job  
-    @job_name = N'SalesForce_Catalog_Export'
-END
-
-
-GO
diff --git a/Stored Procedures/dbo.usp_CatalogCode_SalesForce_Furcation.sql b/Stored Procedures/dbo.usp_CatalogCode_SalesForce_Furcation.sql
deleted file mode 100644
index 1684eac..0000000
--- a/Stored Procedures/dbo.usp_CatalogCode_SalesForce_Furcation.sql
+++ /dev/null
@@ -1,106 +0,0 @@
-SET QUOTED_IDENTIFIER ON
-GO
-SET ANSI_NULLS ON
-GO
-
--- =============================================
--- Author:		Bryan Eddy
--- ALTER date: 10/5/2016
--- Description:	Generate the catalog code and attributes for Sales Force Quoting - Furcation Cables
--- =============================================
-CREATE PROCEDURE [dbo].[usp_CatalogCode_SalesForce_Furcation] 
-
-AS
-BEGIN
-
-
-
-INSERT INTO tblSalesForce_Catalog
-                         (CatalogCode
-						 , Base
-						 , Weight_kg_per_m
-                         ,DesignTypeDesc
-						 , Jacket
-						 , TBType
-						 , TBDescription
-						 , NominalOD
-						 , NumSubFillers
-						 , NumSubPositions
-						 ,CablePasses
-						 ,FiberCount
-						 ,UnitOD
-						 ,baseid
-						 ,DesignTypeID
-						 ,Armored
-						 ,Boxed
-						 ,Fiber_Type__c
-						 ,Min_Order_Quantity__c
-						 ,FiberID
-						 , FinishedCableColor,TBLetter
-						 ,FurcationTube
-						 ,SetupID
-						 ,Active
-						 ,Non_Standard
-						 ,ProdLevel3)
-SELECT DISTINCT 
-                         LEFT(tblCableConstructionReferences.DesignCode, 5) + '@' + SUBSTRING(tblCableConstructionReferences.DesignCode, 6, 2) 
-                         + tblDesignCodeFiberElementValue.CablePrintType +  tblDesignCodeJacketColor.ColorLetter + CASE WHEN dbo.tblFurcationTubeReference.BaseID IS NULL 
-                         THEN '0' ELSE dbo.tblDesignCodeFurcationTube.FurcationLetter END + tblCableTBType.TBLetter + CASE WHEN [DesignExtension] IS NULL 
-                         THEN '' ELSE [DesignExtension] END + tblDesignCodeFiberElementValue.FiberExt AS CatalogCode
-						 , tblCableConstructionReferences.Base
-						 , tblBOM_Base_Weight.Weight AS Weight_kg_per_m
-						 , tblDesignTypes.SalesForceDescription
-						 , JacketDescription_SalesForce
-						 , tblCableConstructionReferences.TBType
-						 , tblCableTBType.TightBufferDescription_SalesForce
-                         ,tblCableConstructions.NominalOD
-						 , tblCableConstructionReferences.NumSubFillers
-						 , tblCableConstructionReferences.NumSubPositions 
-						 , tblCableConstructions.CablePasses
-						 ,NumSubPositions FiberCount
-						 ,CASE WHEN tblDesignTypes.DesignTypeID = 21 THEN substring(tblCableConstructionReferences.DesignCode, 6,2) 
-						 ELSE (substring(tblCableConstructionReferences.DesignCode, 6,1) + '.' + substring(tblCableConstructionReferences.DesignCode, 7,1))+' mm'  END UnitOD
-						 ,tblCableConstructionReferences.BaseID
-						 , dbo.tblCableConstructionReferences.DesignTypeID
-						 ,0 Armored
-						 ,0 Boxed
-						 ,Fiber_Type__c
-						 ,tblDesignTypes.Min_Order_Quantity__c
-						 ,FiberID
-						 ,tblDesignCodeFiberElementValue.PreferedCableColor
-						,tblCableTBType.TBLetter
-						,tblDesignCodeFurcationTube.FurcationTube
-						,tblCableConstructionReferences.SetupID
-						,tblCableConstructionReferences.Active
-						,tblCableTBType.Non_Standard_Product
-						,tblDesignTypeGroups.DesignTypeGroupDesc
-FROM            tblDesignCodeFiberElementValue INNER JOIN
-                         tblCableTBType INNER JOIN
-                         tblDesignCodeJacketColor AS tblDesignCodeJacketColor_1 INNER JOIN
-                         tblDesignCodeJacketColor INNER JOIN
-                         tblCableConstructionReferences INNER JOIN
-                         tblCableTightBufferReference ON tblCableConstructionReferences.TBType = tblCableTightBufferReference.TBType INNER JOIN
-                         tblCableConstructions ON tblCableConstructionReferences.BaseID = tblCableConstructions.BaseID ON 
-                         tblDesignCodeJacketColor.CablePasses = tblCableConstructions.CablePasses ON 
-                         tblDesignCodeJacketColor_1.CablePasses = tblCableConstructions.CablePasses ON tblCableTBType.TBIndicatorID = tblCableTightBufferReference.TBTypeID ON 
-                         tblDesignCodeFiberElementValue.PreferedCableColor = tblDesignCodeJacketColor.ColorLetter INNER JOIN
-                         tblDesignTypes ON tblCableConstructionReferences.DesignTypeID = tblDesignTypes.DesignTypeID INNER JOIN
-                         tblDesignTypeGroups ON tblDesignTypes.DesignTypeGroupID = tblDesignTypeGroups.DesignTypeGroupID INNER JOIN
-                         tblDesignCodeJacket ON tblCableConstructionReferences.CableFamily = tblDesignCodeJacket.CableLetter AND 
-                         tblCableConstructionReferences.CableLevel1 = tblDesignCodeJacket.JacketLetter LEFT OUTER JOIN
-                         tblFurcationTubeReference ON tblCableConstructions.BaseID = tblFurcationTubeReference.BaseID LEFT OUTER JOIN
-                         tblDesignCodeFurcationTube ON tblFurcationTubeReference.Furcation = tblDesignCodeFurcationTube.Furcation LEFT OUTER JOIN
-                         tblBOM_Base_Weight ON tblCableConstructionReferences.Base = tblBOM_Base_Weight.BASE
-WHERE         (tblDesignCodeFiberElementValue.Active = 1) AND tblCableConstructionReferences.ApprovedForQuoting = 1 AND
-                         (tblDesignCodeJacketColor.FinsishedCableColorPosition = 1) AND (tblDesignCodeJacketColor_1.SubunitCableColorPostion = 1) AND 
-                         (tblDesignCodeFiberElementValue.FiberLetter = '@') AND (tblCableConstructionReferences.DesignTypeID IS NOT NULL) AND (tblDesignTypes.Active = 1) AND 
-                         (tblDesignTypeGroups.Active = 1) AND (tblCableConstructionReferences.TBType = 'Furcation') AND (tblCableConstructionReferences.ApprovedForQuoting = 1)
-
-
-
-
-END
-
-
-
-GO
diff --git a/Stored Procedures/dbo.usp_CatalogCode_SalesForce_Generator.sql b/Stored Procedures/dbo.usp_CatalogCode_SalesForce_Generator.sql
deleted file mode 100644
index 57d8389..0000000
--- a/Stored Procedures/dbo.usp_CatalogCode_SalesForce_Generator.sql
+++ /dev/null
@@ -1,175 +0,0 @@
-SET QUOTED_IDENTIFIER ON
-GO
-SET ANSI_NULLS ON
-GO
-
--- =============================================
--- Author:		Bryan Eddy
--- ALTER date: 10/5/2016
--- Description:	Generate the catalog code and attributes for Sales Force Quoting
--- Version:		2
--- Update:		Added logic for Tactical quoting
--- =============================================
-CREATE PROCEDURE [dbo].[usp_CatalogCode_SalesForce_Generator] 
-
-AS
-BEGIN
-SET NOCOUNT ON;
-
---ALTERs table of BOM weights
---EXEC [OracleExtracts].[dbo].[usp_BOMCalculator_AllCables]
-
-
-TRUNCATE TABLE tblSalesForce_Catalog;
-
---Appends all base cables to tblSalesForce_Catalog
-EXEC dbo.usp_CatalogCode_SalesForce_Cables;
-
-
---Appends all furcation cables to tblSalesForce_Catalog
-EXEC dbo.usp_CatalogCode_SalesForce_Furcation;
-
-
-DELETE FROM dbo.tblSalesForce_Catalog 
-WHERE (FiberCount > 4 or DesignTypeDesc LIKE '%BREAKOUT%') AND TBType = 'TightBuffer' AND tbletter <>'1'
-
---Delete OM4+ Spdier web ribbons from catalog code table
-DELETE FROM dbo.tblSalesForce_Catalog
-WHERE (TBLetter ='r' or TBLetter ='s')  AND CatalogCode like '%+'
-
---Delete Mixed fiber option for cables with 1 fiber
-DELETE  FROM dbo.tblSalesForce_Catalog
-where FiberCount = 1 and Fiber_Type__c like '%MIXED%'
-
-
---Update Unit OD for ribbon cables 
-UPDATE       tblSalesForce_Catalog
-SET                UnitOD = tblCableRibbonUnitType.Ribbon_Description
-FROM            tblSalesForce_Catalog INNER JOIN
-                         tblCableRibbonUnitType ON tblSalesForce_Catalog.FiberCount = tblCableRibbonUnitType.FiberCount AND 
-                         tblSalesForce_Catalog.UnitOD = tblCableRibbonUnitType.RibbonUnitType
-
-
---Updates all special items in tblSalesForce_Catalog to have X and Z subunits
-EXEC [dbo].[usp_CatalogCode_SalesForce_Special_Subunit] 
-
---Updates costing for all non-armored cable in tblSalesForce_Catalog
-EXEC dbo.usp_CatalogCode_SalesForce_NonArmored_Costing
-
---Calculates weights and cost for armoring of cables and appends armored versions of the cables into tblSalesForce_Catalog
-EXEC [dbo].[usp_CatalogCode_SalesForce_Armor_Cost_Weight]
-
---Identifies which cables can be boxed and appends those cables with the box suffix to tblSalesForce_Catalog
-EXEC dbo.usp_CatalogCode_SalesForce_Boxed_Items
-
-UPDATE tblSalesForce_Catalog
-SET COLOR__c = G.ColorDescription_SalesForce
-FROM tblSalesForce_Catalog K INNER JOIN [dbo].[tblDesignCodeJacketColor] G ON  G.ColorLetter = K.FinishedCableColor
-
---Add spec and image links to each row (non-boxed)
-UPDATE tblSalesForce_Catalog
-SET [ImageURL__c] = G.[ImageURL__c], Product_Spec_link__c = g.Product_Spec_link__c
-FROM tblSalesForce_Catalog K INNER JOIN [dbo].[tblDesignCode_CableImages] G ON k.DesignTypeID = G.DesignTypeID AND K.Armor_Type__c = G.Armor_Type__c  
-WHERE K.Packaging__c = 'REEL'
-
---Add spec and image links to Boxed items
-UPDATE tblSalesForce_Catalog
-SET [ImageURL__c] = G.[ImageURL__c], Product_Spec_link__c = g.Product_Spec_link__c
-FROM tblSalesForce_Catalog K CROSS JOIN [dbo].[tblDesignCode_CableImages] G
-WHERE K.Boxed = 1 AND G.Packaging__c = 'box'
-
---Update descriptions of each cable
-EXEC dbo.usp_CatalogCode_SalesForce_Descriptions
-
-
---Update lead time ID's for each item
-UPDATE dbo.tblSalesForce_Catalog
-Set Lead_Time_ID__c = 
-	CASE WHEN Armor_Type__c = 'Armored' THEN K.LeadTime_ID_Armored
-	ELSE K.LeadTime_ID
-	END 
-FROM dbo.tblCableConstructionReferences K INNER JOIN DBO.tblSalesForce_Catalog G ON  K.base = g.base	
-
---Update the price of all cables
-EXEC usp_CatalogCode_SalesForce_PricingUpdate
-
-
---Identify stock items and set Stock__c to 1
-UPDATE DBO.tblSalesForce_Catalog
-SET Stock__b = 1,Stock__c='Yes', Min_Order_Quantity__c = G.Min_Order_Quantity, UOM__c = 'Feet'
-, LoadedBaseCost = LoadedBaseCost /3.281, BaseCost = BaseCost /3.281--, Weight_kg_per_m = Weight_kg_per_m * 0.671969
-,price = G.Price_feet, Lead_Time_ID__c = G.LeadTime_ID
-FROM dbo.tblstockitems G INNER JOIN dbo.tblSalesForce_Catalog K ON G.itemno = k.CatalogCode
-
---Remove -BIF for all Tactical cable products
-UPDATE dbo.tblSalesForce_Catalog
-SET CatalogCode = REPLACE(CatalogCode,'-BIF','')
-WHERE DesignTypeID IN (19,18)
-
---Update pricing static priced list
-/* eABF and Tactical don't want a calculated version.  They have supplied a list they would like the price to reflect*/
---Static price list in Feet
-UPDATE DBO.tblSalesForce_Catalog
-SET   UOM__c = I.UnitOfMeasure
-, LoadedBaseCost = LoadedBaseCost /3.281
-, BaseCost = BaseCost /3.281
-,Loaded_Base_Cost_Fiber_Included__c =Loaded_Base_Cost_Fiber_Included__c/3.281 --, Weight_kg_per_m = Weight_kg_per_m * 0.671969
-,price = G.Price
-FROM SalesForce.ItemPriceOverride G INNER JOIN dbo.tblSalesForce_Catalog K ON G.itemno = k.CatalogCode
-INNER JOIN SalesForce.UnitOfMeasure I ON I.UnitOfMeasureID = G.UnitOfMeasureID
-WHERE G.UnitOfMeasureID = 2
-
---Static Price List in Meters
-UPDATE DBO.tblSalesForce_Catalog
-SET   UOM__c = I.UnitOfMeasure
-, LoadedBaseCost = LoadedBaseCost 
-, BaseCost = BaseCost
-,Loaded_Base_Cost_Fiber_Included__c =Loaded_Base_Cost_Fiber_Included__c --, Weight_kg_per_m = Weight_kg_per_m * 0.671969
-,price = G.Price
-FROM SalesForce.ItemPriceOverride G INNER JOIN dbo.tblSalesForce_Catalog K ON G.itemno = k.CatalogCode
-INNER JOIN SalesForce.UnitOfMeasure I ON I.UnitOfMeasureID = G.UnitOfMeasureID
-WHERE G.UnitOfMeasureID = 1
-
---Remove all tactical cables that are not in the override table
-DELETE dbo.tblSalesForce_Catalog 
-FROM dbo.tblSalesForce_Catalog C LEFT JOIN SalesForce.ItemPriceOverride X ON X.ItemNo = C.CatalogCode
-WHERE DesignTypeID IN (19,18) AND X.ItemNo IS NULL
-
-
-UPDATE dbo.tblSalesForce_Catalog
-  SET Non_Standard_Design__c = (CASE WHEN Non_Standard = 1 THEN 'TRUE' ELSE 'FALSE' END),
-   Distributor_Price_List__c = (CASE WHEN Stock__b = 1 THEN 'Yes' ELSE 'No' END),
-   Override__c = (CASE WHEN Stock__b = 1 THEN 'TRUE' ELSE 'FALSE' END),
-   Fiber_Count_Config__c = FiberCount,
-   Fiber_Type_Config__c = Fiber_Type__c,
-   Status__c = (CASE WHEN Active = 1 THEN 'Active' ELSE 'Inactive' END ),
-   Premise_Design_Program_Synch_ID = CatalogCode, 
-   Subunit_Color__c = (CASE WHEN CablePasses = 2 THEN COLOR__c ELSE Subunit_Color__c END),
-   Jacket_Print__c = Print_Type__c;
-
-
---Remove the Subunit_Color_Position__c indicator for single pass cables
-UPDATE tblSalesForce_Catalog
-SET Subunit_Color_Position__c = NULL
-WHERE CablePasses = 1 ;
-
-DELETE FROM tblSalesForce_Catalog
-WHERE TBType LIKE '%SPIDER%' AND SUBSTRING(CatalogCode,12,1) = 'S'
-
---DELETE any duplicates that may be housed in the table.
-EXEC dbo.usp_CatalogCode_SalesForce_RemoveDuplicates
-
-
-EXEC usp_CatalogCode_SalesForce_FlateFile_Export;
-
---If the count of SalesForce_Catalog table is < 30k then send Bryan an email and don't run SF update
-
-exec usp_CatalogCode_SalesForce_InvokeURL_SalesForce_Update ;
-
-
-
-END
-
-
-
-GO
diff --git a/Stored Procedures/dbo.usp_CatalogCode_SalesForce_InvokeURL_SalesForce_Update.sql b/Stored Procedures/dbo.usp_CatalogCode_SalesForce_InvokeURL_SalesForce_Update.sql
deleted file mode 100644
index fb11cf6..0000000
--- a/Stored Procedures/dbo.usp_CatalogCode_SalesForce_InvokeURL_SalesForce_Update.sql
+++ /dev/null
@@ -1,37 +0,0 @@
-SET QUOTED_IDENTIFIER ON
-GO
-SET ANSI_NULLS ON
-GO
-/*
--- =============================================
-	Author:			Bryan Eddy
-	Create date:	12/11/2017
-	Description:	Invoke URL to push data to Sales Force
-	Version:		2
-	Update:			Added header.
--- =============================================
-
-*/
-CREATE PROCEDURE [dbo].[usp_CatalogCode_SalesForce_InvokeURL_SalesForce_Update] 
-
-
-AS
-BEGIN
-Declare @Object as Int;
-Declare @ResponseText as Varchar(8000);
-
-
-Exec sp_OACreate 'MSXML2.XMLHTTP', @Object OUT;
-Exec sp_OAMethod @Object, 'open', NULL, 'get',
-                 'http://ci-data.aflglobal.com/PRE_SF_Products', --Your Web Service Url (invoked)
-                 'false'
-Exec sp_OAMethod @Object, 'send'
-Exec sp_OAMethod @Object, 'responseText', @ResponseText OUTPUT
-
-Select @ResponseText
-
-Exec sp_OADestroy @Object
-
-
-END
-GO
diff --git a/Stored Procedures/dbo.usp_CatalogCode_SalesForce_InvokeURL_SalesForce_Update_DEV.sql b/Stored Procedures/dbo.usp_CatalogCode_SalesForce_InvokeURL_SalesForce_Update_DEV.sql
deleted file mode 100644
index 9204e5e..0000000
--- a/Stored Procedures/dbo.usp_CatalogCode_SalesForce_InvokeURL_SalesForce_Update_DEV.sql
+++ /dev/null
@@ -1,32 +0,0 @@
-SET QUOTED_IDENTIFIER ON
-GO
-SET ANSI_NULLS ON
-GO
--- =============================================
--- Author:		<Author,,Name>
--- Create date: <Create Date,,>
--- Description:	<Description,,>
--- =============================================
-CREATE PROCEDURE [dbo].[usp_CatalogCode_SalesForce_InvokeURL_SalesForce_Update_DEV] 
-
-
-AS
-BEGIN
-Declare @Object as Int;
-Declare @ResponseText as Varchar(8000);
-
-
-Exec sp_OACreate 'MSXML2.XMLHTTP', @Object OUT;
-Exec sp_OAMethod @Object, 'open', NULL, 'get',
-                 'http://ci-data-dev.aflglobal.com/PRE_SF_Products', --Your Web Service Url (invoked)
-                 'false'
-Exec sp_OAMethod @Object, 'send'
-Exec sp_OAMethod @Object, 'responseText', @ResponseText OUTPUT
-
-Select @ResponseText
-
-Exec sp_OADestroy @Object
-
-
-END
-GO
diff --git a/Stored Procedures/dbo.usp_CatalogCode_SalesForce_NonArmored_Costing.sql b/Stored Procedures/dbo.usp_CatalogCode_SalesForce_NonArmored_Costing.sql
deleted file mode 100644
index 1df9147..0000000
--- a/Stored Procedures/dbo.usp_CatalogCode_SalesForce_NonArmored_Costing.sql
+++ /dev/null
@@ -1,26 +0,0 @@
-SET QUOTED_IDENTIFIER ON
-GO
-SET ANSI_NULLS ON
-GO
--- =============================================
--- Author:		Bryan Eddy
--- ALTER date: 10/19/2016
--- Description:	Costing Update for Sales Force Catalogs
--- =============================================
-CREATE PROCEDURE [dbo].[usp_CatalogCode_SalesForce_NonArmored_Costing]
-AS
-BEGIN
-
-
--- Updates Base item's material cost (minus the fiber)
-
-UPDATE dbo.tblSalesForce_Catalog
-SET BaseCost = BaseSkeletalCost, OracleItem = AssemblyItemNumber, LoadedBaseCost = x.LoadedBaseCost
-FROM dbo.tblBase_Skeletal_Cost X INNER JOIN dbo.tblSalesForce_Catalog G ON G.SetupID = X.SetupID
-
-
-
-END
-
-
-GO
diff --git a/Stored Procedures/dbo.usp_CatalogCode_SalesForce_NonArmored_Costing_InsertNewBase.sql b/Stored Procedures/dbo.usp_CatalogCode_SalesForce_NonArmored_Costing_InsertNewBase.sql
deleted file mode 100644
index 7477c49..0000000
--- a/Stored Procedures/dbo.usp_CatalogCode_SalesForce_NonArmored_Costing_InsertNewBase.sql
+++ /dev/null
@@ -1,80 +0,0 @@
-SET QUOTED_IDENTIFIER ON
-GO
-SET ANSI_NULLS ON
-GO
-
--- =============================================
--- Author:		Bryan Eddy
--- ALTER date: 12/2/2016
--- Description:	Insert new base costs into tblBase_Skeletal_Cost
--- Version:		1 
--- Update:		refactored into a merge statement
---				added error handling
--- =============================================
-CREATE PROCEDURE [dbo].[usp_CatalogCode_SalesForce_NonArmored_Costing_InsertNewBase]
-AS
-
-BEGIN
-
-SET NOCOUNT ON;
-
-DECLARE @ErrorNumber INT = ERROR_NUMBER();
-DECLARE @ErrorLine INT = ERROR_LINE();
-	BEGIN TRY
-		BEGIN tran
-
-			INSERT INTO  dbo.tblBase_Skeletal_Cost( Base, BaseSkeletalCost, AssemblyItemNumber, LoadedBaseCost, SetupID)
-
-			SELECT Base, SUM(MaterialCost) AS BaseSkeletalCost, AssemblyItemNumber, SUM(MaterialCost) AS LoadedBaseCost, SetupID
-
-			FROM
-			(
-				SELECT d.AssemblyItemNumber,e.ComponentItemNumber,SUM(e.ExtendedQuantityPer*S.Material_Cost) AS MaterialCost,e.[PrimaryUOM],s.Make_Buy , SUM(e.UnitCost) AS UnitCost,  d.base, D.SetupID
-				FROM  [dbo].vOracleBaseItems AS d CROSS APPLY [dbo].[fn_ExplodeBOM](D.AssemblyItemNumber) AS e 
-				INNER JOIN [dbo].[AFLPRD_INVSysItemCost_CAB] AS S ON e.ComponentItemNumber = s.ItemNumber LEFT JOIN dbo.tblBase_Skeletal_Cost G ON G.SetupID = D.SetupID
-				GROUP BY  e.ComponentItemNumber,d.AssemblyItemNumber,e.[PrimaryUOM],s.Make_Buy , e.UnitCost, d.base, D.SetupID,G.SetupID
-				HAVING s.Make_Buy = 'buy' AND NOT (e.ComponentItemNumber LIKE 'fbr%' OR e.ComponentItemNumber LIKE 'rbn%' OR e.ComponentItemNumber LIKE 'swr%' OR e.ComponentItemNumber LIKE 'frc%') 
-				--AND d.Base = 'GQ072-2.0A' 
-						AND G.SetupID IS NULL
-						--(e.ComponentItemNumber  like 'rbn%' AND e.ComponentItemNumber  like '%osp%' and e.ComponentItemNumber  like '%rbn%f%')))
-						--OR  (e.ComponentItemNumber like 'swr%' AND e.ComponentItemNumber  LIKE  '%osp%'))
-				--having s.make_buy = 'buy' and base = 'GQ048-3.0-SW'
-			)X 
-			GROUP BY X.BASE, x.AssemblyItemNumber, X.SetupID 
-
-		COMMIT TRAN
-	END TRY
-	BEGIN CATCH
-		IF @@TRANCOUNT > 0
-		ROLLBACK TRANSACTION;
- 
-		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
-		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
- 
-		THROW;
-	END CATCH;
-
-	BEGIN TRY
-		BEGIN tran
-
-			UPDATE dbo.tblBase_Skeletal_Cost
-			SET LoadedBaseCost = g.Resource_Cost + g.Overhead_Cost + BaseSkeletalCost
-			FROM dbo.tblBase_Skeletal_Cost X INNER JOIN  dbo.AFLPRD_INVSysItemCost_CAB G ON G.ItemNumber = X.AssemblyItemNumber
-
-		COMMIT TRAN
-	END TRY
-	BEGIN CATCH
-		IF @@TRANCOUNT > 0
-		ROLLBACK TRANSACTION;
- 
-		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
-		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
- 
-		THROW;
-	END CATCH;
-
-
-END
-
-
-GO
diff --git a/Stored Procedures/dbo.usp_CatalogCode_SalesForce_PricingUpdate.sql b/Stored Procedures/dbo.usp_CatalogCode_SalesForce_PricingUpdate.sql
deleted file mode 100644
index 72a3a30..0000000
--- a/Stored Procedures/dbo.usp_CatalogCode_SalesForce_PricingUpdate.sql
+++ /dev/null
@@ -1,159 +0,0 @@
-SET QUOTED_IDENTIFIER ON
-GO
-SET ANSI_NULLS ON
-GO
--- =============================================
--- Author:		Bryan Eddy
--- ALTER date: 12/1/2016
--- Description:	Pricing Update for Sales Force Catalogs
--- =============================================
-
-CREATE PROCEDURE [dbo].[usp_CatalogCode_SalesForce_PricingUpdate]
-
-AS
--- Update the cost of all cables
-BEGIN
-
-
---******************************
---Pricing for all typical cables.
---********************************
-UPDATE tblSalesForce_Catalog
-SET Price =								(CASE 
-												WHEN A.Contribution <> 0 THEN ROUND((K.LoadedBaseCost + K.FiberCount * E.CPQ_Fiber_Cost + A.Contribution) / (1 - T.Multiplier), 3)
-												ELSE ROUND((K.BaseCost + K.FiberCount * E.CPQ_Fiber_Cost + A.Contribution) / (1 - T.Multiplier), 3) 
-										END ),
-	--Price = ROUND((K.LoadedBaseCost + K.FiberCount * E.CPQ_Fiber_Cost + A.Contribution) / (1 - T.Multiplier), 3),
-Loaded_Base_Cost_Fiber_Included__c =    ROUND((K.LoadedBaseCost + K.FiberCount * E.CPQ_Fiber_Cost),3)
-FROM            tblSalesForce_Pricing AS A INNER JOIN
-                         tblDesignTypes AS G ON A.Product_Category = G.Product_Pricing_Group INNER JOIN
-                         tblSalesForce_Pricing_Multiplier AS T ON A.Product_Category = T.Product_Category INNER JOIN
-                         tblSalesForce_Catalog AS K ON T.FiberID = K.FiberID INNER JOIN
-                         tblDesignCodeFiberElementValue AS E ON E.FiberID = K.FiberID INNER JOIN
-                         tblCableConstructionReferences AS CR ON CR.Base = K.Base AND G.DesignTypeID = CR.DesignTypeID
-WHERE        CR.TBType <> 'furcation' OR CablePasses = 2
-
-
---******************************
---Pricing for furcation cables
---********************************
-
-UPDATE       tblSalesForce_Catalog
-SET    
---SELECT            catalogcode,k.base,k.BaseCost,k.loadedbasecost, e.item_cost,t.Multiplier,a.Contribution,P.FiberCount,
-				Price = (CASE WHEN A.Contribution <> 0 THEN ROUND((K.LoadedBaseCost + P.FiberCount * E.Item_Cost + A.Contribution) / (1 - T .Multiplier), 3) 
-                         ELSE ROUND((K.BaseCost + P.FiberCount * E.Item_Cost + A.Contribution) / (1 - T .Multiplier), 3) END)
-FROM            tblSalesForce_Pricing AS A INNER JOIN
-                         tblDesignTypes AS G ON A.Product_Category = G.Product_Pricing_Group INNER JOIN
-                         tblSalesForce_Pricing_Multiplier AS T ON A.Product_Category = T.Product_Category INNER JOIN
-                         tblSalesForce_Catalog k ON T.FiberID = k.FiberID INNER JOIN
-                         tblDesignCodeFurcationTube AS B ON B.FurcationTube = k.FurcationTube INNER JOIN
-                         AFLPRD_INVSysItemCost_CAB AS E ON E.ItemNumber = B.Furcation INNER JOIN
-                         tblCableConstructionReferences P ON k.Base = P.Base AND 
-                         G.DesignTypeID = P.DesignTypeID
-WHERE        (k.TBType = 'furcation') AND (k.CablePasses = 1)
---ORDER BY price
-
-
---******************************
---Pricing for boxed cables
---********************************
-
-
--- Update the cost of boxed cables
-UPDATE tblSalesForce_Catalog
-SET	Price = (Price * BoxedLength_FT /3.281) + 45
-FROM tblSalesForce_Catalog
-WHERE boxed = 1
-
-
-
---******************************
---Pricing for ribbon cables
---********************************
-
-
-
--- Update the cost of Ribbon cables
-UPDATE tblSalesForce_Catalog
-SET 
-	Price =								
-										 (CASE 
-												WHEN A.Contribution <> 0 THEN ROUND((K.LoadedBaseCost + K.FiberCount * E.CPQ_Fiber_Cost + A.Contribution + K.FiberCount*(.207 / 12) ) / (1 - T.Multiplier), 3)
-												ELSE ROUND((K.BaseCost + K.FiberCount * E.CPQ_Fiber_Cost + A.Contribution + K.FiberCount*(.207 / 12)*1.02) / (1 - T.Multiplier), 3) 
-										END ),
-	--Price =ROUND((K.LoadedBaseCost + K.FiberCount * E.CPQ_Fiber_Cost + A.Contribution + (.207 / 12) ) / (1 - T.Multiplier), 3),
-	Loaded_Base_Cost_Fiber_Included__c =    ROUND((K.LoadedBaseCost + K.FiberCount * E.CPQ_Fiber_Cost +  K.FiberCount*(.207 / 12)*1.02),3)
-FROM            tblSalesForce_Pricing AS A INNER JOIN
-                         tblDesignTypes AS G ON A.Product_Category = G.Product_Pricing_Group INNER JOIN
-                         tblSalesForce_Pricing_Multiplier AS T ON A.Product_Category = T.Product_Category INNER JOIN
-                         tblSalesForce_Catalog AS K ON T.FiberID = K.FiberID INNER JOIN
-                         tblDesignCodeFiberElementValue AS E ON E.FiberID = K.FiberID INNER JOIN
-                         tblCableConstructionReferences AS CR ON CR.Base = K.Base AND G.DesignTypeID = CR.DesignTypeID
-WHERE cr.TBType = 'Ribbon' 
-
-
-
---******************************
---Pricing for SWR Cables
---********************************
-
-UPDATE tblSalesForce_Catalog
-SET 
-	Price =				
-										(CASE 
-												WHEN A.Contribution <> 0 THEN ROUND((K.LoadedBaseCost + K.FiberCount * E.CPQ_Fiber_Cost + A.Contribution +  K.FiberCount*(.10800 / 12) ) / (1 - T.Multiplier), 3)
-												ELSE ROUND((K.BaseCost + K.FiberCount * E.CPQ_Fiber_Cost + A.Contribution + K.FiberCount*(.10800 / 12)) / (1 - T.Multiplier), 3) 
-										END ),
-	--Price = ROUND((K.LoadedBaseCost + K.FiberCount * E.CPQ_Fiber_Cost + A.Contribution + (.10800 / 12) ) / (1 - T.Multiplier), 3),
-	Loaded_Base_Cost_Fiber_Included__c =    ROUND((K.LoadedBaseCost + K.FiberCount * E.CPQ_Fiber_Cost + K.FiberCount *(.10800 / 12)),3)
-FROM            tblSalesForce_Pricing AS A INNER JOIN
-                         tblDesignTypes AS G ON A.Product_Category = G.Product_Pricing_Group INNER JOIN
-                         tblSalesForce_Pricing_Multiplier AS T ON A.Product_Category = T.Product_Category INNER JOIN
-                         tblSalesForce_Catalog AS K ON T.FiberID = K.FiberID INNER JOIN
-                         tblDesignCodeFiberElementValue AS E ON E.FiberID = K.FiberID INNER JOIN
-                         tblCableConstructionReferences AS CR ON CR.Base = K.Base AND G.DesignTypeID = CR.DesignTypeID
-WHERE TBLetter IN( 'r', 's' )
-
-
-
-
---UPDATE tblSalesForce_Catalog
---SET Price =						   (CASE 
---										WHEN tbtype ='furcation' and cablepasses = 1 THEN	ROUND((K.LoadedBaseCost + K.FiberCount * E.Item_Cost + A.Contribution) / (1 - T.Multiplier), 3)
---										WHEN TBLetter = 'r' or TBLetter = 's' THEN ROUND((K.LoadedBaseCost + K.FiberCount * D.CPQ_Fiber_Cost + (0.10800 / 12) + A.Contribution) / (1 - T.Multiplier), 3)
---										WHEN  TBType = 'Ribbon' THEN ROUND((K.LoadedBaseCost + K.FiberCount * D.CPQ_Fiber_Cost + (.207 / 12) + A.Contribution) / (1 - T.Multiplier), 3)
---										ELSE ROUND((K.LoadedBaseCost + K.FiberCount * D.CPQ_Fiber_Cost + A.Contribution) / (1 - T.Multiplier), 3)
---									END )
---FROM            tblSalesForce_Catalog AS K INNER JOIN
---                         tblDesignTypes AS G ON G.SalesForceDescription = K.DesignTypeDesc INNER JOIN
---                         tblSalesForce_Pricing AS A ON A.Product_Category = G.Product_Pricing_Group INNER JOIN
---                         tblSalesForce_Pricing_Multiplier AS T ON A.Product_Category = T.Product_Category AND K.FiberID = T.FiberID LEFT JOIN
---						 tblDesignCodeFurcationTube B ON B.FurcationTube = k.FurcationTube LEFT JOIN
---                         dbo.AFLPRD_INVSysItemCost_CAB E ON E.ItemNumber = b.furcation INNER JOIN
---						 tblDesignCodeFiberElementValue AS D ON D.FiberID = K.FiberID
-
---******************************
---Pricing for armored cables
---********************************
-
-UPDATE tblSalesForce_Catalog
-SET Price =	Price + G.ArmorCostAdder, LoadedBaseCost = LoadedBaseCost + ArmorLoadedCost, BaseCost = AmorMaterialCost + BaseCost
-FROM            tblSalesForce_Catalog AS K INNER JOIN ArmorConstructionBase_TEMP G ON K.Base = G.Base
-WHERE armored = 1
-			
-
---******************************
---Pricing for mixed fiber cables
---********************************
-
-UPDATE dbo.tblSalesForce_Catalog 
-SET Loaded_Base_Cost_Fiber_Included__c   = NULL
-WHERE Fiber_Type_Config__c like '%mixed%'
-
-
-end
-
-
-
-GO
diff --git a/Stored Procedures/dbo.usp_CatalogCode_SalesForce_RemoveDuplicates.sql b/Stored Procedures/dbo.usp_CatalogCode_SalesForce_RemoveDuplicates.sql
deleted file mode 100644
index b2f4c62..0000000
--- a/Stored Procedures/dbo.usp_CatalogCode_SalesForce_RemoveDuplicates.sql
+++ /dev/null
@@ -1,25 +0,0 @@
-SET QUOTED_IDENTIFIER ON
-GO
-SET ANSI_NULLS ON
-GO
--- =============================================
--- Author:      Bryan Eddy
--- Create date: 7/20/2017
--- Description: Delete duplicate records to prevent the Quoting item creation procedure from erroring out.
--- =============================================
-
-CREATE PROCEDURE [dbo].[usp_CatalogCode_SalesForce_RemoveDuplicates]
-as
-
-
-WITH cte AS (
-	SELECT *, ROW_NUMBER() OVER (PARTITION BY CatalogCode ORDER BY CatalogCode,Base Desc ) AS RowNumber
-	FROM 
-	(
-		SELECT CatalogCode, F.Base,COUNT(F.CatalogCode) OVER (PARTITION BY CatalogCode) Countof--, MAX(G.DateCreated) OVER (PARTITION BY CatalogCode) MaxDateCreated_Construction, G.DateCreated--, MAX(F.DateCreated) OVER (PARTITION BY CatalogCode) MaxDateCreated_Item, f.DateCreated DateCreated_Item
-		FROM tblSalesForce_Catalog F --INNER JOIN tblCableConstructionReferences G ON G.Base = F.Base
-	)X 
-	WHERE Countof > 1
-)
-DELETE cte WHERE RowNumber > 1
-GO
diff --git a/Stored Procedures/dbo.usp_CatalogCode_SalesForce_Special_Subunit.sql b/Stored Procedures/dbo.usp_CatalogCode_SalesForce_Special_Subunit.sql
deleted file mode 100644
index 91f2e67..0000000
--- a/Stored Procedures/dbo.usp_CatalogCode_SalesForce_Special_Subunit.sql
+++ /dev/null
@@ -1,42 +0,0 @@
-SET QUOTED_IDENTIFIER ON
-GO
-SET ANSI_NULLS ON
-GO
--- Author:		Bryan Eddy
--- ALTER date: 10/5/2016
--- Description:	Generate the catalog code and attributes for Sales Force Quoting - Update certain items with the special subunit coloring indicator
--- =============================================
-CREATE PROCEDURE [dbo].[usp_CatalogCode_SalesForce_Special_Subunit] 
-AS
-BEGIN
-
---UPDATE tblSalesForce_Catalog
---SET Non_Standard = 1 
---FROM tblSalesForce_Catalog
---WHERE ProdLevel3 = 'Tactical' and tbtype = 'microtactical'
-
-
-
-INSERT INTO tblSalesForce_Catalog
-                         (CatalogCode, Base, Weight_kg_per_m, 
-                         K.DesignTypeDesc, Jacket, TBType, TBDescription, NominalOD, NumSubFillers, NumSubPositions,FinishedCableColor,TBLetter,
-						 CablePasses,FiberCount,UnitOD, BaseID,K.DesignTypeId, Armored,Boxed, Print_Type__c, Min_Order_Quantity__c, Fiber_Type__c,FiberID,SetupID
-						 ,Non_Standard,Active,ProdLevel3)
-
-SELECT LEFT(CatalogCode,10) + Special_Subunit_Indicator + SUBSTRING(CatalogCode,12,LEN(CatalogCode)-11), Base, Weight_kg_per_m, 
-                         K.DesignTypeDesc, Jacket, TBType, TBDescription, NominalOD, NumSubFillers, NumSubPositions,FinishedCableColor,TBLetter,
-						 CablePasses,FiberCount,UnitOD, BaseID,K.DesignTypeId, Armored,Boxed,Print_Type__c,k.Min_Order_Quantity__c,Fiber_Type__c,FiberID,SetupID
-						 ,1,k.Active,ProdLevel3
-FROM [dbo].[tblDesignSpecialSubunitColor] CROSS JOIN dbo.tblDesignTypes A  INNER JOIN dbo.tblSalesForce_Catalog K ON A.DesignTypeID = K.DesignTypeID
-WHERE Special_Subunit_Color_X = 1 and CablePasses = 2
-
-
---UPDATE tblSalesForce_Catalog
---SET Non_Standard = 0
---FROM tblSalesForce_Catalog
---WHERE ProdLevel3 = 'Tactical' and tbtype = 'microtactical' AND substring(catalogcode,11,1) = 'x'
-
-
-END
-
-GO
diff --git a/Stored Procedures/dbo.usp_CatalogCode_SalesForce_UpdateStage.sql b/Stored Procedures/dbo.usp_CatalogCode_SalesForce_UpdateStage.sql
deleted file mode 100644
index 5f9ce16..0000000
--- a/Stored Procedures/dbo.usp_CatalogCode_SalesForce_UpdateStage.sql
+++ /dev/null
@@ -1,26 +0,0 @@
-SET QUOTED_IDENTIFIER ON
-GO
-SET ANSI_NULLS ON
-GO
-/****** Script for SelectTopNRows command from SSMS  ******/
-
-CREATE PROCEDURE [dbo].[usp_CatalogCode_SalesForce_UpdateStage]
-as
-DELETE 
-FROM tblSalesForce_Catalog_Stage
-
-INSERT INTO tblSalesForce_Catalog_Stage
-                         (CatalogCode, Base, Weight_kg_per_m, DesignTypeDesc, Jacket, TBType, TBDescription, NominalOD, NumSubFillers, NumSubPositions, CablePasses, BaseID, 
-                         BaseCost, FiberCount, UnitOD, OracleItem, COLOR__c, LoadedBaseCost, Armored, Boxed, BoxedLength_FT, DesignTypeID, DateCreated, Fiber_Type__c, 
-                         Armor_Type__c, Packaging__c, UOM__c, Stock__c, Lead_Time_ID__c, ImageURL__c, Product_Spec_Link__c, Min_Order_Quantity__c, Print_Type__c, 
-                         Product_Quote_Description__c, ArmorJacket, FiberID, TBLetter, FinishedCableColor, FurcationTube, SetupID,Non_Standard, Active, Price, ProdLevel1, ProdLevel2, ProdLevel3, ID)
-SELECT        CatalogCode, Base, Weight_kg_per_m, DesignTypeDesc, Jacket, TBType, TBDescription, NominalOD, NumSubFillers, NumSubPositions, CablePasses, BaseID, 
-                         BaseCost, FiberCount, UnitOD, OracleItem, COLOR__c, LoadedBaseCost, Armored, Boxed, BoxedLength_FT, DesignTypeID, DateCreated, Fiber_Type__c, 
-                         Armor_Type__c, Packaging__c, UOM__c, Stock__c, Lead_Time_ID__c, ImageURL__c, Product_Spec_Link__c, Min_Order_Quantity__c, Print_Type__c, 
-                         Product_Quote_Description__c, ArmorJacket, FiberID, TBLetter, FinishedCableColor, FurcationTube, SetupID, Non_Standard, Active, Price, ProdLevel1, ProdLevel2, 
-                         ProdLevel3, ID
-FROM            tblSalesForce_Catalog
-
-
-
-GO
diff --git a/Stored Procedures/dbo.usp_EmailSetupStdOpMismatch.sql b/Stored Procedures/dbo.usp_EmailSetupStdOpMismatch.sql
index 8a083af..e194a0e 100644
--- a/Stored Procedures/dbo.usp_EmailSetupStdOpMismatch.sql
+++ b/Stored Procedures/dbo.usp_EmailSetupStdOpMismatch.sql
@@ -3,12 +3,14 @@
 SET ANSI_NULLS ON
 GO
 
+
 -- =============================================
 -- Author:		Bryan Eddy
 -- ALTER date: 10/31/2017
--- automated email to notify product engineering of open orders with Standard Ops
--- that do not match the Premise Configurator program's Standard Op.
-
+--Desc:					automated email to notify product engineering of open orders with Standard Ops
+--						that do not match the Premise Configurator program's Standard Op.
+-- Version:		2
+-- Update:		added logic to explode the BOM and look at all components for mismatch setups
 -- =============================================
 CREATE PROCEDURE [dbo].[usp_EmailSetupStdOpMismatch]
 
@@ -27,6 +29,11 @@
 --Check if any open item requests need commercial approval
 IF OBJECT_ID(N'tempdb..#Results', N'U') IS NOT NULL
 DROP TABLE #Results;
+WITH cteOpenOrderItems
+AS(
+	SELECT DISTINCT K.AssemblyItemNumber, E.[Sales Order]
+	FROM dbo.AFLPRD_ORDDTLREPT_UPLOAD_CAB E CROSS APPLY dbo.fn_ExplodeBOM([Item Number]) K
+	)
 SELECT [ItemRouting]
 	  ,[DateCreated]
       ,[StdOpBOM]
@@ -36,10 +43,9 @@
 	  ,g.[Sales Order]
 	INTO	#Results
   FROM [Premise].[Setup].[vSetupStandardOperationMismatch] K INNER JOIN
-  dbo.AFLPRD_ORDDTLREPT_UPLOAD_CAB G ON G.[Item Number] = K.ItemRouting
-  --WHERE StdOpBOM <> 'R204' AND StdOpConfigurator <> 'R446'
+   cteOpenOrderItems G ON g.AssemblyItemNumber = K.ItemRouting
   ORDER BY DateCreated DESC, StdOpBOM
-SELECT * FROM #Results
+
 
 SELECT @numRows = count(*) FROM #Results
 
diff --git a/Stored Procedures/dbo.usp_MTY_ObsoleteComponentNotification.sql b/Stored Procedures/dbo.usp_MTY_ObsoleteComponentNotification.sql
index 931c5a6..8677cdd 100644
--- a/Stored Procedures/dbo.usp_MTY_ObsoleteComponentNotification.sql
+++ b/Stored Procedures/dbo.usp_MTY_ObsoleteComponentNotification.sql
@@ -2,6 +2,7 @@
 GO
 SET ANSI_NULLS ON
 GO
+
 -- =============================================
 -- Author:		Bryan Eddy
 -- ALTER date: 2/15/2017
@@ -40,22 +41,22 @@
 LEFT JOIN cteInventory i ON i.Item = G.ItemNumber
 WHERE Item_Status <>'active' and AssemblyItemStatus = 'active' AND NewItem IS NULL
 
-SELECT @numRows = count(*) FROM #Results
+SELECT @numRows = COUNT(*) FROM #Results
 
 
+SET @ReceipientList = (STUFF((SELECT ';' + UserEmail 
+						FROM tblConfiguratorUser G  INNER JOIN users.UserResponsibility  K ON  G.UserID = K.UserID
+  						WHERE K.ResponsibilityID = 20 FOR XML PATH('')),1,1,''))
 
---SET @ReceipientList = (STUFF((SELECT ';' + UserEmail FROM tblConfiguratorUser WHERE ItemBuilder <> 0 FOR XML PATH('')),1,1,''))
-SET @Receipientlist = 'AFLMTYInactiveComponentAlertDL@aflglobal.com'
-
-declare @body1 varchar(max)
-declare @subject varchar(max)
-declare @query varchar(max) = N'SELECT * FROM tempdb..#Results;'
-set @subject = 'MTY ALERT - Inactive Components in BOM ' + CAST(GETDATE() AS NVARCHAR)
-set @body1 = 'There are  ' + CAST(@numRows AS NVARCHAR) + ' inactive components in MTY BOMs.  Please review.' +char(13)+CHAR(13)
+DECLARE @body1 VARCHAR(MAX)
+DECLARE @subject VARCHAR(MAX)
+DECLARE @query VARCHAR(MAX) = N'SELECT * FROM tempdb..#Results;'
+SET @subject = 'MTY ALERT - Inactive Components in BOM ' + CAST(GETDATE() AS NVARCHAR)
+SET @body1 = 'There are  ' + CAST(@numRows AS NVARCHAR) + ' inactive components in MTY BOMs.  Please review.' +CHAR(13)+CHAR(13)
 
 DECLARE @tableHTML  NVARCHAR(MAX) ;
-if @numRows > 0
-begin
+IF @numRows > 0
+BEGIN
 	
 			SET @tableHTML =
 				N'<H1>MTY Inactive BOM Components</H1>' +
@@ -88,6 +89,6 @@
 			@subject = @subject,
 			@body = @tableHTML,
 			@body_format = 'HTML';
-end
+END
 
 GO
diff --git a/Stored Procedures/dbo.usp_Order_History_Update_Premise_Cable_Shipments.sql b/Stored Procedures/dbo.usp_Order_History_Update_Premise_Cable_Shipments.sql
index 608b2c3..c3a857e 100644
--- a/Stored Procedures/dbo.usp_Order_History_Update_Premise_Cable_Shipments.sql
+++ b/Stored Procedures/dbo.usp_Order_History_Update_Premise_Cable_Shipments.sql
@@ -8,8 +8,8 @@
 Author:			Bryan Eddy
 Date:			1/12/2017
 Desc:			Update the Sales History table for reporting ( Oracle.MarginRevenueExtractSalesHistory)
-Version:		3
-Update:			Added query to remove duplicates
+Version:		4
+Update:			Added another query to remove duplicates
 */
 
 CREATE PROCEDURE [dbo].[usp_Order_History_Update_Premise_Cable_Shipments]
@@ -256,6 +256,18 @@
 FROM cteUnique K INNER JOIN ORACLE.[MarginRevenueExtractSalesHistory]  I ON I.SalesID = K.SalesID
 WHERE K.RowNumber > 1--item_number = 'DNO-9246' AND cteUnique.ORDER_NUMBER ='1958265' AND cteUnique.SO_LINE_NUMBER = 1
 
+--Remove more duplicates.  Find SO's and SO Lines that are Rev and CAB and delete the REV transaction type
+BEGIN TRAN
+;WITH cteDuplicates
+AS(
+	SELECT R.SalesID
+	FROM oracle.MarginRevenueExtractSalesHistory  R INNER JOIN  oracle.MarginRevenueExtractSalesHistory O ON O.ORDER_NUMBER = R.ORDER_NUMBER AND O.SO_LINE_NUMBER = R.SO_LINE_NUMBER
+	WHERE R.SCHEDULING_APPROVAL IS NULL AND R.ORG_CODE = 'cab' AND R.TRANSACTION_TYPE = 'rev' AND O.TRANSACTION_TYPE = 'ORD' AND O.ORG_CODE = 'CAB'
+)
+DELETE ORACLE.MarginRevenueExtractSalesHistory 
+FROM cteDuplicates E INNER JOIN ORACLE.MarginRevenueExtractSalesHistory K ON K.SalesID = E.SalesID
+COMMIT
+
 
 
 
diff --git a/Stored Procedures/dbo.usp_SalesHistoryUpdate_BI_DELETE.sql b/Stored Procedures/dbo.usp_SalesHistoryUpdate_BI_DELETE.sql
deleted file mode 100644
index 2118735..0000000
--- a/Stored Procedures/dbo.usp_SalesHistoryUpdate_BI_DELETE.sql
+++ /dev/null
@@ -1,115 +0,0 @@
-SET QUOTED_IDENTIFIER ON
-GO
-SET ANSI_NULLS ON
-GO
-/*	Author:		Bryan Eddy
-	Date:		12/11/2017
-	Desc:		Procedure to update the Sales History being
-	Rev:		2
-	Update:		Updated to MERGE statement and added error handling
-	
-	 */
-
-CREATE PROCEDURE [dbo].[usp_SalesHistoryUpdate_BI_DELETE]
-as
-
-
---delete SalesHistory_BI_Data 
---FROM             sales_pivot_bi AS K INNER JOIN
---                         SalesHistory_BI_Data AS B ON K.SO_NUMBER = B.SO_NUMBER AND B.SO_LINE = K.SO_LINE 
---						 --AND COALESCE (K.SHIP_TO_POSTAL_CODE, '') = B.SHIP_TO_POSTAL_CODE AND B.SHIP_TO_STATE = COALESCE (K.SHIP_TO_STATE, '') 
---						 AND B.SHIP_TO_COUNTRY =  K.SHIP_TO_COUNTRY
-
-
-SET NOCOUNT ON;
-
-DECLARE @ErrorNumber INT = ERROR_NUMBER();
-DECLARE @ErrorLine INT = ERROR_LINE();
-	BEGIN TRY
-		BEGIN tran
-			;WITH cteSalesHistory
-			AS(
-			SELECT         K.BU, K.ORG, K.CALENDAR_QUARTER, K.FISCAL_QUARTER, K.Month, CAST(LEFT(K.[DATE],10) AS DATETIME) Date, K.CUSTOMER_CLUSTER, K.CUSTOMER, K.AGENT, K.CUSTOMER_CLASS, 
-								 K.CUSTOMER_CATEGORY, K.TERRITORY_MARKET, K.MARKET, K.CLUSTER_ACCOUNT, COALESCE (K.SHIP_TO_STATE, '') AS SHIP_TO_STATE, 
-								 COALESCE (K.SHIP_TO_COUNTRY, '') AS SHIP_TO_COUNTRY, COALESCE (K.SHIP_TO_POSTAL_CODE, '') AS SHIP_TO_POSTAL_CODE, K.ITEM_NUMBER, K.ITEM_DESCRIPTION, SUM(K.REVENUE)
-								 AS REVENUE, SUM(K.QUANTITY) AS QUANTITY, K.UOM, K.PO, K.SO_NUMBER, K.SO_LINE, K.CSR, K.PRODUCT_CATEGORY--, B.ITEM_NUMBER
-			--INTO #SalesHistory
-			FROM            sales_pivot_bi AS K 
-			GROUP BY K.BU, K.ORG, K.CALENDAR_QUARTER, K.FISCAL_QUARTER, K.Month, K.DATE, K.CUSTOMER_CLUSTER, K.CUSTOMER, K.AGENT, K.CUSTOMER_CLASS, 
-									 K.CUSTOMER_CATEGORY, K.TERRITORY_MARKET, K.MARKET, K.CLUSTER_ACCOUNT, K.SHIP_TO_STATE, K.SHIP_TO_COUNTRY, K.SHIP_TO_POSTAL_CODE, 
-									 K.ITEM_NUMBER, K.ITEM_DESCRIPTION, K.UOM, K.PO, K.SO_NUMBER, K.SO_LINE, K.CSR, K.PRODUCT_CATEGORY, K.ORG
-			HAVING       (K.ORG = 'cab') AND (K.SO_LINE IS NOT NULL)
-			)
-			MERGE SalesHistory_BI_Data AS Target
-			USING cteSalesHistory AS Source
-			ON ( Target.SO_NUMBER = Source.SO_NUMBER AND Source.SO_LINE = Target.SO_LINE 
-				AND COALESCE (Target.SHIP_TO_POSTAL_CODE, '') = Source.SHIP_TO_POSTAL_CODE AND Source.SHIP_TO_STATE = COALESCE (Target.SHIP_TO_STATE, '') 
-				AND Source.SHIP_TO_COUNTRY =  Target.SHIP_TO_COUNTRY AND Source.SO_NUMBER = Target.SO_NUMBER AND TARGET.SO_LINE = SOURCE.SO_LINE
-				AND Target.DATE = SOURCE.DATE AND TARGET.AGENT = Source.AGENT)
-			WHEN NOT MATCHED BY TARGET THEN
-				INSERT (BU, ORG, CALENDAR_QUARTER, FISCAL_QUARTER, Month, DATE, CUSTOMER_CLUSTER, CUSTOMER, AGENT, CUSTOMER_CLASS, CUSTOMER_CATEGORY, 
-								 TERRITORY_MARKET, MARKET, CLUSTER_ACCOUNT, SHIP_TO_STATE, SHIP_TO_COUNTRY, SHIP_TO_POSTAL_CODE, ITEM_NUMBER, ITEM_DESCRIPTION, 
-								 REVENUE, QUANTITY, UOM, PO, SO_NUMBER, SO_LINE, CSR, PRODUCT_CATEGORY)
-				VALUES (BU, ORG, CALENDAR_QUARTER, FISCAL_QUARTER, Month, DATE, CUSTOMER_CLUSTER, CUSTOMER, AGENT, CUSTOMER_CLASS, CUSTOMER_CATEGORY
-								, TERRITORY_MARKET, MARKET, CLUSTER_ACCOUNT, SHIP_TO_STATE ,SHIP_TO_COUNTRY, SHIP_TO_POSTAL_CODE, ITEM_NUMBER, ITEM_DESCRIPTION,
-								 REVENUE, QUANTITY, UOM, PO, SO_NUMBER, SO_LINE, CSR, PRODUCT_CATEGORY)
-			WHEN MATCHED THEN
-			UPDATE SET target.BU = Source.BU, 
-						Target.ORG  = Source.ORG ,
-						Target.CALENDAR_QUARTER  = Source.CALENDAR_QUARTER ,
-						Target.FISCAL_QUARTER  = Source.FISCAL_QUARTER ,
-						Target.Month  = Source.Month ,
-						Target.DATE  = Source.DATE ,
-						Target.CUSTOMER_CLUSTER  = Source.CUSTOMER_CLUSTER ,
-						Target.CUSTOMER  = Source.CUSTOMER ,
-						Target.AGENT  = Source.AGENT ,
-						Target.CUSTOMER_CLASS  = Source.CUSTOMER_CLASS ,
-						Target.CUSTOMER_CATEGORY  = Source.CUSTOMER_CATEGORY ,
-						Target.TERRITORY_MARKET  = Source.TERRITORY_MARKET ,
-						Target.MARKET  = Source.MARKET ,
-						Target.CLUSTER_ACCOUNT  = Source.CLUSTER_ACCOUNT ,
-						Target.SHIP_TO_STATE  = Source.SHIP_TO_STATE ,
-						Target.SHIP_TO_COUNTRY  = Source.SHIP_TO_COUNTRY ,
-						Target.SHIP_TO_POSTAL_CODE  = Source.SHIP_TO_POSTAL_CODE ,
-						Target.ITEM_NUMBER  = Source.ITEM_NUMBER ,
-						Target.ITEM_DESCRIPTION  = Source.ITEM_DESCRIPTION ,
-						Target.REVENUE  = Source.REVENUE ,
-						Target.QUANTITY  = Source.QUANTITY ,
-						Target.UOM  = Source.UOM ,
-						Target.PO  = Source.PO ,
-						Target.SO_NUMBER  = Source.SO_NUMBER ,
-						Target.SO_LINE  = Source.SO_LINE ,
-						Target.CSR  = Source.CSR ,
-						Target.PRODUCT_CATEGORY = Source.PRODUCT_CATEGORY
-					;
-				
-		COMMIT TRAN
-	END TRY
-	BEGIN CATCH
-		IF @@TRANCOUNT > 0
-		ROLLBACK TRANSACTION;
- 
-		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
-		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
- 
-		THROW;
-	END CATCH;
-
---INSERT INTO SalesHistory_BI_Data
---                         (BU, ORG, CALENDAR_QUARTER, FISCAL_QUARTER, Month, DATE, CUSTOMER_CLUSTER, CUSTOMER, AGENT, CUSTOMER_CLASS, CUSTOMER_CATEGORY, 
---                         TERRITORY_MARKET, MARKET, CLUSTER_ACCOUNT, SHIP_TO_STATE, SHIP_TO_COUNTRY, SHIP_TO_POSTAL_CODE, ITEM_NUMBER, ITEM_DESCRIPTION, 
---                         REVENUE, QUANTITY, UOM, PO, SO_NUMBER, SO_LINE, CSR, PRODUCT_CATEGORY)
---SELECT        K.BU, K.ORG, K.CALENDAR_QUARTER, K.FISCAL_QUARTER, K.Month, CAST(LEFT(K.[DATE],10) AS DATETIME), K.CUSTOMER_CLUSTER, K.CUSTOMER, K.AGENT, K.CUSTOMER_CLASS, 
---                         K.CUSTOMER_CATEGORY, K.TERRITORY_MARKET, K.MARKET, K.CLUSTER_ACCOUNT, COALESCE (K.SHIP_TO_STATE, '') AS Expr1, 
---                         COALESCE (K.SHIP_TO_COUNTRY, '') AS Expr2, COALESCE (K.SHIP_TO_POSTAL_CODE, '') AS Expr3, K.ITEM_NUMBER, K.ITEM_DESCRIPTION, SUM(K.REVENUE) 
---                         AS REVENUE, SUM(K.QUANTITY) AS QUANTITY, K.UOM, K.PO, K.SO_NUMBER, K.SO_LINE, K.CSR, K.PRODUCT_CATEGORY--, B.ITEM_NUMBER
---FROM            sales_pivot_bi AS K LEFT OUTER JOIN
---                         SalesHistory_BI_Data AS B ON K.SO_NUMBER = B.SO_NUMBER AND B.SO_LINE = K.SO_LINE 
---						 AND COALESCE (K.SHIP_TO_POSTAL_CODE, '') = B.SHIP_TO_POSTAL_CODE AND B.SHIP_TO_STATE = COALESCE (K.SHIP_TO_STATE, '') 
---						 AND B.SHIP_TO_COUNTRY =  K.SHIP_TO_COUNTRY
---GROUP BY K.BU, K.ORG, K.CALENDAR_QUARTER, K.FISCAL_QUARTER, K.Month, K.DATE, K.CUSTOMER_CLUSTER, K.CUSTOMER, K.AGENT, K.CUSTOMER_CLASS, 
---                         K.CUSTOMER_CATEGORY, K.TERRITORY_MARKET, K.MARKET, K.CLUSTER_ACCOUNT, K.SHIP_TO_STATE, K.SHIP_TO_COUNTRY, K.SHIP_TO_POSTAL_CODE, 
---                         K.ITEM_NUMBER, K.ITEM_DESCRIPTION, K.UOM, K.PO, K.SO_NUMBER, K.SO_LINE, K.CSR, K.PRODUCT_CATEGORY, K.ORG, B.ITEM_NUMBER
---HAVING       (B.ITEM_NUMBER IS NULL) AND 
---(K.ORG = 'cab') AND (K.SO_LINE IS NOT NULL) --AND (K.SO_NUMBER =  2107871)
-GO
diff --git a/Stored Procedures/dbo.usp_Scheduling_Construction_CenterMember.sql b/Stored Procedures/dbo.usp_Scheduling_Construction_CenterMember.sql
index 5ff1a05..21c1fb7 100644
--- a/Stored Procedures/dbo.usp_Scheduling_Construction_CenterMember.sql
+++ b/Stored Procedures/dbo.usp_Scheduling_Construction_CenterMember.sql
@@ -7,7 +7,7 @@
 -- ALTER date: <1/27/2017>
 -- Description:	<Explodes all levels of BOM finds the UJCM>
 -- =============================================
-CREATE PROCEDURE [dbo].[usp_Scheduling_Construction_CenterMember](
+CREATE PROC [dbo].[usp_Scheduling_Construction_CenterMember](
 @Item varchar(50)
 )
 as
diff --git a/Tables/CutSheet.ImageGroup.sql b/Tables/CutSheet.ImageGroup.sql
index 20b9a22..f320ed6 100644
--- a/Tables/CutSheet.ImageGroup.sql
+++ b/Tables/CutSheet.ImageGroup.sql
@@ -11,8 +11,6 @@
 GO
 CREATE UNIQUE NONCLUSTERED INDEX [IX_ImageGroup] ON [CutSheet].[ImageGroup] ([ImageGroupName]) ON [PRIMARY]
 GO
-ALTER TABLE [CutSheet].[ImageGroup] ADD CONSTRAINT [FK_ImageGroup_ImageGroup] FOREIGN KEY ([ImageGroupID]) REFERENCES [CutSheet].[ImageGroup] ([ImageGroupID])
-GO
 GRANT DELETE ON  [CutSheet].[ImageGroup] TO [NAA\SPB Premise SQL RO]
 GO
 GRANT INSERT ON  [CutSheet].[ImageGroup] TO [NAA\SPB Premise SQL RO]
diff --git a/Tables/DiamondJet.JobPrint.sql b/Tables/DiamondJet.JobPrint.sql
new file mode 100644
index 0000000..e0752ab
--- /dev/null
+++ b/Tables/DiamondJet.JobPrint.sql
@@ -0,0 +1,88 @@
+CREATE TABLE [DiamondJet].[JobPrint]
+(
+[JobNumber] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
+[PrintString] [nvarchar] (1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[CreationDate] [datetime] NULL CONSTRAINT [DF_JobPrint_CreationDate] DEFAULT (getdate()),
+[RevisionDate] [datetime] NULL CONSTRAINT [DF_JobPrint_RevisionDate] DEFAULT (getdate()),
+[UniqueID] [uniqueidentifier] NULL CONSTRAINT [DF_JobPrint_UniqueID] DEFAULT (newid()),
+[ItemNumber] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[TemplateID] [int] NULL,
+[CreatedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF_JobPrint_CreatedBy] DEFAULT (suser_sname()),
+[RevisedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF_JobPrint_RevisedBy] DEFAULT (suser_sname()),
+[VerificationPrint] [nvarchar] (1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
+) ON [PRIMARY]
+GO
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+-- =============================================
+-- Author:		Bryan Eddy
+-- Create date: 5/1/2018
+-- Description:	Triger to update JobPrint table when the print string, job, or template has been updated
+-- =============================================
+CREATE TRIGGER [DiamondJet].[trgr_JobPrint] 
+   ON  [DiamondJet].[JobPrint]
+   AFTER INSERT, UPDATE
+AS 
+BEGIN
+	-- SET NOCOUNT ON added to prevent extra result sets from
+	-- interfering with SELECT statements.
+	SET NOCOUNT ON;
+	IF UPDATE(JobNumber) OR UPDATE(PrintString) OR UPDATE(TemplateID) OR UPDATE(VerificationPrint)
+		BEGIN
+			UPDATE J
+			SET RevisionDate = GETDATE(), J.RevisedBy = SUSER_SNAME()
+			FROM DiamondJet.JobPrint J INNER JOIN Inserted I ON J.UniqueID = I.UniqueID
+
+
+			
+
+			
+		END
+
+		DECLARE @INS int, @DEL int
+		SELECT @INS = COUNT(*) FROM INSERTED
+		SELECT @DEL = COUNT(*) FROM DELETED
+
+	IF @INS > 0 OR @DEL > 0 
+		BEGIN
+			INSERT INTO DiamondJet.JobPrint_Archive
+			(
+				JobNumber,
+				PrintString,
+				CreationDate,
+				RevisionDate,
+				UniqueID,
+				ItemNumber,
+				TemplateID,
+				CreatedBy,
+				RevisedBy,
+				VerificationPrint
+			)
+			SELECT DISTINCT JobNumber,
+				PrintString,
+				CreationDate,
+				RevisionDate,
+				UniqueID,
+				ItemNumber,
+				TemplateID,
+				CreatedBy,
+				RevisedBy,
+				VerificationPrint
+			FROM Deleted 
+		END
+		
+
+
+
+END
+GO
+ALTER TABLE [DiamondJet].[JobPrint] ADD CONSTRAINT [PK_JobPrint] PRIMARY KEY CLUSTERED  ([JobNumber]) ON [PRIMARY]
+GO
+ALTER TABLE [DiamondJet].[JobPrint] ADD CONSTRAINT [FK_JobPrint_Templates] FOREIGN KEY ([TemplateID]) REFERENCES [DiamondJet].[Templates] ([TemplateID]) ON UPDATE CASCADE
+GO
+GRANT INSERT ON  [DiamondJet].[JobPrint] TO [NAA\SPB Premise SQL RO]
+GO
+GRANT UPDATE ON  [DiamondJet].[JobPrint] TO [NAA\SPB Premise SQL RO]
+GO
diff --git a/Tables/DiamondJet.JobPrint_Archive.sql b/Tables/DiamondJet.JobPrint_Archive.sql
new file mode 100644
index 0000000..cf1ec4a
--- /dev/null
+++ b/Tables/DiamondJet.JobPrint_Archive.sql
@@ -0,0 +1,18 @@
+CREATE TABLE [DiamondJet].[JobPrint_Archive]
+(
+[JobNumber] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
+[PrintString] [nvarchar] (1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[CreationDate] [datetime] NULL,
+[RevisionDate] [datetime] NULL,
+[UniqueID] [uniqueidentifier] NULL,
+[ItemNumber] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[TemplateID] [int] NULL,
+[CreatedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[RevisedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[VerificationPrint] [nvarchar] (1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[ArchiveRecordID] [uniqueidentifier] NOT NULL CONSTRAINT [DF__JobPrint___Archi__5DCC8612] DEFAULT (newid()),
+[DateInsertedArchiveRecord] [datetime] NULL CONSTRAINT [DF_JobPrint_Archive_DateInsertedArchiveRecord] DEFAULT (getdate())
+) ON [PRIMARY]
+GO
+ALTER TABLE [DiamondJet].[JobPrint_Archive] ADD CONSTRAINT [PK_JobPrint_Archive] PRIMARY KEY CLUSTERED  ([ArchiveRecordID]) ON [PRIMARY]
+GO
diff --git a/Tables/DiamondJet.MarkingIntervals.sql b/Tables/DiamondJet.MarkingIntervals.sql
new file mode 100644
index 0000000..24408f0
--- /dev/null
+++ b/Tables/DiamondJet.MarkingIntervals.sql
@@ -0,0 +1,12 @@
+CREATE TABLE [DiamondJet].[MarkingIntervals]
+(
+[MarkingInterval] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
+[MarkingIntervalID] [int] NOT NULL IDENTITY(1, 1),
+[CreatedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF_MarkingUom_CreatedBy] DEFAULT (suser_sname()),
+[DateCreated] [datetime] NULL CONSTRAINT [DF_MarkingUom_DateCreated] DEFAULT (getdate())
+) ON [PRIMARY]
+GO
+ALTER TABLE [DiamondJet].[MarkingIntervals] ADD CONSTRAINT [PK_MarkingUom] PRIMARY KEY CLUSTERED  ([MarkingIntervalID]) ON [PRIMARY]
+GO
+ALTER TABLE [DiamondJet].[MarkingIntervals] ADD CONSTRAINT [IX_MarkingUom] UNIQUE NONCLUSTERED  ([MarkingInterval]) ON [PRIMARY]
+GO
diff --git a/Tables/DiamondJet.Templates.sql b/Tables/DiamondJet.Templates.sql
new file mode 100644
index 0000000..a96117c
--- /dev/null
+++ b/Tables/DiamondJet.Templates.sql
@@ -0,0 +1,15 @@
+CREATE TABLE [DiamondJet].[Templates]
+(
+[Template] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[TemplateID] [int] NOT NULL IDENTITY(1, 1),
+[DateCreated] [datetime] NULL CONSTRAINT [DF_Templates_DateCreated] DEFAULT (getdate()),
+[CreatedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF_Templates_CreatedBy] DEFAULT (suser_sname()),
+[TemplateDescription] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[MinOD] [decimal] (10, 5) NULL,
+[MarkingIntervalID] [int] NULL
+) ON [PRIMARY]
+GO
+ALTER TABLE [DiamondJet].[Templates] ADD CONSTRAINT [PK_Templates] PRIMARY KEY CLUSTERED  ([TemplateID]) ON [PRIMARY]
+GO
+ALTER TABLE [DiamondJet].[Templates] ADD CONSTRAINT [FK_Templates_MarkingUom] FOREIGN KEY ([MarkingIntervalID]) REFERENCES [DiamondJet].[MarkingIntervals] ([MarkingIntervalID]) ON UPDATE CASCADE
+GO
diff --git a/Tables/SalesForce.LeadTimes.sql b/Tables/SalesForce.LeadTimes.sql
new file mode 100644
index 0000000..b22dc73
--- /dev/null
+++ b/Tables/SalesForce.LeadTimes.sql
@@ -0,0 +1,10 @@
+CREATE TABLE [SalesForce].[LeadTimes]
+(
+[LeadTimeID] [int] NOT NULL,
+[LeadTimeName] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[DateCreated] [datetime] NULL CONSTRAINT [DF__LeadTimes__DateC__693E38BE] DEFAULT (getdate()),
+[CreatedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF__LeadTimes__Creat__6A325CF7] DEFAULT (suser_sname())
+) ON [PRIMARY]
+GO
+ALTER TABLE [SalesForce].[LeadTimes] ADD CONSTRAINT [PK__LeadTime__77BBF64849A6BBB3] PRIMARY KEY CLUSTERED  ([LeadTimeID]) ON [PRIMARY]
+GO
diff --git a/Tables/dbo.AFL_SHP_Shipments_Value_Report_260418.sql b/Tables/dbo.AFL_SHP_Shipments_Value_Report_260418.sql
new file mode 100644
index 0000000..f6735c0
--- /dev/null
+++ b/Tables/dbo.AFL_SHP_Shipments_Value_Report_260418.sql
@@ -0,0 +1,39 @@
+CREATE TABLE [dbo].[AFL_SHP_Shipments_Value_Report_260418]
+(
+[Org] [varchar] (3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[Shipped] [datetime] NULL,
+[Cust Num] [bigint] NULL,
+[Customer] [varchar] (65) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[Order Num] [varchar] (16) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[Customer PO] [varchar] (200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[Item] [varchar] (26) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[Description] [varchar] (288) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[Price] [float] NULL,
+[Qty] [bigint] NULL,
+[Value (BU Currency)] [float] NULL,
+[UOM] [varchar] (3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[Freight Carrier] [varchar] (32) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[Tracking Num] [varchar] (39) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[Delivery Receipt] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[Billable Tolerance Pct] [bigint] NULL,
+[Customer PID] [varchar] (36) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[Product Class] [varchar] (76) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[Product Group] [varchar] (3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[Location] [varchar] (52) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[Customer PO Line] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[Value (USD)] [float] NULL,
+[Item Cost] [float] NULL,
+[Shipment Cost] [float] NULL,
+[Sales Order Type] [varchar] (23) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[Customer Reference] [varchar] (104) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[Invoice Number] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[Promise Date] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[Schedule Date] [datetime] NULL,
+[Cable Weigth] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[Suggested Reel] [varchar] (14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[Reel Description] [varchar] (148) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[Reel Type] [varchar] (19) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[Lagging] [varchar] (19) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[Reel Weight] [bigint] NULL
+) ON [PRIMARY]
+GO
diff --git a/Tables/dbo.Basic Product Construction.sql b/Tables/dbo.Basic Product Construction.sql
index 5409f1e..f83bcf0 100644
--- a/Tables/dbo.Basic Product Construction.sql
+++ b/Tables/dbo.Basic Product Construction.sql
@@ -104,7 +104,8 @@
 [ActiveStatusChangedDate] [datetime] NULL,
 [ActiveStatusChangedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
 [SafetyRatingUS] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[SafetyRatingCanadian] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
+[SafetyRatingCanadian] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[VendorSpecificFiber] [bit] NULL CONSTRAINT [DF_Basic Product Construction_VendorSpecificFiber] DEFAULT ((0))
 ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
 GO
 SET QUOTED_IDENTIFIER ON
@@ -244,8 +245,6 @@
 GRANT UPDATE ([Active]) ON [dbo].[Basic Product Construction] TO [NAA\SPB Premise SQL RO]
 GO
 GRANT UPDATE ([Reason]) ON [dbo].[Basic Product Construction] TO [NAA\SPB Premise SQL RO]
-GO
-DENY DELETE ON  [dbo].[Basic Product Construction] TO [SPB Premise SQL RW]
 GO
 EXEC sp_addextendedproperty N'MS_SSMA_SOURCE', N'SQLMigration.[Basic Product Construction]', 'SCHEMA', N'dbo', 'TABLE', N'Basic Product Construction', NULL, NULL
 GO
diff --git a/Tables/dbo.Buff#1_#2 Alloc Table.sql b/Tables/dbo.Buff#1_#2 Alloc Table.sql
index 7a236b4..4368458 100644
--- a/Tables/dbo.Buff#1_#2 Alloc Table.sql
+++ b/Tables/dbo.Buff#1_#2 Alloc Table.sql
@@ -25,14 +25,39 @@
 [shrinkage limit] [decimal] (18, 3) NULL,
 [Sheathing Line] [int] NULL,
 [Interlock] [int] NULL,
-[PrefixID] [int] NOT NULL,
-[ID] [int] NOT NULL IDENTITY(1, 1),
+[ID] [int] NULL,
+[PrefixID] [int] NOT NULL IDENTITY(1, 1),
 [TimeStamp] [timestamp] NULL,
 [PrimaryBufferingLine] [int] NULL,
 [B18_Line_Speed] [decimal] (18, 3) NULL,
 [B2_Second_Pass] [decimal] (18, 3) NULL
 ) ON [PRIMARY]
 GO
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+-- =============================================
+-- Author:		Bryan Eddy
+-- Create date: 5/3/2018
+-- Description:	Keep ID synced with PrefixID
+-- =============================================
+CREATE TRIGGER [dbo].[trgr_CableRunSpeeds] ON [dbo].[Buff#1/#2 Alloc Table]
+AFTER INSERT, UPDATE 
+AS
+	BEGIN 
+			BEGIN
+			  UPDATE t
+			  SET t.ID = t.PrefixID
+			  FROM dbo.[Buff#1/#2 Alloc Table] as t
+			  JOIN inserted i
+			  ON i.PrefixID = t.PrefixID
+			END
+            
+    -- Insert statements for trigger here
+
+END
+GO
 ALTER TABLE [dbo].[Buff#1/#2 Alloc Table] ADD CONSTRAINT [Buff#1/#2 Alloc Table$PrimaryKey] PRIMARY KEY CLUSTERED  ([PrefixID]) ON [PRIMARY]
 GO
 GRANT UPDATE ([Prefix]) ON [dbo].[Buff#1/#2 Alloc Table] TO [NAA\SPB Premise SQL RO]
diff --git a/Tables/dbo.PorductionAndProcessData_Archive.sql b/Tables/dbo.PorductionAndProcessData_Archive.sql
new file mode 100644
index 0000000..5242f97
--- /dev/null
+++ b/Tables/dbo.PorductionAndProcessData_Archive.sql
@@ -0,0 +1,24 @@
+CREATE TABLE [dbo].[PorductionAndProcessData_Archive]
+(
+[Reel No] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
+[Cut No] [nvarchar] (6) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
+[Item #] [nvarchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[RFT] [smallint] NULL,
+[OTDR Length] [int] NULL,
+[ISE Mark] [int] NULL,
+[OSE Mark] [int] NULL,
+[Unit] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[ID] [nvarchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[Buffer Line] [nvarchar] (5) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[Ave Wall (OSE)] [real] NULL,
+[Min Wall Spot (OSE)] [real] NULL,
+[Associates Comments] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[Entry Date] [datetime] NULL,
+[Comments] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[NCMIR #] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[Record Create Date] [datetime] NULL,
+[Record ID] [int] NOT NULL IDENTITY(1, 1),
+[SSMA_TimeStamp] [timestamp] NOT NULL,
+[Cut Scrapped] [bit] NULL
+) ON [PRIMARY]
+GO
diff --git a/Tables/dbo.PrintLine4Codes.sql b/Tables/dbo.PrintLine4Codes.sql
index bd6db3c..a311df4 100644
--- a/Tables/dbo.PrintLine4Codes.sql
+++ b/Tables/dbo.PrintLine4Codes.sql
@@ -1,7 +1,8 @@
 CREATE TABLE [dbo].[PrintLine4Codes]
 (
 [PrintLine4CodeID] [int] NOT NULL IDENTITY(1, 1),
-[Line4PrintCode] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
+[Line4PrintCode] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[DiamondJetPrintLine4Code] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
 ) ON [PRIMARY]
 GO
 ALTER TABLE [dbo].[PrintLine4Codes] ADD CONSTRAINT [PK_PrintLine4Codes] PRIMARY KEY CLUSTERED  ([PrintLine4CodeID]) ON [PRIMARY]
diff --git a/Tables/dbo.Printed Labels (Data Products).sql b/Tables/dbo.Printed Labels (Data Products).sql
index 92bf859..0d0cc95 100644
--- a/Tables/dbo.Printed Labels (Data Products).sql
+++ b/Tables/dbo.Printed Labels (Data Products).sql
@@ -23,8 +23,117 @@
 [IASeq] [smallint] NULL CONSTRAINT [DF__Printed L__IASeq__6CCE0729] DEFAULT ((9999)),
 [CabSeq] [int] NULL CONSTRAINT [DF__Printed L__CabSe__6DC22B62] DEFAULT ((9999)),
 [Sh3Seq] [smallint] NULL CONSTRAINT [DF__Printed L__Sh3Se__6EB64F9B] DEFAULT ((9999)),
-[SSMA_TimeStamp] [timestamp] NOT NULL
+[SSMA_TimeStamp] [timestamp] NOT NULL,
+[DateCreated] [datetime] NULL CONSTRAINT [DF_Printed Labels (Data Products)_DateCreatedArchiveRecord] DEFAULT (getdate()),
+[CreatedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF_Printed Labels (Data Products)_CreatedByArchiveRecord] DEFAULT (suser_sname()),
+[RevisedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF_Printed Labels (Data Products)_RevisedBy] DEFAULT (suser_sname()),
+[DateRevised] [datetime] NULL CONSTRAINT [DF_Printed Labels (Data Products)_DateRevised] DEFAULT (getdate())
 ) ON [PRIMARY]
+GO
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+-- =============================================
+-- Author:		Bryan Eddy
+-- Create date: 6/8/2018
+-- Description:	Track changes in Printed Labels table
+-- =============================================
+CREATE TRIGGER [dbo].[PrintedLabelsArchivetrgr]
+   ON  [dbo].[Printed Labels (Data Products)] 
+   AFTER DELETE,UPDATE
+AS 
+BEGIN
+
+			  UPDATE t
+			  SET t.DateRevised = GETDATE(),
+			  t.RevisedBy = (SUSER_SNAME())
+			  FROM dbo.[Printed Labels (Data Products)] as t
+			  JOIN inserted i
+			  ON i.[Reel No] = t.[Reel No] AND i.[Order Qty] = t.[Order Qty]
+			
+
+	
+	SET NOCOUNT ON;
+		IF UPDATE ([Close Date])
+		BEGIN	
+			DECLARE @INS int, @DEL int
+
+			SELECT @INS = COUNT(*) FROM INSERTED
+			SELECT @DEL = COUNT(*) FROM DELETED
+
+			IF @INS > 0 OR @DEL > 0 
+		
+
+				INSERT INTO DBO.PrintedLabelsArchive
+				(
+				    [Reel No],
+				    [Order Qty],
+				    [Previously Printed],
+				    [Print Now],
+				    [Completed Buffering],
+				    [Buff Line #],
+				    [TB PRIORITY],
+				    [Setup Buff],
+				    [Setup SZ/SH],
+				    [Completed Cabling],
+				    [Make/Ship orders],
+				    [Sheathing Line #],
+				    Shipped,
+				    [Close Date],
+				    BOM,
+				    [BOM Comments],
+				    [CM Required],
+				    [Run Order],
+				    [Early Star Date],
+				    [Completed TightBuffer],
+				    IASeq,
+				    CabSeq,
+				    Sh3Seq,
+					DateCreated,
+					DateRevised,
+					RevisedBy,
+					CreatedBy
+
+				)
+
+					SELECT d.[Reel No],
+                           d.[Order Qty],
+                           d.[Previously Printed],
+                           d.[Print Now],
+                           d.[Completed Buffering],
+                           d.[Buff Line #],
+                           d.[TB PRIORITY],
+                           d.[Setup Buff],
+                           d.[Setup SZ/SH],
+                           d.[Completed Cabling],
+                           d.[Make/Ship orders],
+                           d.[Sheathing Line #],
+                           d.Shipped,
+                           d.[Close Date],
+                           d.BOM,
+                           d.[BOM Comments],
+                           d.[CM Required],
+                           d.[Run Order],
+                           d.[Early Star Date],
+                           d.[Completed TightBuffer],
+                           d.IASeq,
+                           d.CabSeq,
+                           d.Sh3Seq,
+						   d.DateCreated,
+					d.DateRevised,
+					d.RevisedBy,
+					d.CreatedBy
+
+				FROM DELETED d
+
+				
+
+			END
+
+
+
+END
 GO
 ALTER TABLE [dbo].[Printed Labels (Data Products)] ADD CONSTRAINT [SSMA_CC$Printed Labels (Data Products)$BOM Comments$disallow_zero_length] CHECK ((len([BOM Comments])>(0)))
 GO
@@ -36,10 +145,10 @@
 GO
 CREATE NONCLUSTERED INDEX [IX_Printed Labels (Data Products)] ON [dbo].[Printed Labels (Data Products)] ([Shipped], [Completed TightBuffer], [Reel No], [Order Qty]) ON [PRIMARY]
 GO
-GRANT INSERT ON  [dbo].[Printed Labels (Data Products)] TO [NAA\SPB Premise SQL RO]
-GO
 GRANT DELETE ON  [dbo].[Printed Labels (Data Products)] TO [NAA\SPB Premise SQL RO]
 GO
+GRANT INSERT ON  [dbo].[Printed Labels (Data Products)] TO [NAA\SPB Premise SQL RO]
+GO
 GRANT UPDATE ON  [dbo].[Printed Labels (Data Products)] TO [NAA\SPB Premise SQL RO]
 GO
 EXEC sp_addextendedproperty N'MS_SSMA_SOURCE', N'AccessSQLExport2.[Printed Labels (Data Products)]', 'SCHEMA', N'dbo', 'TABLE', N'Printed Labels (Data Products)', NULL, NULL
diff --git a/Tables/dbo.PrintedLabelsArchive.sql b/Tables/dbo.PrintedLabelsArchive.sql
new file mode 100644
index 0000000..d212aae
--- /dev/null
+++ b/Tables/dbo.PrintedLabelsArchive.sql
@@ -0,0 +1,35 @@
+CREATE TABLE [dbo].[PrintedLabelsArchive]
+(
+[Reel No] [nvarchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
+[Order Qty] [int] NOT NULL,
+[Previously Printed] [int] NULL,
+[Print Now] [int] NULL,
+[Completed Buffering] [int] NULL,
+[Buff Line #] [smallint] NOT NULL,
+[TB PRIORITY] [float] NULL,
+[Setup Buff] [int] NULL,
+[Setup SZ/SH] [int] NULL,
+[Completed Cabling] [int] NULL,
+[Make/Ship orders] [int] NULL,
+[Sheathing Line #] [smallint] NULL,
+[Shipped] [int] NULL,
+[Close Date] [datetime] NULL,
+[BOM] [nvarchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[BOM Comments] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[CM Required] [int] NULL,
+[Run Order] [smallint] NULL,
+[Early Star Date] [int] NULL,
+[Completed TightBuffer] [int] NULL,
+[IASeq] [smallint] NULL,
+[CabSeq] [int] NULL,
+[Sh3Seq] [smallint] NULL,
+[SSMA_TimeStamp] [timestamp] NOT NULL,
+[DateCreatedArchiveRecord] [datetime] NULL CONSTRAINT [DF_PrintedLabelsArchive_DateCreatedArchiveRecord] DEFAULT (getdate()),
+[CreatedByArchiveRecord] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF_PrintedLabelsArchive_CreatedByArchiveRecord] DEFAULT (suser_sname()),
+[DateCreated] [datetime] NULL CONSTRAINT [DF_PrintedLabelsArchive_DateCreated] DEFAULT (getdate()),
+[CreatedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF_PrintedLabelsArchive_CreatedBy] DEFAULT (suser_sname()),
+[RevisedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF_PrintedLabelsArchive_RevisedBy] DEFAULT (suser_sname()),
+[DateRevised] [datetime] NULL CONSTRAINT [DF_PrintedLabelsArchive_DateRevised] DEFAULT (getdate()),
+[GUID] [uniqueidentifier] NULL
+) ON [PRIMARY]
+GO
diff --git a/Tables/dbo.Unit Series.sql b/Tables/dbo.Unit Series.sql
index a08a8f9..e3aecc4 100644
--- a/Tables/dbo.Unit Series.sql
+++ b/Tables/dbo.Unit Series.sql
@@ -1,6 +1,6 @@
 CREATE TABLE [dbo].[Unit Series]
 (
-[Unit Color Series] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[Unit Color Series] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
 [Unit ID] [nvarchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
 [Description] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
 [TB Color Series] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
diff --git a/Tables/dbo.Vendors.sql b/Tables/dbo.Vendors.sql
new file mode 100644
index 0000000..1af0125
--- /dev/null
+++ b/Tables/dbo.Vendors.sql
@@ -0,0 +1,10 @@
+CREATE TABLE [dbo].[Vendors]
+(
+[VendorGUID] [uniqueidentifier] NOT NULL CONSTRAINT [DF__Vendors__VendorG__619D16F6] DEFAULT (newid()),
+[VendorName] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[DateCreated] [datetime] NULL CONSTRAINT [DF__Vendors__DateCre__62913B2F] DEFAULT (getdate()),
+[CreatedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF__Vendors__Created__63855F68] DEFAULT (suser_sname())
+) ON [PRIMARY]
+GO
+ALTER TABLE [dbo].[Vendors] ADD CONSTRAINT [PK_Vendors] PRIMARY KEY CLUSTERED  ([VendorGUID]) ON [PRIMARY]
+GO
diff --git a/Tables/dbo.XXAFL_CAB_DESIGN_ITEMS_ATTR_DELETE.sql b/Tables/dbo.XXAFL_CAB_DESIGN_ITEMS_ATTR_DELETE.sql
deleted file mode 100644
index 1d09342..0000000
--- a/Tables/dbo.XXAFL_CAB_DESIGN_ITEMS_ATTR_DELETE.sql
+++ /dev/null
@@ -1,24 +0,0 @@
-CREATE TABLE [dbo].[XXAFL_CAB_DESIGN_ITEMS_ATTR_DELETE]
-(
-[INVENTORY_ITEM_NAME] [nvarchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
-[ORGANIZATION_ID] [int] NULL,
-[PRIMARY_ALT] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
-[PROCESS_ID] [int] NULL,
-[DEPARTMENT_ID] [int] NOT NULL,
-[ATTRIBUTE_ID] [int] NOT NULL,
-[ATTRIBUTE_VALUE] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[UNIT_ID] [int] NOT NULL,
-[LAYER_ID] [int] NOT NULL,
-[START_DATE] [datetime] NULL,
-[END_DATE] [datetime] NULL,
-[USER_NAME] [nvarchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[CREATED_BY] [int] NULL,
-[CREATION_DATE] [datetime] NULL,
-[UPDATED_BY] [int] NULL,
-[UPDATE_DATE] [datetime] NULL,
-[CREATE_UPDATE_FLAG] [nvarchar] (5) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[BATCH_ID] [int] NULL
-) ON [PRIMARY]
-GO
-ALTER TABLE [dbo].[XXAFL_CAB_DESIGN_ITEMS_ATTR_DELETE] ADD CONSTRAINT [PK_XXAFL_CAB_DESIGN_ITEMS_ATTR] PRIMARY KEY CLUSTERED  ([INVENTORY_ITEM_NAME], [PRIMARY_ALT], [DEPARTMENT_ID], [ATTRIBUTE_ID], [UNIT_ID], [LAYER_ID]) ON [PRIMARY]
-GO
diff --git a/Tables/dbo.tblBurnListingDocument.sql b/Tables/dbo.tblBurnListingDocument.sql
index adb0add..c806dc0 100644
--- a/Tables/dbo.tblBurnListingDocument.sql
+++ b/Tables/dbo.tblBurnListingDocument.sql
@@ -4,8 +4,8 @@
 [ListingCompany] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
 [DateRecordCreated] [datetime] NULL CONSTRAINT [DF_tblBurnListingDocuments_DateRecordCreated] DEFAULT (getdate()),
 [RecordCreatedby] [nvarchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF_tblBurnListingDocuments_RecordCreatedby] DEFAULT (suser_sname()),
-[RevisionDate] [datetime] NULL,
-[RevisedBy] [nvarchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[RevisionDate] [datetime] NULL CONSTRAINT [DF_tblBurnListingDocument_RevisionDate] DEFAULT (getdate()),
+[RevisedBy] [nvarchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF_tblBurnListingDocument_RevisedBy] DEFAULT (suser_sname()),
 [Timestamp] [timestamp] NULL
 ) ON [PRIMARY]
 GO
diff --git a/Tables/dbo.tblCableConstructionReferences.sql b/Tables/dbo.tblCableConstructionReferences.sql
index fcead3e..922062c 100644
--- a/Tables/dbo.tblCableConstructionReferences.sql
+++ b/Tables/dbo.tblCableConstructionReferences.sql
@@ -147,6 +147,8 @@
 GO
 ALTER TABLE [dbo].[tblCableConstructionReferences] ADD CONSTRAINT [FK_tblCableConstructionReferences_tblCableFamily] FOREIGN KEY ([FamilyID]) REFERENCES [dbo].[tblCableFamily] ([FamilyID]) ON DELETE SET NULL ON UPDATE CASCADE
 GO
+ALTER TABLE [dbo].[tblCableConstructionReferences] ADD CONSTRAINT [FK_tblCableConstructionReferences_tblCableTightBufferReference] FOREIGN KEY ([TBType]) REFERENCES [dbo].[tblCableTightBufferReference] ([TBType]) ON DELETE SET NULL ON UPDATE CASCADE
+GO
 ALTER TABLE [dbo].[tblCableConstructionReferences] ADD CONSTRAINT [FK_tblCableConstructionReferences_tblCableType] FOREIGN KEY ([CableType]) REFERENCES [dbo].[tblCableType] ([CableType]) ON DELETE SET NULL ON UPDATE CASCADE
 GO
 ALTER TABLE [dbo].[tblCableConstructionReferences] ADD CONSTRAINT [FK_tblCableConstructionReferences_tblDesignTypes] FOREIGN KEY ([DesignTypeID]) REFERENCES [dbo].[tblDesignTypes] ([DesignTypeID]) ON DELETE SET NULL ON UPDATE CASCADE
diff --git a/Tables/dbo.tblCableConstructions.sql b/Tables/dbo.tblCableConstructions.sql
index d0eeb47..92720d5 100644
--- a/Tables/dbo.tblCableConstructions.sql
+++ b/Tables/dbo.tblCableConstructions.sql
@@ -69,7 +69,8 @@
 [TensileRatingLongTerm_N] [smallint] NULL,
 [EngineeringAssistReason] [varchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
 [CableShapeID] [int] NULL,
-[FiberApplicationID] [int] NULL
+[FiberApplicationID] [int] NULL,
+[JacketStripID] [int] NULL
 ) ON [PRIMARY]
 GO
 SET QUOTED_IDENTIFIER ON
@@ -155,3 +156,5 @@
 GO
 ALTER TABLE [dbo].[tblCableConstructions] ADD CONSTRAINT [FK_tblCableConstructions_tblJacketMaterials] FOREIGN KEY ([JacketMaterial]) REFERENCES [dbo].[tblJacketMaterials] ([JacketMaterial]) ON DELETE SET NULL ON UPDATE CASCADE
 GO
+ALTER TABLE [dbo].[tblCableConstructions] ADD CONSTRAINT [FK_tblCableConstructions_tblTightBufferStripType] FOREIGN KEY ([JacketStripID]) REFERENCES [dbo].[tblTightBufferStripType] ([ID])
+GO
diff --git a/Tables/dbo.tblCableConstructionsOLD.sql b/Tables/dbo.tblCableConstructionsOLD.sql
deleted file mode 100644
index 060447c..0000000
--- a/Tables/dbo.tblCableConstructionsOLD.sql
+++ /dev/null
@@ -1,119 +0,0 @@
-CREATE TABLE [dbo].[tblCableConstructionsOLD]
-(
-[StandardOperation] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[JacketMaterial] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[NominalOD] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[ODTolPlus] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[ODTolMinus] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Height] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[HeightTolPlus] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[HeightTolMinus] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[NominalWall] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[MaxAveWall] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[MinAveWall] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[MinSpotWall] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[AramidType1] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[AramidEnds1] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[AramidType2] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[AramidEnds2] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[ChipType] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Ripcord] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[LayLength] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Talc] [smallint] NULL,
-[FRP_Dia] [real] NULL,
-[CM] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[CMMaterial] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[CM_OD] [real] NULL,
-[CMODTolPlus] [nvarchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[CMODTolMinus] [nvarchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[CMWall] [real] NULL,
-[CMMinWall] [real] NULL,
-[HelixFactor] [real] NULL,
-[CoreWrap] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[CoreDia] [real] NULL,
-[Binder1] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[QtyBinder1] [tinyint] NULL,
-[Binder1LayLength] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Binder2] [nvarchar] (75) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[QtyBinder2] [tinyint] NULL,
-[Binder2LayLength] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Binder3] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[QtyBinder3] [tinyint] NULL,
-[Binder3LayLength] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[CablePasses] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF_tblCableConstructions_CablePasses] DEFAULT ((1)),
-[RevisionDate] [datetime2] (0) NULL CONSTRAINT [DF_tblCableConstructions_RevisionDate2] DEFAULT (getdate()),
-[RevisionNumber] [smallint] NULL CONSTRAINT [DF__tblCableC__Revis__017F0B4C] DEFAULT ((0)),
-[RevisionHistory] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Instructions] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Instructions2] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[SSMA_TimeStamp] [timestamp] NOT NULL,
-[DateCreated] [datetime2] NULL CONSTRAINT [DF_tblCableConstructions_DateCreated2] DEFAULT (getdate()),
-[CreatedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF_tblCableConstructions_CreatedBy2] DEFAULT (suser_sname()),
-[BaseID] [int] NOT NULL,
-[RevisedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF_tblCableConstructions_RevisedBy2] DEFAULT (suser_sname()),
-[ColorChipPercentage] [numeric] (5, 5) NULL,
-[ID] [int] NOT NULL IDENTITY(1, 1)
-) ON [PRIMARY]
-GO
-SET QUOTED_IDENTIFIER ON
-GO
-SET ANSI_NULLS ON
-GO
-
-
-
-CREATE TRIGGER [dbo].[CableConstructionsUpdatetrgr] ON [dbo].[tblCableConstructionsOLD]
-AFTER INSERT, UPDATE 
-AS
-	BEGIN 
-		IF NOT (UPDATE(RevisionDate))
-			BEGIN
-			  UPDATE t
-			  SET t.RevisionDate = GETDATE(),
-			  t.RevisedBy = (SUSER_SNAME()),
-			  t.RevisionNumber = (t.RevisionNumber + 1) 
-			  FROM dbo.tblCableConstructions as t
-			  JOIN inserted i
-			  ON i.baseid = t.baseid
-			END
-		DECLARE @INS int, @DEL int
-
-		SELECT @INS = COUNT(*) FROM INSERTED
-		SELECT @DEL = COUNT(*) FROM DELETED
-
-		IF @INS > 0 AND @DEL > 0 
-		BEGIN
-
-		  INSERT INTO DBO.tblCableConstructionsARCHIVE(
-			 [StandardOperation],[JacketMaterial],[NominalOD],[ODTolPlus],[ODTolMinus],[Height],[HeightTolPlus],[HeightTolMinus],[NominalWall],[MaxAveWall],[MinAveWall],[MinSpotWall],[AramidType1]
-		,[AramidEnds1],[AramidType2],[AramidEnds2],[ChipType],[Ripcord],[LayLength],[Talc],[FRP_Dia],[CM],[CMMaterial],[CM_OD],[CMODTolPlus],[CMODTolMinus],[CMWall],[CMMinWall],[HelixFactor],[CoreWrap]
-		,[CoreDia],[Binder1],[QtyBinder1],[Binder1LayLength],[Binder2],[QtyBinder2],[Binder2LayLength],[Binder3],[QtyBinder3],[Binder3LayLength],[CablePasses],[RevisionDate],[RevisionNumber]
-		,[RevisionHistory],[Instructions],[Instructions2],[BaseID],[ColorChipPercentage],[ID]) 
-	  
-			  SELECT
-			 [StandardOperation],[JacketMaterial],[NominalOD],[ODTolPlus],[ODTolMinus],[Height],[HeightTolPlus],[HeightTolMinus],[NominalWall],[MaxAveWall],[MinAveWall],[MinSpotWall],[AramidType1]
-		,[AramidEnds1],[AramidType2],[AramidEnds2],[ChipType],[Ripcord],[LayLength],[Talc],[FRP_Dia],[CM],[CMMaterial],[CM_OD],[CMODTolPlus],[CMODTolMinus],[CMWall],[CMMinWall],[HelixFactor],[CoreWrap]
-		,[CoreDia],[Binder1],[QtyBinder1],[Binder1LayLength],[Binder2],[QtyBinder2],[Binder2LayLength],[Binder3],[QtyBinder3],[Binder3LayLength],[CablePasses],[RevisionDate],[RevisionNumber]
-		,[RevisionHistory],[Instructions],[Instructions2],[BaseID],[ColorChipPercentage],[ID] 
-			FROM DELETED --the DELETED table contains the OLD values
-
-		/*	  SELECT
-			 [StandardOperation],[JacketMaterial],[NominalOD],[ODTolPlus],[ODTolMinus],[Height],[HeightTolPlus],[HeightTolMinus],[NominalWall],[MaxAveWall],[MinAveWall],[MinSpotWall],[AramidType1]
-		,[AramidEnds1],[AramidType2],[AramidEnds2],[ChipType],[Ripcord],[LayLength],[Talc],[FRP_Dia],[CM],[CMMaterial],[CM_OD],[CMODTolPlus],[CMODTolMinus],[CMWall],[CMMinWall],[HelixFactor],[CoreWrap]
-		,[CoreDia],[Binder1],[QtyBinder1],[Binder1LayLength],[Binder2],[QtyBinder2],[Binder2LayLength],[Binder3],[QtyBinder3],[Binder3LayLength],[CablePasses],[RevisionDate],[RevisionNumber]
-		,[RevisionHistory],[Instructions],[Instructions2],[BaseID],[ColorChipPercentage],[ID] 
-			 FROM INSERTED  --the INSERTED table contains the NEW values*/
-		END
-
-
-	END
-			
-GO
-ALTER TABLE [dbo].[tblCableConstructionsOLD] ADD CONSTRAINT [PK_tblCableConstructions2] PRIMARY KEY CLUSTERED  ([BaseID]) ON [PRIMARY]
-GO
-CREATE NONCLUSTERED INDEX [IX_tblCableConstructions_9] ON [dbo].[tblCableConstructionsOLD] ([CablePasses]) ON [PRIMARY]
-GO
-CREATE NONCLUSTERED INDEX [IX_tblCableConstructions_7] ON [dbo].[tblCableConstructionsOLD] ([JacketMaterial]) ON [PRIMARY]
-GO
-CREATE NONCLUSTERED INDEX [IX_tblCableConstructions_8] ON [dbo].[tblCableConstructionsOLD] ([StandardOperation]) ON [PRIMARY]
-GO
diff --git a/Tables/dbo.tblCableFamilyDocs.sql b/Tables/dbo.tblCableFamilyDocs.sql
index 30ff73e..e6edf0d 100644
--- a/Tables/dbo.tblCableFamilyDocs.sql
+++ b/Tables/dbo.tblCableFamilyDocs.sql
@@ -3,10 +3,11 @@
 [FamilyID] [int] NOT NULL,
 [Document] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
 [DateCreated] [datetime2] NULL CONSTRAINT [DF_tblCableFamilyDocs_DateCreated] DEFAULT (getdate()),
-[CreatedBy] [nvarchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF_tblCableFamilyDocs_CreatedBy] DEFAULT (suser_sname())
+[CreatedBy] [nvarchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF_tblCableFamilyDocs_CreatedBy] DEFAULT (suser_sname()),
+[CableFamilyDocID] [int] NOT NULL IDENTITY(1, 1)
 ) ON [PRIMARY]
 GO
 ALTER TABLE [dbo].[tblCableFamilyDocs] ADD CONSTRAINT [PK_tblCableFamilyDocs] PRIMARY KEY CLUSTERED  ([FamilyID], [Document]) ON [PRIMARY]
 GO
-ALTER TABLE [dbo].[tblCableFamilyDocs] ADD CONSTRAINT [FK_tblCableFamilyDocs_tblCableFamily] FOREIGN KEY ([FamilyID]) REFERENCES [dbo].[tblCableFamily] ([FamilyID]) ON UPDATE CASCADE
+ALTER TABLE [dbo].[tblCableFamilyDocs] ADD CONSTRAINT [FK_tblCableFamilyDocs_tblCableFamily] FOREIGN KEY ([FamilyID]) REFERENCES [dbo].[tblCableFamily] ([FamilyID]) ON DELETE CASCADE ON UPDATE CASCADE
 GO
diff --git a/Tables/dbo.tblCableTBType.sql b/Tables/dbo.tblCableTBType.sql
index c016ef1..51fccb5 100644
--- a/Tables/dbo.tblCableTBType.sql
+++ b/Tables/dbo.tblCableTBType.sql
@@ -13,9 +13,11 @@
 [ColoredFiber] [bit] NULL
 ) ON [PRIMARY]
 GO
-ALTER TABLE [dbo].[tblCableTBType] ADD CONSTRAINT [PK_tblCableTBType] PRIMARY KEY CLUSTERED  ([TBLetterIndicator], [TBLetter]) ON [PRIMARY]
+ALTER TABLE [dbo].[tblCableTBType] ADD CONSTRAINT [PK_tblCableTBType] PRIMARY KEY CLUSTERED  ([TBLetterIndicator]) ON [PRIMARY]
 GO
 CREATE NONCLUSTERED INDEX [IX_tblCableTBType] ON [dbo].[tblCableTBType] ([TBIndicatorID]) ON [PRIMARY]
 GO
+CREATE UNIQUE NONCLUSTERED INDEX [IX_tblCableTBType_1] ON [dbo].[tblCableTBType] ([TBIndicatorID], [TBLetter]) ON [PRIMARY]
+GO
 ALTER TABLE [dbo].[tblCableTBType] ADD CONSTRAINT [FK_tblCableTBType_tblCableTightBufferReference] FOREIGN KEY ([TBIndicatorID]) REFERENCES [dbo].[tblCableTightBufferReference] ([TBTypeID]) ON DELETE SET NULL ON UPDATE CASCADE
 GO
diff --git a/Tables/dbo.tblCableTightBufferReference.sql b/Tables/dbo.tblCableTightBufferReference.sql
index 8b01109..4013978 100644
--- a/Tables/dbo.tblCableTightBufferReference.sql
+++ b/Tables/dbo.tblCableTightBufferReference.sql
@@ -2,7 +2,7 @@
 (
 [TBTypeID] [int] NOT NULL IDENTITY(1, 1),
 [TBType] [nvarchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
-[TBIndicatorID] [int] NOT NULL,
+[TBIndicatorID] [int] NULL,
 [TimeStamp] [timestamp] NOT NULL,
 [DateCreated] [datetime2] NULL CONSTRAINT [DF_tblCableTightBufferReference_DateCreated] DEFAULT (getdate()),
 [CreatedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF_tblCableTightBufferReference_CreatedBy] DEFAULT (suser_sname()),
diff --git a/Tables/dbo.tblCorningPrint.sql b/Tables/dbo.tblCorningPrint.sql
index 5acf67c..669b637 100644
--- a/Tables/dbo.tblCorningPrint.sql
+++ b/Tables/dbo.tblCorningPrint.sql
@@ -3,8 +3,11 @@
 [ID] [int] NOT NULL IDENTITY(1, 1),
 [CorningPrint] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
 [FiberLetter] [nvarchar] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[FiberExtensions] [nvarchar] (6) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
+[FiberExtensions] [nvarchar] (6) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF_tblCorningPrint_FiberExtensions] DEFAULT (N'NONE'),
+[VendorGUID] [uniqueidentifier] NULL
 ) ON [PRIMARY]
 GO
 ALTER TABLE [dbo].[tblCorningPrint] ADD CONSTRAINT [PK_tblCorningPrint] PRIMARY KEY CLUSTERED  ([ID]) ON [PRIMARY]
 GO
+ALTER TABLE [dbo].[tblCorningPrint] ADD CONSTRAINT [FK__tblCornin__Vendo__6661CC13] FOREIGN KEY ([VendorGUID]) REFERENCES [dbo].[Vendors] ([VendorGUID])
+GO
diff --git a/Tables/dbo.tblDesignCodeFurcationTube.sql b/Tables/dbo.tblDesignCodeFurcationTube.sql
index 62df8e4..e566a94 100644
--- a/Tables/dbo.tblDesignCodeFurcationTube.sql
+++ b/Tables/dbo.tblDesignCodeFurcationTube.sql
@@ -6,7 +6,9 @@
 [TBNomOD] [decimal] (10, 6) NULL,
 [SpecialnInstr] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
 [TBNomID] [decimal] (10, 6) NULL,
-[TBMaterial] [nvarchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
+[TBMaterial] [nvarchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[OdTolPlus] [decimal] (6, 3) NULL,
+[OdTolMinus] [decimal] (6, 3) NULL
 ) ON [PRIMARY]
 GO
 ALTER TABLE [dbo].[tblDesignCodeFurcationTube] ADD CONSTRAINT [PK_tblDesignCodeFurcationTube] PRIMARY KEY CLUSTERED  ([FurcationLetter]) ON [PRIMARY]
diff --git a/Tables/dbo.tblEmailOptions.sql b/Tables/dbo.tblEmailOptions.sql
deleted file mode 100644
index cf980ca..0000000
--- a/Tables/dbo.tblEmailOptions.sql
+++ /dev/null
@@ -1,14 +0,0 @@
-CREATE TABLE [dbo].[tblEmailOptions]
-(
-[EmailSubject] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[EmailTo] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[EmailCC] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[EmailBCC] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[ProductType] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[EmailOption] [int] NOT NULL IDENTITY(1, 1),
-[EmailBody] [nvarchar] (300) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Path] [nvarchar] (200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
-) ON [PRIMARY]
-GO
-ALTER TABLE [dbo].[tblEmailOptions] ADD CONSTRAINT [PK_tblEmailOptions] PRIMARY KEY CLUSTERED  ([EmailOption]) ON [PRIMARY]
-GO
diff --git a/Tables/dbo.tblEmailOptions_DELETE.sql b/Tables/dbo.tblEmailOptions_DELETE.sql
new file mode 100644
index 0000000..bbbec3d
--- /dev/null
+++ b/Tables/dbo.tblEmailOptions_DELETE.sql
@@ -0,0 +1,14 @@
+CREATE TABLE [dbo].[tblEmailOptions_DELETE]
+(
+[EmailSubject] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[EmailTo] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[EmailCC] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[EmailBCC] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[ProductType] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[EmailOption] [int] NOT NULL IDENTITY(1, 1),
+[EmailBody] [nvarchar] (300) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[Path] [nvarchar] (200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
+) ON [PRIMARY]
+GO
+ALTER TABLE [dbo].[tblEmailOptions_DELETE] ADD CONSTRAINT [PK_tblEmailOptions] PRIMARY KEY CLUSTERED  ([EmailOption]) ON [PRIMARY]
+GO
diff --git a/Tables/dbo.tblItemBuildDescrepancyLog.sql b/Tables/dbo.tblItemBuildDescrepancyLog.sql
index 65cdf0d..3ca27ed 100644
--- a/Tables/dbo.tblItemBuildDescrepancyLog.sql
+++ b/Tables/dbo.tblItemBuildDescrepancyLog.sql
@@ -2,7 +2,7 @@
 (
 [ID] [int] NOT NULL IDENTITY(1, 1),
 [DateCreated] [datetime] NOT NULL CONSTRAINT [DF_tblItemBuildDescrepancyLog_DateCreated] DEFAULT (getdate()),
-[Item] [nvarchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
+[Item] [nvarchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
 [CriticalErrors] [bit] NULL CONSTRAINT [DF_tblItemBuildDescrepancyLog_CriticalErrors] DEFAULT ((0)),
 [NonCriticalErrors] [bit] NULL CONSTRAINT [DF_tblItemBuildDescrepancyLog_NonCriticalErrors] DEFAULT ((0)),
 [DescOfError] [nvarchar] (300) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
@@ -69,3 +69,5 @@
 GO
 ALTER TABLE [dbo].[tblItemBuildDescrepancyLog] ADD CONSTRAINT [PK_tblItemBuildDescrepancyLog] PRIMARY KEY CLUSTERED  ([Item]) ON [PRIMARY]
 GO
+ALTER TABLE [dbo].[tblItemBuildDescrepancyLog] ADD CONSTRAINT [fk_ItemBuild_Items] FOREIGN KEY ([Item]) REFERENCES [dbo].[Basic Product Construction] ([New Oracle Part #]) ON DELETE CASCADE ON UPDATE CASCADE
+GO
diff --git a/Tables/dbo.tblJacketMaterials.sql b/Tables/dbo.tblJacketMaterials.sql
index a0bf1f0..0eb9075 100644
--- a/Tables/dbo.tblJacketMaterials.sql
+++ b/Tables/dbo.tblJacketMaterials.sql
@@ -8,10 +8,13 @@
 [CreatedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF_tblJacketMaterials_CreatedBy] DEFAULT (suser_sname()),
 [DateCreated] [datetime] NULL CONSTRAINT [DF_tblJacketMaterials_DateCreated] DEFAULT (getdate()),
 [ID] [int] NOT NULL IDENTITY(1, 1),
-[SpecificGravity] [decimal] (6, 4) NULL
+[SpecificGravity] [decimal] (6, 4) NULL,
+[PrinterNote] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
 ) ON [PRIMARY]
 GO
 ALTER TABLE [dbo].[tblJacketMaterials] ADD CONSTRAINT [PK_tblJacketMaterials] PRIMARY KEY CLUSTERED  ([JacketMaterial]) ON [PRIMARY]
 GO
 ALTER TABLE [dbo].[tblJacketMaterials] ADD CONSTRAINT [FK_tblJacketMaterials_tblColor_Jacket_Catalog] FOREIGN KEY ([Color_Chip_Catalog]) REFERENCES [dbo].[tblColor_Jacket_Catalog] ([Color_Chip_Catalog]) ON DELETE SET NULL ON UPDATE CASCADE
 GO
+ALTER TABLE [dbo].[tblJacketMaterials] ADD CONSTRAINT [FK_tblJacketMaterials_tblMaterialDensity] FOREIGN KEY ([JacketMaterial]) REFERENCES [dbo].[tblMaterialDensity] ([Compound]) ON UPDATE CASCADE
+GO
diff --git a/Tables/dbo.tblLeadTime.sql b/Tables/dbo.tblLeadTime.sql
deleted file mode 100644
index 58cf969..0000000
--- a/Tables/dbo.tblLeadTime.sql
+++ /dev/null
@@ -1,8 +0,0 @@
-CREATE TABLE [dbo].[tblLeadTime]
-(
-[ID] [tinyint] NULL,
-[LeadTimeID] [int] NULL,
-[LeadTimeCat] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[LeadTime] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
-) ON [PRIMARY]
-GO
diff --git a/Tables/dbo.tblMasterSchedule.sql b/Tables/dbo.tblMasterSchedule.sql
deleted file mode 100644
index 571d885..0000000
--- a/Tables/dbo.tblMasterSchedule.sql
+++ /dev/null
@@ -1,75 +0,0 @@
-CREATE TABLE [dbo].[tblMasterSchedule]
-(
-[DESIRED_SHIP_DATE] [datetime] NULL,
-[STATUS] [nvarchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[LINE_STATUS] [nvarchar] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Cust_Ord_ID] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Line_No] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[DEMAND_BASE_ID] [nvarchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[PART_ID] [nvarchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[DESCRIPTION] [nvarchar] (40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[PROMISE_DATE] [datetime] NULL,
-[Mth] [float] NULL,
-[YEAR] [float] NULL,
-[CUSTOMER_ID] [nvarchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[CustomerName] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[ORDER_QTY] [float] NULL,
-[SELLING_UM] [nvarchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[USER_ORDER_QTY] [decimal] (14, 4) NULL,
-[MultLen] [float] NULL,
-[MultUoM] [nvarchar] (80) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[NumOMults] [float] NULL,
-[SetName] [nvarchar] (80) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[SetNum] [nvarchar] (80) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[ReelType] [nvarchar] (80) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[SPEC] [nvarchar] (80) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Earliest_DDay] [datetime] NULL,
-[WOID] [nvarchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[ProdCode] [nvarchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[WOStatus] [nvarchar] (6) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[QTY_SHPD] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[LastShip] [datetime] NULL,
-[SOComments] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[WOComments] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Stock_UM] [nvarchar] (5) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[KG] [float] NULL,
-[Due_By] [datetime] NULL,
-[Comments] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Customer_Part_ID] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[ID] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Day] [float] NULL,
-[Line_Spec] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[CUSTOMER_PO_REF] [nvarchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Balance] [float] NULL,
-[Booked_Date] [datetime] NULL,
-[Cat_Info] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Completed_Qty] [float] NULL,
-[Entry_Status] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Holds] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Item_Type] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Job_Number] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Order_Line] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Order_Line_ID] [int] NULL,
-[Order_Type] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Org_Code] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Run_Date] [datetime] NULL,
-[Schedule_Approved] [datetime] NULL,
-[Source_Type] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Plan_Header_Spec] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Customer Order Quantity] [float] NULL,
-[Detail_Schedule] [datetime] NULL,
-[Detail_Balance] [int] NULL,
-[Scheduled] [nvarchar] (5) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Reel Header Spec] [nvarchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Reel Line Spec] [nvarchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Packaging] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[CSR] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[CableWeight] [float] NULL,
-[Line_Tol] [float] NULL,
-[Shop_Order_Status] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Stacked_On] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Shop_ID] [int] NULL,
-[FGItemNumber] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[RecordSource] [int] NULL
-) ON [PRIMARY]
-GO
diff --git a/Tables/dbo.tblMaterialDensity.sql b/Tables/dbo.tblMaterialDensity.sql
index b29aeef..9879e57 100644
--- a/Tables/dbo.tblMaterialDensity.sql
+++ b/Tables/dbo.tblMaterialDensity.sql
@@ -6,7 +6,7 @@
 [RevisedBy] [nvarchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF_tblCompounds_RevisedBy] DEFAULT (suser_sname()),
 [RevisedDate] [datetime2] NULL CONSTRAINT [DF_tblCompounds_RevisedDate] DEFAULT (getdate()),
 [Createdby] [nvarchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF_tblMaterialDensity_Createdby] DEFAULT (suser_sname()),
-[LotSize] [int] NULL
+[LotSize] [int] NULL CONSTRAINT [DF_tblMaterialDensity_LotSize] DEFAULT ((1))
 ) ON [PRIMARY]
 GO
 ALTER TABLE [dbo].[tblMaterialDensity] ADD CONSTRAINT [PK_tblMaterialDensity] PRIMARY KEY CLUSTERED  ([Compound]) ON [PRIMARY]
diff --git a/Tables/dbo.tblMaterialWeightsMetersUOM.sql b/Tables/dbo.tblMaterialWeightsMetersUOM.sql
index 02eda93..0ad7883 100644
--- a/Tables/dbo.tblMaterialWeightsMetersUOM.sql
+++ b/Tables/dbo.tblMaterialWeightsMetersUOM.sql
@@ -6,7 +6,7 @@
 [RevisedBy] [nvarchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF_tblBuyMaterialWeights_RevisedBy] DEFAULT (suser_sname()),
 [RevisedDate] [datetime2] NULL CONSTRAINT [DF_tblBuyMaterialWeights_RevisedDate] DEFAULT (getdate()),
 [Createdby] [nvarchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF_tblBuyMaterialWeights_Createdby] DEFAULT (suser_sname()),
-[LotSize] [int] NULL
+[LotSize] [int] NULL CONSTRAINT [DF_tblMaterialWeightsMetersUOM_LotSize] DEFAULT ((1))
 ) ON [PRIMARY]
 GO
 ALTER TABLE [dbo].[tblMaterialWeightsMetersUOM] ADD CONSTRAINT [PK_tblBuyMaterialWeights] PRIMARY KEY CLUSTERED  ([Material]) ON [PRIMARY]
diff --git a/Tables/dbo.tblSalesForce_Pricing.sql b/Tables/dbo.tblSalesForce_Pricing.sql
index fe89d37..e51748d 100644
--- a/Tables/dbo.tblSalesForce_Pricing.sql
+++ b/Tables/dbo.tblSalesForce_Pricing.sql
@@ -12,7 +12,3 @@
 GO
 GRANT UPDATE ([Contribution]) ON [dbo].[tblSalesForce_Pricing] TO [NAA\houckmi]
 GO
-DENY UPDATE ON  [dbo].[tblSalesForce_Pricing] TO [SPB Premise SQL RW]
-GO
-DENY DELETE ON  [dbo].[tblSalesForce_Pricing] TO [SPB Premise SQL RW]
-GO
diff --git a/Tables/dbo.tblSalesForce_Pricing_Multiplier.sql b/Tables/dbo.tblSalesForce_Pricing_Multiplier.sql
index 280f9e0..e5a6c8e 100644
--- a/Tables/dbo.tblSalesForce_Pricing_Multiplier.sql
+++ b/Tables/dbo.tblSalesForce_Pricing_Multiplier.sql
@@ -17,7 +17,3 @@
 GO
 GRANT UPDATE ([Multiplier]) ON [dbo].[tblSalesForce_Pricing_Multiplier] TO [NAA\houckmi]
 GO
-DENY UPDATE ON  [dbo].[tblSalesForce_Pricing_Multiplier] TO [SPB Premise SQL RW]
-GO
-DENY DELETE ON  [dbo].[tblSalesForce_Pricing_Multiplier] TO [SPB Premise SQL RW]
-GO
diff --git a/Tables/dbo.tblStockItems.sql b/Tables/dbo.tblStockItems.sql
index 89e9b51..b083a02 100644
--- a/Tables/dbo.tblStockItems.sql
+++ b/Tables/dbo.tblStockItems.sql
@@ -50,7 +50,3 @@
 GO
 GRANT UPDATE ([Price_feet]) ON [dbo].[tblStockItems] TO [NAA\houckmi]
 GO
-DENY DELETE ON  [dbo].[tblStockItems] TO [SPB Premise SQL RW]
-GO
-DENY UPDATE ON  [dbo].[tblStockItems] TO [SPB Premise SQL RW]
-GO
diff --git a/Tables/dbo.tblTightBufferStripType.sql b/Tables/dbo.tblTightBufferStripType.sql
index 3a75a99..2c569b9 100644
--- a/Tables/dbo.tblTightBufferStripType.sql
+++ b/Tables/dbo.tblTightBufferStripType.sql
@@ -8,3 +8,5 @@
 GO
 ALTER TABLE [dbo].[tblTightBufferStripType] ADD CONSTRAINT [PK_tblEZStripType] PRIMARY KEY CLUSTERED  ([TightBufferStrip]) ON [PRIMARY]
 GO
+ALTER TABLE [dbo].[tblTightBufferStripType] ADD CONSTRAINT [IX_tblTightBufferStripType] UNIQUE NONCLUSTERED  ([ID]) ON [PRIMARY]
+GO
diff --git a/Views/DiamondJet.vJobPrintInterface.sql b/Views/DiamondJet.vJobPrintInterface.sql
new file mode 100644
index 0000000..bc6100a
--- /dev/null
+++ b/Views/DiamondJet.vJobPrintInterface.sql
@@ -0,0 +1,27 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+/*
+Author:		Bryan Eddy
+Desc:		View for DiamondJet to pull print information from
+Date:		4/25/2018
+Version:	1
+Update:		n/a
+*/
+
+CREATE VIEW [DiamondJet].[vJobPrintInterface]
+AS 
+SELECT k.JobNumber,
+       k.PrintString,
+       k.CreationDate,
+       k.RevisionDate,
+       k.UniqueID,
+       k.ItemNumber,
+       k.TemplateID,
+	   i.Template,
+	   k.VerificationPrint
+	   ,k.RevisedBy
+	   ,k.CreatedBy
+FROM DiamondJet.JobPrint k INNER JOIN DiamondJet.Templates i ON i.TemplateID = k.TemplateID
+GO
diff --git a/Views/SalesForce.vLeadTimes.sql b/Views/SalesForce.vLeadTimes.sql
new file mode 100644
index 0000000..881d525
--- /dev/null
+++ b/Views/SalesForce.vLeadTimes.sql
@@ -0,0 +1,20 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+/*
+Author:		Bryan Eddy
+Date:		5/8/2018
+Desc:		Lead times names for all salesforce items
+Version:	1
+Update:		n/a
+*/
+
+CREATE VIEW [SalesForce].[vLeadTimes]
+AS
+SELECT LeadTimeID,
+       LeadTimeName,
+       DateCreated,
+       CreatedBy
+FROM SalesForce.LeadTimes
+GO
diff --git a/Views/Schedule.vFBR00466Selection.sql b/Views/Schedule.vFBR00466Selection.sql
index d8a306e..6618288 100644
--- a/Views/Schedule.vFBR00466Selection.sql
+++ b/Views/Schedule.vFBR00466Selection.sql
@@ -6,5 +6,5 @@
 AS
 SELECT Name, [Item Number], [Lot Number], Locator, [Box Number], [Onhand Qty]
 FROM dbo.fi_fiber_length_extract_AFLPRD
-WHERE [Item Number] LIKE 'FBR00356%' AND [MFD 1310nm] BETWEEN 8.7000 AND 9.2000
+WHERE ([Item Number] LIKE 'FBR00356%' OR [Item Number] LIKE 'FBR00374%') AND [MFD 1310nm] BETWEEN 8.7000 AND 9.2000
 GO
diff --git a/Views/Schedule.vInactiveItems.sql b/Views/Schedule.vInactiveItems.sql
index e102030..80a0c1e 100644
--- a/Views/Schedule.vInactiveItems.sql
+++ b/Views/Schedule.vInactiveItems.sql
@@ -3,15 +3,14 @@
 SET ANSI_NULLS ON
 GO
 
-
 CREATE VIEW [Schedule].[vInactiveItems]
-as
+AS
 SELECT K.[New Oracle Part #],K.Reason,k.Customer, I.[Reel No], I.[Order Qty], I.Customer CustomerOrder, P.[Buff Line #], I.[Schedule date], I.Desgin, I.Job#, O.[Promise Date], I.[Shipped Qty]
-, P.Shipped, I.[Type Order], k.Active
+, P.Shipped, I.[Type Order], CASE WHEN  k.Active = 0 THEN 'No' ELSE 'Yes' end ActiveItem, CASE WHEN r.Active = 0 THEN 'No' ELSE 'Yes' end ActiveConstruction
 FROM dbo.[Basic Product Construction] K INNER JOIN dbo.[Cust Order Specifications] I ON I.[Item No] = K.[New Oracle Part #]
 INNER JOIN dbo.[Printed Labels (Data Products)] P ON  P.[Order Qty] = I.[Order Qty] AND p.[Reel No] = i.[Co Number]
 INNER JOIN dbo.[New Orders Spreadsheet] O ON O.[Order #] = I.[Reel No]
 INNER JOIN dbo.tblCableConstructionReferences R ON R.BASE = K.Base
-WHERE (K.Active = 0 or r.active = 0)  AND P.Shipped = 0 AND I.[Type Order] IN ('new' , 'sset') 
-and LEFT(K.[New Oracle Part #],2) NOT IN ('bu','rb','fb','cu')
+WHERE (K.Active = 0 OR r.active = 0)  AND P.Shipped = 0 AND I.[Type Order] IN ('new' , 'sset') 
+AND LEFT(K.[New Oracle Part #],2) NOT IN ('bu','rb','fb','cu')
 GO
diff --git a/Views/Setup.TightBufferSetupRecipe.sql b/Views/Setup.TightBufferSetupRecipe.sql
index 8b4d953..0983318 100644
--- a/Views/Setup.TightBufferSetupRecipe.sql
+++ b/Views/Setup.TightBufferSetupRecipe.sql
@@ -3,6 +3,7 @@
 SET ANSI_NULLS ON
 GO
 
+
 CREATE VIEW [Setup].[TightBufferSetupRecipe]
 AS
 SELECT        BasicProductConstruction.[New Oracle Part #], BasicProductConstruction.[Item No], BasicProductConstruction.[Fiber Type], BasicProductConstruction.[Jacket Material], BasicProductConstruction.[EZ Strip] AS EZStrip, 
@@ -18,7 +19,7 @@
                          tblCableConstructions.Binder1, tblCableConstructions.QtyBinder1, tblCableConstructions.Binder1LayLength, tblCableConstructions.Binder2, tblCableConstructions.QtyBinder2, tblCableConstructions.Binder2LayLength, 
                          tblCableConstructions.Binder3, tblCableConstructions.QtyBinder3, tblCableConstructions.Binder3LayLength, tblCableConstructions.CablePasses, tblCableConstructions.RevisionDate, tblCableConstructions.RevisionNumber, 
                          tblCableConstructions.RevisionHistory, tblCableConstructions.Instructions2, tblCableConstructions.Instructions, tblCableConstructionReferences.Active, tblTightBufferSetup.PSS, tblTightBufferSetup.Recipe, 
-                         vColor_Chip_Jacket_Material.ColorChip, tblTightBufferStripType.ID, tblTightBufferSetup.MachineGroupID, K.MachineName, BasicProductConstruction.Base
+                         vColor_Chip_Jacket_Material.ColorChip, tblTightBufferStripType.ID, tblTightBufferSetup.MachineGroupID, K.MachineName, BasicProductConstruction.Base, Filler, TBType
 FROM            tblCableConstructions INNER JOIN
                          dbo.BasicProductConstruction INNER JOIN
                          tblCableConstructionReferences ON BasicProductConstruction.Base = tblCableConstructionReferences.Base ON tblCableConstructions.BaseID = tblCableConstructionReferences.BaseID INNER JOIN
diff --git a/Views/dbo.qryBasePrint.sql b/Views/dbo.qryBasePrint.sql
index 92a8661..ecd8820 100644
--- a/Views/dbo.qryBasePrint.sql
+++ b/Views/dbo.qryBasePrint.sql
@@ -2,13 +2,12 @@
 GO
 SET ANSI_NULLS ON
 GO
-
 /*
 Author:		Bryan Eddy
 Date:		1/25/2018
 Desc:		View to show print for items
-Version:	1
-Update:		Addd concatenated print field
+Version:	2
+Update:		New logic for converting print line 4 to the new diamond jet syntax
 */
 
 CREATE VIEW [dbo].[qryBasePrint]
@@ -18,7 +17,16 @@
 						 , COALESCE([Print Line 1],'') + ' ' + COALESCE([print line 2],'') + ' ' + CASE WHEN [Print Item No] <> 0 THEN [Item No] + ' ' ELSE ' ' END 
 						+ COALESCE([Print Line 3],'') + ' ' 
 						+ CASE WHEN [Print Reel No] <> 0 THEN 'LOT ###### ' ELSE ' ' END + COALESCE([Print Line 4],'') AS ConcatPrintLine
-FROM            [Basic Product Construction]
+
+						 , COALESCE([Print Line 1],'') + ' ' + COALESCE([print line 2],'') + ' ' + CASE WHEN [Print Item No] <> 0 THEN [Item No] + ' ' ELSE ' ' END 
+						+ COALESCE([Print Line 3],'') + ' ' 
+						+ CASE WHEN [Print Reel No] <> 0 THEN 'LOT ###### ' ELSE ' ' END + COALESCE(DiamondJetPrintLine4Code,'') AS ConcatPrintLineDiamondJet
+						,p.DiamondJetPrintLine4Code, K.[Print Spacing] AS Spacing, c.NominalOD
+
+FROM            [Basic Product Construction] k left JOIN dbo.PrintLine4 i ON i.Line4PrintCode = k.NewPrintLine4 AND i.Line4Print = k.[Print Line 4]
+				left JOIN dbo.PrintLine4Codes p ON p.Line4PrintCode = i.Line4PrintCode
+				left JOIN dbo.tblCableConstructionReferences l ON l.Base = k.Base
+				left JOIN dbo.tblCableConstructions c ON c.BaseID = l.BaseID
 --UNION ALL
 --SELECT        [Print Line 1] AS PrintLine1, RTRIM([Customer]) AS Cust, [Print Line 2] AS PrintLine2, [Print Line 3] AS PrintLine3, LEFT([Item No], 2) AS CabFam, 
 --                         [New Oracle Part Number] AS Oracle, [Print Line 4] AS PrintLine4, [Print Item No], [Print Type (base)], [Print Reel No], [Item No], OracleStatus,[NewPrintLine4]
diff --git a/Views/dbo.vBasic_Prod_plus_Basic_Sheath.sql b/Views/dbo.vBasic_Prod_plus_Basic_Sheath.sql
index 9021b1c..1eb5b34 100644
--- a/Views/dbo.vBasic_Prod_plus_Basic_Sheath.sql
+++ b/Views/dbo.vBasic_Prod_plus_Basic_Sheath.sql
@@ -2,13 +2,79 @@
 GO
 SET ANSI_NULLS ON
 GO
-
-
+/*
+Author:		Bryan Eddy
+Date:		5/3/2018
+Desc:		View for scheduling
+Version:	2
+Update:		Added coalesce statement to display a print message if jkt00106 or jkt00105
+*/
 
 CREATE VIEW [dbo].[vBasic_Prod_plus_Basic_Sheath]
-as
+AS
 
-SELECT tblCableConstructions.CM AS CenterMember, tblCableConstructions.JacketMaterial AS [Jacket Material], vSchedulingCableUnion.*, tblCableConstructions.JacketMaterial AS JacketMat
+SELECT I.CM AS CenterMember, I.JacketMaterial AS [Jacket Material], E.[item no],
+        E.[customer part#],
+        E.customer,
+        E.[print type (base)],
+		J.PrinterNote,
+        E.[new oracle part #],
+        E.base,
+        E.[jacket color],
+        E.[print line 1],
+        E.[print line 2],
+        E.[print line 3],
+        E.[print line 4],
+        E.[print reel no],
+        E.[print item no],
+        E.[print spacing],
+        E.[1st req freq],
+        E.[2nd req freq],
+        E.[Fiber Type],
+        E.[Base Oracle],
+        E.active,
+        E.[revision date],
+        E.[revision history],
+        E.Fiber2,
+        E.PID,
+        E.oraclestatus,
+        E.enumber,
+        E.Fiber3,
+        E.customerrev,
+        E.Location,
+        E.StdOp,
+        E.Fiber,
+        E.[1st Req Freq - A],
+        E.[1st Max Atten - A],
+        E.[1st Min BandW - A],
+        E.[2nd Req Freq - A],
+        E.[2nd Max Atten - A],
+        E.[2nd Min BandW - A],
+        E.[1st Req Freq - B],
+        E.[1st Max Atten - B],
+        E.[1st Min BandW - B],
+        E.[2nd Req Freq - B],
+        E.[2nd Max Atten - B],
+        E.[2nd Min BandW - B],
+        E.[1st Req Freq - C],
+        E.[1st Max Atten - C],
+        E.[1st Min BandW - C],
+        E.[2nd Req Freq - C],
+        E.[2nd Max Atten - C],
+        E.[2nd Min BandW - C],
+        E.[Print Height],
+        E.[FRP Dia],
+        E.[color chip id],
+        E.CustomerInstructions,
+        E.[tb nominal od],
+        E.[tb od tol  (-)],
+        E.[tb od tol  (+)],
+        E.[ez strip],
+        E.[tb material],
+        E.[tb chips type],
+        E.[unit series],
+        E.SpecialInstructions1,
+        E.SpecialInstructions2, I.JacketMaterial AS JacketMat
       ,[DesignCode]
       ,[DesignExtension]
       ,[ConstructionDescription]
@@ -32,12 +98,14 @@
       ,[TensileApplication]
 	  ,[CablePasses]
       ,[StandardOperation]
-      ,[JacketMaterial]
+      ,I.[JacketMaterial]
       ,[NominalOD]
       ,[CM]
       ,[CMMaterial]
       ,[HelixFactor]
-FROM (vSchedulingCableUnion INNER JOIN tblCableConstructionReferences ON vSchedulingCableUnion.Base = tblCableConstructionReferences.Base) INNER JOIN tblCableConstructions ON tblCableConstructionReferences.BaseID = tblCableConstructions.BaseID;
+FROM (vSchedulingCableUnion E INNER JOIN tblCableConstructionReferences ON E.Base = tblCableConstructionReferences.Base) 
+	INNER JOIN tblCableConstructions I ON tblCableConstructionReferences.BaseID = I.BaseID
+	LEFT JOIN dbo.tblJacketMaterials J ON J.JacketMaterial = I.JacketMaterial
 
 
 
diff --git a/Views/dbo.vBurnListingBase.sql b/Views/dbo.vBurnListingBase.sql
index aae1857..0ec9f10 100644
--- a/Views/dbo.vBurnListingBase.sql
+++ b/Views/dbo.vBurnListingBase.sql
@@ -6,7 +6,7 @@
 AS
 SELECT        dbo.tblBurnListing.ListingCompany, dbo.tblBurnListing.Base, dbo.tblBurnListing.ListingTab, dbo.tblBurnListing.ListingSection, 
                          dbo.tblBurnListing.ListingConstruction, dbo.tblBurnListingConstruction.ConstructionID, dbo.tblBurnListingRating.Rating, dbo.tblBurnListingRatingReference.US, 
-                         dbo.tblBurnListingRatingReference.Canada
+                         dbo.tblBurnListingRatingReference.Canada, Priority
 FROM            dbo.tblBurnListing INNER JOIN
                          dbo.tblBurnListingConstruction ON dbo.tblBurnListing.ListingConstruction = dbo.tblBurnListingConstruction.ListingConstruction AND 
                          dbo.tblBurnListing.ListingSection = dbo.tblBurnListingConstruction.ListingSection AND 
diff --git a/Views/dbo.vCosntructionReferenceActiveDesignCodeExtensions.sql b/Views/dbo.vCosntructionReferenceActiveDesignCodeExtensions.sql
index 0102664..f9c4ef7 100644
--- a/Views/dbo.vCosntructionReferenceActiveDesignCodeExtensions.sql
+++ b/Views/dbo.vCosntructionReferenceActiveDesignCodeExtensions.sql
@@ -15,6 +15,6 @@
 AS
 SELECT  DISTINCT DesignExtension
 FROM dbo.tblCableConstructionReferences
-WHERE DesignExtension IS NOT NULL AND Active = 1
+WHERE DesignExtension IS NOT NULL AND Active = 1 AND ReleasedDesign = 1
 
 GO
diff --git a/Views/dbo.vFiber.sql b/Views/dbo.vFiber.sql
index 75e7fd5..ad68caa 100644
--- a/Views/dbo.vFiber.sql
+++ b/Views/dbo.vFiber.sql
@@ -5,7 +5,7 @@
 CREATE VIEW [dbo].[vFiber]
 AS
 SELECT        Fiber, [SM/MM], BIF, OM#, SpecialNotes, Fiber_Type, Alt1_Fiber_Type, Alt2_Fiber_Type, Alt3_Fiber_Type, Alt4_Fiber_Type, Description_Oracle, Active, Mode, 
-                         Vendor, TBCatalogType, OpticalID, FiberID, ITU
+                         Vendor, TBCatalogType, OpticalID,  ITU
 FROM            dbo.tbl_Fibers
 GO
 EXEC sp_addextendedproperty N'MS_DiagramPane1', N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
diff --git a/Views/dbo.vVendorSpecificPrint.sql b/Views/dbo.vVendorSpecificPrint.sql
new file mode 100644
index 0000000..26f7c34
--- /dev/null
+++ b/Views/dbo.vVendorSpecificPrint.sql
@@ -0,0 +1,21 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+/*
+Author:		Bryan Eddy
+Date:		5/8/2018
+Desc:		Show print for vedor specific fiber items.  Replace vCorningPrintFiberExtension
+Version:	1
+Update:		n/a
+*/
+
+CREATE VIEW [dbo].[vVendorSpecificPrint]
+AS
+SELECT        DISTINCT i.FiberExtensions, i.CorningPrint VendorSpecificPrint, i.FiberLetter
+			,v.VendorName
+FROM            dbo.tblFiberExtensions k  RIGHT JOIN
+                         dbo.tbl_Fibers j  ON k.Fiber = j.Fiber RIGHT JOIN
+                         dbo.tblCorningPrint i ON k.FiberExtension = i.FiberExtensions
+				INNER JOIN dbo.Vendors v ON v.VendorGUID = i.VendorGUID
+GO
