diff --git a/Functions/dbo.GetBurnVerticalTrayTestLength.sql b/Functions/dbo.GetBurnVerticalTrayTestLength.sql
new file mode 100644
index 0000000..82a8da5
--- /dev/null
+++ b/Functions/dbo.GetBurnVerticalTrayTestLength.sql
@@ -0,0 +1,36 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+/*
+Author:		Bryan Eddy
+Date:		2/28/2018
+Desc:		Calculate Vertical Tray Test IEEE 1202 
+Version:	1
+Update:		Initial creation
+Note:		Calculation is based on Vertical Tray Test IEEE 1202
+			Length = 2.438 * N
+			N = Number of Cables Per Bundle * Number of Bundles in Tray
+*/
+
+
+CREATE FUNCTION [dbo].[GetBurnVerticalTrayTestLength]
+(	
+	-- Add the parameters for the function here
+	@NominalODmm DECIMAL(8,5)
+)
+RETURNS  
+@BurnLength TABLE (
+Length_Meters  INT
+)
+AS
+BEGIN 
+	INSERT INTO @BurnLength
+	SELECT CEILING(2.438 * (K.NumberOfCablesPerBundles*K.NumberOfBundles)*2*1.1)
+	FROM dbo.BurnTestVerticalTray K
+	WHERE @NominalODmm >= K.FromNominalODmm AND @NominalODmm < K.ToNominalODmm
+	RETURN
+END 
+
+GO
diff --git a/Functions/dbo.GetExistingOracleItemByBase.sql b/Functions/dbo.GetExistingOracleItemByBase.sql
new file mode 100644
index 0000000..47c246d
--- /dev/null
+++ b/Functions/dbo.GetExistingOracleItemByBase.sql
@@ -0,0 +1,37 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+/*
+-- =============================================
+Author:			Bryan Eddy
+Date:			2/28/2018
+Desc:			Get an existing items by base.  Calculations based on Oracle data must exist in the oracle information.
+				This will be used to get a differing base item for BOM calculations
+-- =============================================
+*/
+CREATE FUNCTION [dbo].[GetExistingOracleItemByBase]
+(	
+	-- Add the parameters for the function here
+	@Item nvarchar(50)
+)
+returns
+@ExistingItem table
+(
+   -- Returned table layout
+   ExistingItem NVARCHAR(50)
+
+)
+
+AS
+BEGIN
+INSERT INTO @ExistingItem(ExistingItem)
+SELECT DISTINCT TOP 1 Existing.Oracle--, new.Oracle, Existing.BASE, Existing.DateCreated
+FROM dbo.AFLPRD_BOMInvComp_CAB k INNER JOIN dbo.CableUnion Existing ON Existing.Oracle = K.AssemblyItemNumber
+INNER JOIN dbo.CableUnion New ON Existing.BASE = New.BASE
+WHERE New.Oracle NOT LIKE '%OSP%' AND NEW.Oracle = @Item
+ORDER BY Existing.Oracle DESC
+
+RETURN
+END
+GO
diff --git a/Functions/dbo.fn_ExplodeRoute.sql b/Functions/dbo.fn_ExplodeRoute.sql
new file mode 100644
index 0000000..a188416
--- /dev/null
+++ b/Functions/dbo.fn_ExplodeRoute.sql
@@ -0,0 +1,40 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+CREATE FUNCTION [dbo].[fn_ExplodeRoute] 
+(
+-- Input parameters
+   @FinishedGood varchar(100)
+)
+returns
+@BOM table
+(
+   -- Returned table layout
+   FinishedGood varchar(100),
+   AssemblyItemNumber varchar(100), 
+   ComponentItemNumber varchar(100),
+   TrueOperationCode VARCHAR(100)
+	
+)
+as
+begin
+      -- add current level
+   insert into @BOM
+   select g.AssemblyItemNumber, g.AssemblyItemNumber, ComponentItemNumber , i.TrueOperationCode
+     from AFLPRD_BOMInvComp_CAB G INNER JOIN AFLPRD_INVSysItemCost_CAB K ON G.AssemblyItemNumber = K.ItemNumber  
+		INNER JOIN dbo.AFLPRD_BOMOpSeq_CAB i ON i.AssemblyItemNumber = g.AssemblyItemNumber AND i.AlternateRoutingDesignator = g.AlternateBOMDesignator
+		AND i.OperationSeqNum = g.OperationSeqNumber
+   where g.AssemblyItemNumber = @FinishedGood AND LEN(EffectivityDateTo) > 0 and AlternateBOMDesignator is null
+
+    --explode downward
+   insert into @BOM
+   select c.FinishedGood, n.AssemblyItemNumber, n.ComponentItemNumber, n.TrueOperationCode 
+   from @BOM c
+   cross apply dbo.[fn_ExplodeRoute](c.ComponentItemNumber) n
+  return
+end
+
+
+
+GO
diff --git a/Functions/dbo.usf_BOM_Weight.sql b/Functions/dbo.usf_BOM_Weight.sql
index 28482fc..42ae7b2 100644
--- a/Functions/dbo.usf_BOM_Weight.sql
+++ b/Functions/dbo.usf_BOM_Weight.sql
@@ -56,7 +56,7 @@
 			END
 			AS Weight_kg_m
 
-		FROM  [dbo].[fn_ExplodeBOM](@Item) AS e 
+		FROM  [dbo].[fn_ExplodeBOM]((SELECT * FROM GetExistingOracleItemByBase(@Item)))  e 
 		INNER JOIN dbo.[AFLPRD_INVSysItemCost_CAB] s ON e.ComponentItemNumber = s.ItemNumber
 		LEFT OUTER JOIN [dbo].[tblMaterialWeightsMetersUOM] m ON e.ComponentItemNumber = m.Material
 		GROUP BY e.FinishedGood,e.[PrimaryUOM],e.ComponentItemNumber,ExtendedQuantityPer,s.Make_Buy,m.density
diff --git a/Stored Procedures/Schedule.usp_EmailInactiveItemsOnSchedule.sql b/Stored Procedures/Schedule.usp_EmailInactiveItemsOnSchedule.sql
new file mode 100644
index 0000000..442a5e5
--- /dev/null
+++ b/Stored Procedures/Schedule.usp_EmailInactiveItemsOnSchedule.sql
@@ -0,0 +1,46 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+/*
+Author:		Bryan Eddy
+Date:		4/2/2018
+Desc:		Send list of inactive items on the schedule to premise product engineering to review
+Revision:	1
+Update:		n/a
+*/
+
+CREATE PROCEDURE	[Schedule].[usp_EmailInactiveItemsOnSchedule]
+as
+DECLARE @html nvarchar(MAX),
+ @ReceipientList NVARCHAR(1000),
+ @NumRows VARCHAR(1000),
+ @Table NVARCHAR(1000),
+ @Qry NVARCHAR(1000)
+ SET @Table = 'Schedule.vInactiveItems'
+ SET @NumRows = 'SELECT COUNT(*) FROM ' + @Table
+ EXEC (@NumRows)
+
+IF @NumRows > 0
+	BEGIN
+    
+		SET @Qry = 'SELET * FROM ' + @Table
+
+		EXEC dbo.usp_QueryToHtmlTable @html = @html OUTPUT,  @query = @Qry, @orderBy = N'[Promise Date]';
+
+		SET @ReceipientList = (STUFF((SELECT ';' + UserEmail 
+								FROM tblConfiguratorUser G  INNER JOIN users.UserResponsibility  K ON  G.UserID = K.UserID
+  								WHERE K.ResponsibilityID in (5,15) FOR XML PATH('')),1,1,''))
+
+						EXEC msdb.dbo.sp_send_dbmail 
+						@recipients=@ReceipientList,
+						@blind_copy_recipients = 'bryan.eddy@aflglobal.com',
+						@subject = 'Inactive Items on Premise Schedule',
+						@body = @html,
+						@body_format = 'HTML',
+						@query_no_truncate = 1,
+						@attach_query_result_as_file = 0;
+
+end
+
+GO
diff --git a/Stored Procedures/dbo.usp_CutSheet_Email_Reminder.sql b/Stored Procedures/dbo.usp_CutSheet_Email_Reminder.sql
index 71392b8..159f388 100644
--- a/Stored Procedures/dbo.usp_CutSheet_Email_Reminder.sql
+++ b/Stored Procedures/dbo.usp_CutSheet_Email_Reminder.sql
@@ -2,18 +2,20 @@
 GO
 SET ANSI_NULLS ON
 GO
+
 /*
 -- =============================================
 -- Author:		Bryan Eddy
 -- ALTER date:	2/15/2017
 -- Description:	Send out emails to notify approvers of constructions awaiting for approval.
-	Version:	1
-	Update:		Added in a date differential to give more time before notification
+	Version:	2
+	Update:		1. Added in a date differential to give more time before notification
+				2. Put results into a table with differential of days the request has been open.
 -- =============================================
 */
 CREATE PROCEDURE [dbo].[usp_CutSheet_Email_Reminder]
 
-@ApproverType AS TINYINT
+
 AS
 
 EXECUTE AS USER = 'dbo' 
@@ -27,40 +29,60 @@
 
 
 --Check if any open item requests need commercial approval
+IF OBJECT_ID(N'tempdb..#Results', N'U') IS NOT NULL
+DROP TABLE #Results;
+SELECT ItemRequested, Base, RequestedDate, Requestor, DATEDIFF(DAY,RequestedDate,GETDATE()) DaysOpen, CASE WHEN Commercial_Approval = 1 THEN 'Yes' ELSE 'No' END ApprovedByCommercial
+, CASE WHEN Technical_Approval = 1 THEN 'Yes' ELSE 'No' END	ApprovedByEngineer
+INTO #Results
+FROM tblCutSheetApproval
+WHERE Requested = 1 AND (Technical_Approval =0 OR Commercial_Approval = 0) and DATEDIFF(DD,RecordCreationDate,GETDATE()) > 3
 
-IF @ApproverType = 2
-BEGIN
-	SELECT @numRows =COUNT(*)
-	FROM tblCutSheetApproval
-	WHERE Requested = 1 AND Commercial_Approval =0 AND DATEDIFF(DD,RecordCreationDate,GETDATE()) > 3
-END
+SET @ReceipientList = (STUFF((SELECT ';' + UserEmail FROM tblConfiguratorUser I
+						INNER JOIN Users.UserResponsibility K ON K.UserID = I.UserID
+						 WHERE k.ResponsibilityID IN (2,3) FOR XML PATH('')),1,1,''))
 
-IF @ApproverType = 1
-BEGIN
-	SELECT @numRows =COUNT(*)
-	FROM tblCutSheetApproval
-	WHERE Requested = 1 AND Technical_Approval =0 AND DATEDIFF(DD,RecordCreationDate,GETDATE()) > 3
-END
-
-
-SET @ReceipientList = (STUFF((SELECT ';' + UserEmail FROM tblConfiguratorUser WHERE CutSheetApprover = @ApproverType AND UserTypeID = 2 FOR XML PATH('')),1,1,''))
+SELECT @numRows = COUNT(*) FROM #Results
 
 DECLARE @body1 VARCHAR(MAX)
 DECLARE @subject VARCHAR(MAX)
-SET @subject = 'PAST DUE - Premise Cut Sheet Request ' 
+DECLARE @query VARCHAR(MAX) = N'SELECT * FROM tempdb..#Results;'
+SET @subject = 'PAST DUE - Premise Cut Sheet Request ' + CAST(GETDATE() AS NVARCHAR)
 SET @body1 = 'There are  ' + CAST(@numRows AS NVARCHAR) + ' constructions awaiting approval.  Please review.' +CHAR(13)+CHAR(13)
+
 
 
 DECLARE @tableHTML  NVARCHAR(MAX) ;
 IF @numRows > 0
 BEGIN
 	
-			SET @tableHTML =
-				N'<H1>Premise Cut Sheet Approval</H1>' +
+				SET @tableHTML =
+				N'<H1>Open Cut Sheet Approval Report</H1>' +
 				N'<p>'+@body1+'</p>' +
+				N'<p class=MsoNormal><span style=''font-size:11.0pt;font-family:"Calibri","sans-serif";color:#1F497D''>'+
+				N'<table border="1">' +
+				N'<tr><th>Base</th><th>Item</th><th>Days Open</th>' +
+				N'<th>Requestor</th><th>Approved By Commercial</th>' +
+				N'<th>Approved by Engineer</th></tr>' +
+				CAST ( ( SELECT		td=Base,       '',
+									td=ItemRequested, '',
+									td=DaysOpen, '',
+									td=Requestor,'',
+									td=ApprovedByCommercial,'',
+									td=ApprovedByEngineer,''
+
+							FROM #Results 
+							ORDER BY DaysOpen desc
+						  FOR XML PATH('tr'), TYPE 
+				) AS NVARCHAR(MAX) ) +
 				N'</table>' ;
+			--SET @tableHTML =
+			--	N'<H1>Premise Cut Sheet Approval</H1>' +
+			--	N'<p>'+@body1+'</p>' +
+			--	N'</table>' ;
 		
-			EXEC msdb.dbo.sp_send_dbmail @recipients=@ReceipientList,
+			EXEC msdb.dbo.sp_send_dbmail 
+			@recipients=@ReceipientList,
+			--@recipients = 'Bryan.Eddy@aflglobal.com',
 			@blind_copy_recipients = 'Bryan.Eddy@aflglobal.com',
 			@subject = @subject,
 			@body = @tableHTML,
diff --git a/Stored Procedures/dbo.usp_EmailActiveItemsWithObsoleteComponents.sql b/Stored Procedures/dbo.usp_EmailActiveItemsWithObsoleteComponents.sql
index 3415005..3a9d621 100644
--- a/Stored Procedures/dbo.usp_EmailActiveItemsWithObsoleteComponents.sql
+++ b/Stored Procedures/dbo.usp_EmailActiveItemsWithObsoleteComponents.sql
@@ -40,7 +40,7 @@
 
 SET @ReceipientList = (STUFF((SELECT ';' + UserEmail 
 						FROM tblConfiguratorUser G  INNER JOIN users.UserResponsibility  K ON  G.UserID = K.UserID
-  						WHERE K.ResponsibilityID = 5 FOR XML PATH('')),1,1,''))
+  						WHERE K.ResponsibilityID IN(5) FOR XML PATH('')),1,1,''))
 						--WHERE g.UserTypeID = 1 FOR XML PATH('')),1,1,''))
 
 DECLARE @body1 VARCHAR(MAX)
diff --git a/Stored Procedures/dbo.usp_GetWhereUsedMaterials.sql b/Stored Procedures/dbo.usp_GetWhereUsedMaterials.sql
index 7d6449a..f1aaf7d 100644
--- a/Stored Procedures/dbo.usp_GetWhereUsedMaterials.sql
+++ b/Stored Procedures/dbo.usp_GetWhereUsedMaterials.sql
@@ -38,17 +38,18 @@
 
 --Shows orders for all FG contianing materials from the queried list.  Also shows where there have been no orders.
 SELECT DISTINCT Material, AssemblyItemNumber, round(sum(ComponentQuantity),6) MaterialQuantity_PerPrimaryUOM--,CategoryName
-,round(sum(ComponentQuantity),3) *CASE WHEN S.UOM = 'FT' THEN ROUND(S.QUANTITY / 3.281,0) ELSE S.QUANTITY END as MaterialQuanitty_PerOrder, PrimaryUOM,p.Item_Status
+,round(sum(ComponentQuantity),7) *CASE WHEN S.UNIT_OF_MEASURE = 'FT' THEN ROUND(S.QUANTITY / 3.281,7) ELSE S.QUANTITY END as MaterialQuanitty_PerOrder, PrimaryUOM,p.Item_Status
 --, CASE WHEN CategoryName like '%premise%' THEN 'Premise' ELSE 'ACS' END BU
-, S.Customer, S.SO_NUMBER as OrderNum,s.DATE as Shipped
-,CASE WHEN S.UOM = 'FT' THEN ROUND(S.QUANTITY / 3.281,0) ELSE S.QUANTITY END as Quantity, CASE WHEN S.UOM = 'FT' THEN 'M' ELSE S.UOM END as QTY_UOM, s.REVENUE
+, S.BILL_TO_NAME Customer, S.ORDER_NUMBER as OrderNum,S.PROMISE_DATE as Shipped
+,CASE WHEN S.UNIT_OF_MEASURE = 'FT' THEN ROUND(S.QUANTITY / 3.281,0) ELSE S.QUANTITY END as Quantity, CASE WHEN S.UNIT_OF_MEASURE = 'FT' THEN 'M' ELSE S.UNIT_OF_MEASURE END as QTY_UOM, s.REVENUE
+,p.Description
 INTO ##MaterialUsage
 FROM #TempFG T --INNER JOIN AFLPRD_INVItmCatg_CAB G ON G.ItemNumber = T.AssemblyItemNumber 
 INNER JOIN AFLPRD_INVSysItem_CAB K ON K.ItemNumber = t.AssemblyItemNumber
 INNER JOIN AFLPRD_INVSysItemCost_CAB P ON P.ItemNumber = K.ItemNumber
-LEFT JOIN [SalesHistory_BI_Data] S ON S.ITEM_NUMBER = K.ItemNumber
+LEFT JOIN oracle.MarginRevenueExtractSalesHistory S ON S.ITEM_NUMBER = K.ItemNumber
 GROUP BY  Material, AssemblyItemNumber, PrimaryUOM,--CategorySetName,CategoryName,
-TemplateName,Item_Status, S.Customer, S.SO_NUMBER, S.QUANTITY, s.DATE, S.UOM,s.REVENUE
+TemplateName,Item_Status, S.BILL_TO_NAME, S.ORDER_NUMBER, S.QUANTITY, s.PROMISE_DATE, S.UNIT_OF_MEASURE,s.REVENUE,p.Description
 --HAVING shipped like '201[76]%'
 ORDER BY Shipped desc
 
diff --git a/Stored Procedures/dbo.usp_MTY_ObsoleteComponentNotification.sql b/Stored Procedures/dbo.usp_MTY_ObsoleteComponentNotification.sql
index d48a5aa..931c5a6 100644
--- a/Stored Procedures/dbo.usp_MTY_ObsoleteComponentNotification.sql
+++ b/Stored Procedures/dbo.usp_MTY_ObsoleteComponentNotification.sql
@@ -8,7 +8,7 @@
 -- Description:	Send out emails to notify approvers of constructions awaiting for approval.
 -- Job has been ALTERd to run automatically with these notifications
 -- =============================================
-CREATE PROCEDURE [dbo].[usp_MTY_ObsoleteComponentNotification]
+CREATE PROC [dbo].[usp_MTY_ObsoleteComponentNotification]
 
 
 AS
@@ -26,10 +26,18 @@
 IF OBJECT_ID(N'tempdb..#Results', N'U') IS NOT NULL
 DROP TABLE #Results;
 
-SELECT DISTINCT   ComponentItemNumber,Description, AssemblyItemStatus, CompItemStatus, NewItem--, AssemblyItemNumber
+WITH cteInventory
+AS(
+	SELECT Item, SUM(QTY) AS Quantity, [Org Code]
+	FROM dbo.AFLPRD_onhandqty_STD_81_ALL 
+	GROUP BY [Org Code], Item
+	HAVING [Org Code] = 'MTY'
+)
+SELECT DISTINCT   ComponentItemNumber,Description, AssemblyItemStatus, CompItemStatus, COALESCE(NewItem,'') NewItem, COALESCE(i.Quantity,'') QuantityOnHand, COALESCE(i.[Org Code],'') AS Org
 INTO #Results
 FROM AFLPRD_BOMInvComp_MTY K INNER JOIN AFLPRD_INVSysItemCost_CAB G ON K.ComponentItemNumber = G.ItemNumber
 LEFT JOIN PCN_History P ON P.OldItem = ComponentItemNumber
+LEFT JOIN cteInventory i ON i.Item = G.ItemNumber
 WHERE Item_Status <>'active' and AssemblyItemStatus = 'active' AND NewItem IS NULL
 
 SELECT @numRows = count(*) FROM #Results
@@ -42,7 +50,7 @@
 declare @body1 varchar(max)
 declare @subject varchar(max)
 declare @query varchar(max) = N'SELECT * FROM tempdb..#Results;'
-set @subject = 'MTY ALERT - Inactive Components in BOM' 
+set @subject = 'MTY ALERT - Inactive Components in BOM ' + CAST(GETDATE() AS NVARCHAR)
 set @body1 = 'There are  ' + CAST(@numRows AS NVARCHAR) + ' inactive components in MTY BOMs.  Please review.' +char(13)+CHAR(13)
 
 DECLARE @tableHTML  NVARCHAR(MAX) ;
@@ -55,12 +63,15 @@
 				N'<p class=MsoNormal><span style=''font-size:11.0pt;font-family:"Calibri","sans-serif";color:#1F497D''>'+
 				N'<table border="1">' +
 				N'<tr><th>ComponentItemNumber</th><th>Description</th>' +
-				N'<th>AssemblyItemStatus</th><th>CompItemStatus</th><th>NewItem</th></tr>' +
+				N'<th>AssemblyItemStatus</th><th>CompItemStatus</th><th>NewItem</th>' +
+				N'<th>Quantity On Hand</th><th>Org</th></tr>' +
 				CAST ( ( SELECT		td=ComponentItemNumber,       '',
 									td=Description,       '',
 									td=AssemblyItemStatus, '',
 									td=CompItemStatus, '',
-									td=NewItem, ''
+									td=NewItem, '',
+									td=QuantityOnHand, '',
+									td=Org,''
 							FROM #Results 
 						  FOR XML PATH('tr'), TYPE 
 				) AS NVARCHAR(MAX) ) +
@@ -72,6 +83,7 @@
 		
 			EXEC msdb.dbo.sp_send_dbmail 
 			@recipients=@Receipientlist,
+			--@recipients = 'Bryan.Eddy@aflglobal.com',
 			@blind_copy_recipients = 'Bryan.Eddy@aflglobal.com',
 			@subject = @subject,
 			@body = @tableHTML,
diff --git a/Stored Procedures/dbo.usp_MissingSpecsNotification.sql b/Stored Procedures/dbo.usp_MissingSpecsNotification.sql
index 64b7935..98ff5b2 100644
--- a/Stored Procedures/dbo.usp_MissingSpecsNotification.sql
+++ b/Stored Procedures/dbo.usp_MissingSpecsNotification.sql
@@ -36,8 +36,10 @@
 
 
 
-SET @ReceipientList = (STUFF((SELECT ';' + UserEmail FROM tblConfiguratorUser WHERE ItemBuilder <> 0 FOR XML PATH('')),1,1,''))
 
+SET @ReceipientList = (STUFF((SELECT ';' + UserEmail 
+						FROM tblConfiguratorUser G  INNER JOIN users.UserResponsibility  K ON  G.UserID = K.UserID
+  						WHERE K.ResponsibilityID = 5 FOR XML PATH('')),1,1,''))
 declare @body1 varchar(max)
 declare @subject varchar(max)
 declare @query varchar(max) = N'SELECT * FROM tempdb..#Results;'
diff --git a/Stored Procedures/dbo.usp_QueryToHtmlTable.sql b/Stored Procedures/dbo.usp_QueryToHtmlTable.sql
new file mode 100644
index 0000000..ee95f0d
--- /dev/null
+++ b/Stored Procedures/dbo.usp_QueryToHtmlTable.sql
@@ -0,0 +1,55 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+
+
+-- Description: Turns a query into a formatted HTML table. Useful for emails. 
+-- Any ORDER BY clause needs to be passed in the separate ORDER BY parameter.
+-- =============================================
+CREATE PROC [dbo].[usp_QueryToHtmlTable] 
+(
+  @query NVARCHAR(MAX), --A query to turn into HTML format. It should not include an ORDER BY clause.
+  @orderBy NVARCHAR(MAX) = NULL, --An optional ORDER BY clause. It should contain the words 'ORDER BY'.
+  @html NVARCHAR(MAX) = NULL OUTPUT --The HTML output of the procedure.
+)
+AS
+BEGIN   
+  SET NOCOUNT ON;
+
+  IF @orderBy IS NULL BEGIN
+    SET @orderBy = ''  
+  END
+
+  SET @orderBy = REPLACE(@orderBy, '''', '''''');
+
+  DECLARE @realQuery NVARCHAR(MAX) = '
+    DECLARE @headerRow nvarchar(MAX);
+    DECLARE @cols nvarchar(MAX);    
+
+    SELECT * INTO #dynSql FROM (' + @query + ') sub;
+
+    SELECT @cols = COALESCE(@cols + '', '''''''', '', '''') + ''['' + name + ''] AS ''''td''''''
+    FROM tempdb.sys.columns 
+    WHERE object_id = object_id(''tempdb..#dynSql'')
+    ORDER BY column_id;
+
+    SET @cols = ''SET @html = CAST(( SELECT '' + @cols + '' FROM #dynSql ' + @orderBy + ' FOR XML PATH(''''tr''''), ELEMENTS XSINIL) AS nvarchar(max))''    
+
+    EXEC sys.sp_executesql @cols, N''@html nvarchar(MAX) OUTPUT'', @html=@html OUTPUT
+
+    SELECT @headerRow = COALESCE(@headerRow + '''', '''') + ''<th>'' + name + ''</th>'' 
+    FROM tempdb.sys.columns 
+    WHERE object_id = object_id(''tempdb..#dynSql'')
+    ORDER BY column_id;
+
+    SET @headerRow = ''<tr>'' + @headerRow + ''</tr>'';
+
+    SET @html = ''<table border="1">'' + @headerRow + @html + ''</table>'';    
+    ';
+
+  EXEC sys.sp_executesql @realQuery, N'@html nvarchar(MAX) OUTPUT', @html=@html OUTPUT
+END
+GO
diff --git a/Stored Procedures/dbo.usp_SalesHistoryUpdate_BI.sql b/Stored Procedures/dbo.usp_SalesHistoryUpdate_BI.sql
deleted file mode 100644
index 09a3b4a..0000000
--- a/Stored Procedures/dbo.usp_SalesHistoryUpdate_BI.sql
+++ /dev/null
@@ -1,115 +0,0 @@
-SET QUOTED_IDENTIFIER ON
-GO
-SET ANSI_NULLS ON
-GO
-/*	Author:		Bryan Eddy
-	Date:		12/11/2017
-	Desc:		Procedure to update the Sales History being
-	Rev:		2
-	Update:		Updated to MERGE statement and added error handling
-	
-	 */
-
-CREATE PROCEDURE [dbo].[usp_SalesHistoryUpdate_BI]
-as
-
-
---delete SalesHistory_BI_Data 
---FROM             sales_pivot_bi AS K INNER JOIN
---                         SalesHistory_BI_Data AS B ON K.SO_NUMBER = B.SO_NUMBER AND B.SO_LINE = K.SO_LINE 
---						 --AND COALESCE (K.SHIP_TO_POSTAL_CODE, '') = B.SHIP_TO_POSTAL_CODE AND B.SHIP_TO_STATE = COALESCE (K.SHIP_TO_STATE, '') 
---						 AND B.SHIP_TO_COUNTRY =  K.SHIP_TO_COUNTRY
-
-
-SET NOCOUNT ON;
-
-DECLARE @ErrorNumber INT = ERROR_NUMBER();
-DECLARE @ErrorLine INT = ERROR_LINE();
-	BEGIN TRY
-		BEGIN tran
-			;WITH cteSalesHistory
-			AS(
-			SELECT         K.BU, K.ORG, K.CALENDAR_QUARTER, K.FISCAL_QUARTER, K.Month, CAST(LEFT(K.[DATE],10) AS DATETIME) Date, K.CUSTOMER_CLUSTER, K.CUSTOMER, K.AGENT, K.CUSTOMER_CLASS, 
-								 K.CUSTOMER_CATEGORY, K.TERRITORY_MARKET, K.MARKET, K.CLUSTER_ACCOUNT, COALESCE (K.SHIP_TO_STATE, '') AS SHIP_TO_STATE, 
-								 COALESCE (K.SHIP_TO_COUNTRY, '') AS SHIP_TO_COUNTRY, COALESCE (K.SHIP_TO_POSTAL_CODE, '') AS SHIP_TO_POSTAL_CODE, K.ITEM_NUMBER, K.ITEM_DESCRIPTION, SUM(K.REVENUE)
-								 AS REVENUE, SUM(K.QUANTITY) AS QUANTITY, K.UOM, K.PO, K.SO_NUMBER, K.SO_LINE, K.CSR, K.PRODUCT_CATEGORY--, B.ITEM_NUMBER
-			--INTO #SalesHistory
-			FROM            sales_pivot_bi AS K 
-			GROUP BY K.BU, K.ORG, K.CALENDAR_QUARTER, K.FISCAL_QUARTER, K.Month, K.DATE, K.CUSTOMER_CLUSTER, K.CUSTOMER, K.AGENT, K.CUSTOMER_CLASS, 
-									 K.CUSTOMER_CATEGORY, K.TERRITORY_MARKET, K.MARKET, K.CLUSTER_ACCOUNT, K.SHIP_TO_STATE, K.SHIP_TO_COUNTRY, K.SHIP_TO_POSTAL_CODE, 
-									 K.ITEM_NUMBER, K.ITEM_DESCRIPTION, K.UOM, K.PO, K.SO_NUMBER, K.SO_LINE, K.CSR, K.PRODUCT_CATEGORY, K.ORG
-			HAVING       (K.ORG = 'cab') AND (K.SO_LINE IS NOT NULL)
-			)
-			MERGE SalesHistory_BI_Data AS Target
-			USING cteSalesHistory AS Source
-			ON ( Target.SO_NUMBER = Source.SO_NUMBER AND Source.SO_LINE = Target.SO_LINE 
-				AND COALESCE (Target.SHIP_TO_POSTAL_CODE, '') = Source.SHIP_TO_POSTAL_CODE AND Source.SHIP_TO_STATE = COALESCE (Target.SHIP_TO_STATE, '') 
-				AND Source.SHIP_TO_COUNTRY =  Target.SHIP_TO_COUNTRY AND Source.SO_NUMBER = Target.SO_NUMBER AND TARGET.SO_LINE = SOURCE.SO_LINE
-				AND Target.DATE = SOURCE.DATE AND TARGET.AGENT = Source.AGENT)
-			WHEN NOT MATCHED BY TARGET THEN
-				INSERT (BU, ORG, CALENDAR_QUARTER, FISCAL_QUARTER, Month, DATE, CUSTOMER_CLUSTER, CUSTOMER, AGENT, CUSTOMER_CLASS, CUSTOMER_CATEGORY, 
-								 TERRITORY_MARKET, MARKET, CLUSTER_ACCOUNT, SHIP_TO_STATE, SHIP_TO_COUNTRY, SHIP_TO_POSTAL_CODE, ITEM_NUMBER, ITEM_DESCRIPTION, 
-								 REVENUE, QUANTITY, UOM, PO, SO_NUMBER, SO_LINE, CSR, PRODUCT_CATEGORY)
-				VALUES (BU, ORG, CALENDAR_QUARTER, FISCAL_QUARTER, Month, DATE, CUSTOMER_CLUSTER, CUSTOMER, AGENT, CUSTOMER_CLASS, CUSTOMER_CATEGORY
-								, TERRITORY_MARKET, MARKET, CLUSTER_ACCOUNT, SHIP_TO_STATE ,SHIP_TO_COUNTRY, SHIP_TO_POSTAL_CODE, ITEM_NUMBER, ITEM_DESCRIPTION,
-								 REVENUE, QUANTITY, UOM, PO, SO_NUMBER, SO_LINE, CSR, PRODUCT_CATEGORY)
-			WHEN MATCHED THEN
-			UPDATE SET target.BU = Source.BU, 
-						Target.ORG  = Source.ORG ,
-						Target.CALENDAR_QUARTER  = Source.CALENDAR_QUARTER ,
-						Target.FISCAL_QUARTER  = Source.FISCAL_QUARTER ,
-						Target.Month  = Source.Month ,
-						Target.DATE  = Source.DATE ,
-						Target.CUSTOMER_CLUSTER  = Source.CUSTOMER_CLUSTER ,
-						Target.CUSTOMER  = Source.CUSTOMER ,
-						Target.AGENT  = Source.AGENT ,
-						Target.CUSTOMER_CLASS  = Source.CUSTOMER_CLASS ,
-						Target.CUSTOMER_CATEGORY  = Source.CUSTOMER_CATEGORY ,
-						Target.TERRITORY_MARKET  = Source.TERRITORY_MARKET ,
-						Target.MARKET  = Source.MARKET ,
-						Target.CLUSTER_ACCOUNT  = Source.CLUSTER_ACCOUNT ,
-						Target.SHIP_TO_STATE  = Source.SHIP_TO_STATE ,
-						Target.SHIP_TO_COUNTRY  = Source.SHIP_TO_COUNTRY ,
-						Target.SHIP_TO_POSTAL_CODE  = Source.SHIP_TO_POSTAL_CODE ,
-						Target.ITEM_NUMBER  = Source.ITEM_NUMBER ,
-						Target.ITEM_DESCRIPTION  = Source.ITEM_DESCRIPTION ,
-						Target.REVENUE  = Source.REVENUE ,
-						Target.QUANTITY  = Source.QUANTITY ,
-						Target.UOM  = Source.UOM ,
-						Target.PO  = Source.PO ,
-						Target.SO_NUMBER  = Source.SO_NUMBER ,
-						Target.SO_LINE  = Source.SO_LINE ,
-						Target.CSR  = Source.CSR ,
-						Target.PRODUCT_CATEGORY = Source.PRODUCT_CATEGORY
-					;
-				
-		COMMIT TRAN
-	END TRY
-	BEGIN CATCH
-		IF @@TRANCOUNT > 0
-		ROLLBACK TRANSACTION;
- 
-		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
-		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
- 
-		THROW;
-	END CATCH;
-
---INSERT INTO SalesHistory_BI_Data
---                         (BU, ORG, CALENDAR_QUARTER, FISCAL_QUARTER, Month, DATE, CUSTOMER_CLUSTER, CUSTOMER, AGENT, CUSTOMER_CLASS, CUSTOMER_CATEGORY, 
---                         TERRITORY_MARKET, MARKET, CLUSTER_ACCOUNT, SHIP_TO_STATE, SHIP_TO_COUNTRY, SHIP_TO_POSTAL_CODE, ITEM_NUMBER, ITEM_DESCRIPTION, 
---                         REVENUE, QUANTITY, UOM, PO, SO_NUMBER, SO_LINE, CSR, PRODUCT_CATEGORY)
---SELECT        K.BU, K.ORG, K.CALENDAR_QUARTER, K.FISCAL_QUARTER, K.Month, CAST(LEFT(K.[DATE],10) AS DATETIME), K.CUSTOMER_CLUSTER, K.CUSTOMER, K.AGENT, K.CUSTOMER_CLASS, 
---                         K.CUSTOMER_CATEGORY, K.TERRITORY_MARKET, K.MARKET, K.CLUSTER_ACCOUNT, COALESCE (K.SHIP_TO_STATE, '') AS Expr1, 
---                         COALESCE (K.SHIP_TO_COUNTRY, '') AS Expr2, COALESCE (K.SHIP_TO_POSTAL_CODE, '') AS Expr3, K.ITEM_NUMBER, K.ITEM_DESCRIPTION, SUM(K.REVENUE) 
---                         AS REVENUE, SUM(K.QUANTITY) AS QUANTITY, K.UOM, K.PO, K.SO_NUMBER, K.SO_LINE, K.CSR, K.PRODUCT_CATEGORY--, B.ITEM_NUMBER
---FROM            sales_pivot_bi AS K LEFT OUTER JOIN
---                         SalesHistory_BI_Data AS B ON K.SO_NUMBER = B.SO_NUMBER AND B.SO_LINE = K.SO_LINE 
---						 AND COALESCE (K.SHIP_TO_POSTAL_CODE, '') = B.SHIP_TO_POSTAL_CODE AND B.SHIP_TO_STATE = COALESCE (K.SHIP_TO_STATE, '') 
---						 AND B.SHIP_TO_COUNTRY =  K.SHIP_TO_COUNTRY
---GROUP BY K.BU, K.ORG, K.CALENDAR_QUARTER, K.FISCAL_QUARTER, K.Month, K.DATE, K.CUSTOMER_CLUSTER, K.CUSTOMER, K.AGENT, K.CUSTOMER_CLASS, 
---                         K.CUSTOMER_CATEGORY, K.TERRITORY_MARKET, K.MARKET, K.CLUSTER_ACCOUNT, K.SHIP_TO_STATE, K.SHIP_TO_COUNTRY, K.SHIP_TO_POSTAL_CODE, 
---                         K.ITEM_NUMBER, K.ITEM_DESCRIPTION, K.UOM, K.PO, K.SO_NUMBER, K.SO_LINE, K.CSR, K.PRODUCT_CATEGORY, K.ORG, B.ITEM_NUMBER
---HAVING       (B.ITEM_NUMBER IS NULL) AND 
---(K.ORG = 'cab') AND (K.SO_LINE IS NOT NULL) --AND (K.SO_NUMBER =  2107871)
-GO
diff --git a/Stored Procedures/dbo.usp_SalesHistoryUpdate_BI_DELETE.sql b/Stored Procedures/dbo.usp_SalesHistoryUpdate_BI_DELETE.sql
new file mode 100644
index 0000000..2118735
--- /dev/null
+++ b/Stored Procedures/dbo.usp_SalesHistoryUpdate_BI_DELETE.sql
@@ -0,0 +1,115 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+/*	Author:		Bryan Eddy
+	Date:		12/11/2017
+	Desc:		Procedure to update the Sales History being
+	Rev:		2
+	Update:		Updated to MERGE statement and added error handling
+	
+	 */
+
+CREATE PROCEDURE [dbo].[usp_SalesHistoryUpdate_BI_DELETE]
+as
+
+
+--delete SalesHistory_BI_Data 
+--FROM             sales_pivot_bi AS K INNER JOIN
+--                         SalesHistory_BI_Data AS B ON K.SO_NUMBER = B.SO_NUMBER AND B.SO_LINE = K.SO_LINE 
+--						 --AND COALESCE (K.SHIP_TO_POSTAL_CODE, '') = B.SHIP_TO_POSTAL_CODE AND B.SHIP_TO_STATE = COALESCE (K.SHIP_TO_STATE, '') 
+--						 AND B.SHIP_TO_COUNTRY =  K.SHIP_TO_COUNTRY
+
+
+SET NOCOUNT ON;
+
+DECLARE @ErrorNumber INT = ERROR_NUMBER();
+DECLARE @ErrorLine INT = ERROR_LINE();
+	BEGIN TRY
+		BEGIN tran
+			;WITH cteSalesHistory
+			AS(
+			SELECT         K.BU, K.ORG, K.CALENDAR_QUARTER, K.FISCAL_QUARTER, K.Month, CAST(LEFT(K.[DATE],10) AS DATETIME) Date, K.CUSTOMER_CLUSTER, K.CUSTOMER, K.AGENT, K.CUSTOMER_CLASS, 
+								 K.CUSTOMER_CATEGORY, K.TERRITORY_MARKET, K.MARKET, K.CLUSTER_ACCOUNT, COALESCE (K.SHIP_TO_STATE, '') AS SHIP_TO_STATE, 
+								 COALESCE (K.SHIP_TO_COUNTRY, '') AS SHIP_TO_COUNTRY, COALESCE (K.SHIP_TO_POSTAL_CODE, '') AS SHIP_TO_POSTAL_CODE, K.ITEM_NUMBER, K.ITEM_DESCRIPTION, SUM(K.REVENUE)
+								 AS REVENUE, SUM(K.QUANTITY) AS QUANTITY, K.UOM, K.PO, K.SO_NUMBER, K.SO_LINE, K.CSR, K.PRODUCT_CATEGORY--, B.ITEM_NUMBER
+			--INTO #SalesHistory
+			FROM            sales_pivot_bi AS K 
+			GROUP BY K.BU, K.ORG, K.CALENDAR_QUARTER, K.FISCAL_QUARTER, K.Month, K.DATE, K.CUSTOMER_CLUSTER, K.CUSTOMER, K.AGENT, K.CUSTOMER_CLASS, 
+									 K.CUSTOMER_CATEGORY, K.TERRITORY_MARKET, K.MARKET, K.CLUSTER_ACCOUNT, K.SHIP_TO_STATE, K.SHIP_TO_COUNTRY, K.SHIP_TO_POSTAL_CODE, 
+									 K.ITEM_NUMBER, K.ITEM_DESCRIPTION, K.UOM, K.PO, K.SO_NUMBER, K.SO_LINE, K.CSR, K.PRODUCT_CATEGORY, K.ORG
+			HAVING       (K.ORG = 'cab') AND (K.SO_LINE IS NOT NULL)
+			)
+			MERGE SalesHistory_BI_Data AS Target
+			USING cteSalesHistory AS Source
+			ON ( Target.SO_NUMBER = Source.SO_NUMBER AND Source.SO_LINE = Target.SO_LINE 
+				AND COALESCE (Target.SHIP_TO_POSTAL_CODE, '') = Source.SHIP_TO_POSTAL_CODE AND Source.SHIP_TO_STATE = COALESCE (Target.SHIP_TO_STATE, '') 
+				AND Source.SHIP_TO_COUNTRY =  Target.SHIP_TO_COUNTRY AND Source.SO_NUMBER = Target.SO_NUMBER AND TARGET.SO_LINE = SOURCE.SO_LINE
+				AND Target.DATE = SOURCE.DATE AND TARGET.AGENT = Source.AGENT)
+			WHEN NOT MATCHED BY TARGET THEN
+				INSERT (BU, ORG, CALENDAR_QUARTER, FISCAL_QUARTER, Month, DATE, CUSTOMER_CLUSTER, CUSTOMER, AGENT, CUSTOMER_CLASS, CUSTOMER_CATEGORY, 
+								 TERRITORY_MARKET, MARKET, CLUSTER_ACCOUNT, SHIP_TO_STATE, SHIP_TO_COUNTRY, SHIP_TO_POSTAL_CODE, ITEM_NUMBER, ITEM_DESCRIPTION, 
+								 REVENUE, QUANTITY, UOM, PO, SO_NUMBER, SO_LINE, CSR, PRODUCT_CATEGORY)
+				VALUES (BU, ORG, CALENDAR_QUARTER, FISCAL_QUARTER, Month, DATE, CUSTOMER_CLUSTER, CUSTOMER, AGENT, CUSTOMER_CLASS, CUSTOMER_CATEGORY
+								, TERRITORY_MARKET, MARKET, CLUSTER_ACCOUNT, SHIP_TO_STATE ,SHIP_TO_COUNTRY, SHIP_TO_POSTAL_CODE, ITEM_NUMBER, ITEM_DESCRIPTION,
+								 REVENUE, QUANTITY, UOM, PO, SO_NUMBER, SO_LINE, CSR, PRODUCT_CATEGORY)
+			WHEN MATCHED THEN
+			UPDATE SET target.BU = Source.BU, 
+						Target.ORG  = Source.ORG ,
+						Target.CALENDAR_QUARTER  = Source.CALENDAR_QUARTER ,
+						Target.FISCAL_QUARTER  = Source.FISCAL_QUARTER ,
+						Target.Month  = Source.Month ,
+						Target.DATE  = Source.DATE ,
+						Target.CUSTOMER_CLUSTER  = Source.CUSTOMER_CLUSTER ,
+						Target.CUSTOMER  = Source.CUSTOMER ,
+						Target.AGENT  = Source.AGENT ,
+						Target.CUSTOMER_CLASS  = Source.CUSTOMER_CLASS ,
+						Target.CUSTOMER_CATEGORY  = Source.CUSTOMER_CATEGORY ,
+						Target.TERRITORY_MARKET  = Source.TERRITORY_MARKET ,
+						Target.MARKET  = Source.MARKET ,
+						Target.CLUSTER_ACCOUNT  = Source.CLUSTER_ACCOUNT ,
+						Target.SHIP_TO_STATE  = Source.SHIP_TO_STATE ,
+						Target.SHIP_TO_COUNTRY  = Source.SHIP_TO_COUNTRY ,
+						Target.SHIP_TO_POSTAL_CODE  = Source.SHIP_TO_POSTAL_CODE ,
+						Target.ITEM_NUMBER  = Source.ITEM_NUMBER ,
+						Target.ITEM_DESCRIPTION  = Source.ITEM_DESCRIPTION ,
+						Target.REVENUE  = Source.REVENUE ,
+						Target.QUANTITY  = Source.QUANTITY ,
+						Target.UOM  = Source.UOM ,
+						Target.PO  = Source.PO ,
+						Target.SO_NUMBER  = Source.SO_NUMBER ,
+						Target.SO_LINE  = Source.SO_LINE ,
+						Target.CSR  = Source.CSR ,
+						Target.PRODUCT_CATEGORY = Source.PRODUCT_CATEGORY
+					;
+				
+		COMMIT TRAN
+	END TRY
+	BEGIN CATCH
+		IF @@TRANCOUNT > 0
+		ROLLBACK TRANSACTION;
+ 
+		PRINT 'Actual error number: ' + CAST(@ErrorNumber AS VARCHAR(10));
+		PRINT 'Actual line number: ' + CAST(@ErrorLine AS VARCHAR(10));
+ 
+		THROW;
+	END CATCH;
+
+--INSERT INTO SalesHistory_BI_Data
+--                         (BU, ORG, CALENDAR_QUARTER, FISCAL_QUARTER, Month, DATE, CUSTOMER_CLUSTER, CUSTOMER, AGENT, CUSTOMER_CLASS, CUSTOMER_CATEGORY, 
+--                         TERRITORY_MARKET, MARKET, CLUSTER_ACCOUNT, SHIP_TO_STATE, SHIP_TO_COUNTRY, SHIP_TO_POSTAL_CODE, ITEM_NUMBER, ITEM_DESCRIPTION, 
+--                         REVENUE, QUANTITY, UOM, PO, SO_NUMBER, SO_LINE, CSR, PRODUCT_CATEGORY)
+--SELECT        K.BU, K.ORG, K.CALENDAR_QUARTER, K.FISCAL_QUARTER, K.Month, CAST(LEFT(K.[DATE],10) AS DATETIME), K.CUSTOMER_CLUSTER, K.CUSTOMER, K.AGENT, K.CUSTOMER_CLASS, 
+--                         K.CUSTOMER_CATEGORY, K.TERRITORY_MARKET, K.MARKET, K.CLUSTER_ACCOUNT, COALESCE (K.SHIP_TO_STATE, '') AS Expr1, 
+--                         COALESCE (K.SHIP_TO_COUNTRY, '') AS Expr2, COALESCE (K.SHIP_TO_POSTAL_CODE, '') AS Expr3, K.ITEM_NUMBER, K.ITEM_DESCRIPTION, SUM(K.REVENUE) 
+--                         AS REVENUE, SUM(K.QUANTITY) AS QUANTITY, K.UOM, K.PO, K.SO_NUMBER, K.SO_LINE, K.CSR, K.PRODUCT_CATEGORY--, B.ITEM_NUMBER
+--FROM            sales_pivot_bi AS K LEFT OUTER JOIN
+--                         SalesHistory_BI_Data AS B ON K.SO_NUMBER = B.SO_NUMBER AND B.SO_LINE = K.SO_LINE 
+--						 AND COALESCE (K.SHIP_TO_POSTAL_CODE, '') = B.SHIP_TO_POSTAL_CODE AND B.SHIP_TO_STATE = COALESCE (K.SHIP_TO_STATE, '') 
+--						 AND B.SHIP_TO_COUNTRY =  K.SHIP_TO_COUNTRY
+--GROUP BY K.BU, K.ORG, K.CALENDAR_QUARTER, K.FISCAL_QUARTER, K.Month, K.DATE, K.CUSTOMER_CLUSTER, K.CUSTOMER, K.AGENT, K.CUSTOMER_CLASS, 
+--                         K.CUSTOMER_CATEGORY, K.TERRITORY_MARKET, K.MARKET, K.CLUSTER_ACCOUNT, K.SHIP_TO_STATE, K.SHIP_TO_COUNTRY, K.SHIP_TO_POSTAL_CODE, 
+--                         K.ITEM_NUMBER, K.ITEM_DESCRIPTION, K.UOM, K.PO, K.SO_NUMBER, K.SO_LINE, K.CSR, K.PRODUCT_CATEGORY, K.ORG, B.ITEM_NUMBER
+--HAVING       (B.ITEM_NUMBER IS NULL) AND 
+--(K.ORG = 'cab') AND (K.SO_LINE IS NOT NULL) --AND (K.SO_NUMBER =  2107871)
+GO
diff --git a/Stored Procedures/dbo.usp_SchedulingMissingLineSpeedEmail.sql b/Stored Procedures/dbo.usp_SchedulingMissingLineSpeedEmail.sql
index 2877361..13189e6 100644
--- a/Stored Procedures/dbo.usp_SchedulingMissingLineSpeedEmail.sql
+++ b/Stored Procedures/dbo.usp_SchedulingMissingLineSpeedEmail.sql
@@ -2,19 +2,14 @@
 GO
 SET ANSI_NULLS ON
 GO
-
-
-
-
-
 -- =============================================
 -- Author:		Bryan Eddy
 -- ALTER date: 6/12/17
 -- Description:	Send email of missing line speeds to Process Engineers
--- Version:		4
--- Update:		Added number of missing SO Lines to the report.
+-- Version:		7
+-- Update:		Updated to pull from [SPBAPS-TST01] server while in testing
 -- =============================================
-CREATE PROCEDURE [dbo].[usp_SchedulingMissingLineSpeedEmail]
+CREATE PROC [dbo].[usp_SchedulingMissingLineSpeedEmail]
 
 AS
 
@@ -88,44 +83,48 @@
 , cteMissingSetupOrders
 as(	
 	SELECT DISTINCT FinishedGood,K.Item,K.Item_Description, ScheduleDate, AssemblyItemNumber, Setup, Make_Buy, k.PrimaryAlt, DepartmentCode, cteOrders.SalesOrder,SalesOrderLineNumber
-	, MIN(ScheduleDate) OVER (PARTITION BY Setup) Max_SechuduleDate, MAX(Item) OVER (PARTITION BY Setup) Max_Item, K.MachineNumber--, ROW_NUMBER() OVER (PARTITION BY Setup ORDER BY setup,G.FinishedGood) RowNumber
+	, MIN(ScheduleDate) OVER (PARTITION BY Setup) Max_SechuduleDate, K.MachineNumber--, ROW_NUMBER() OVER (PARTITION BY Setup ORDER BY setup,G.FinishedGood) RowNumber
 	FROM cteOrders CROSS APPLY fn_ExplodeBOM(cteOrders.ItemNumber) G
 	INNER JOIN #SetupLocation K ON G.AssemblyItemNumber = K.Item
 	INNER JOIN AFLPRD_INVSysItemCost_CAB B ON B.ItemNumber = K.ITEM 
 	WHERE B.Make_Buy = 'MAKE' AND k.MachineNumber IS NULL  and left(ITEM,3) NOT in ('WTC','DNT')
-	and LEFT(setup,1) not in ('k','Q','O','I') and setup not in ('R696','R093','PQC','pk01') AND setup NOT LIKE 'm00[4-9]'
+	and LEFT(setup,1) not in ('k','Q','O','I') and setup not in ('R696','R093','PQC','pk01','SK01') AND setup NOT LIKE 'm00[4-9]'
 	) 
 	,cteConsolidatedMissingSetupOrders
 	AS(
 		SELECT *, COUNT(SalesOrder) OVER (PARTITION BY cteMissingSetupOrders.Setup) SoLinesMissingSetups--Determine the amount of sales order affected by missing setups
 		FROM cteMissingSetupOrders
+		--WHERE	
 	)
 SELECT DISTINCT FinishedGood,Item,Item_Description ItemDesc, ScheduleDate, AssemblyItemNumber, Setup, PrimaryAlt,DepartmentCode, MachineNumber, SoLinesMissingSetups
 INTO #Results
 FROM cteConsolidatedMissingSetupOrders
-WHERE Max_SechuduleDate = ScheduleDate and item = Max_Item --AND X.RowNumber = 1
+WHERE Max_SechuduleDate = ScheduleDate --  item = Max_Item = 1 /* To get just max item another CTE will have to be used*/
 ORDER BY ScheduleDate
 
 --SELECT *
 --FROM #Results
 
+SELECT *
+FROM [SPBAPS-TST01].PlanetTogether_Data_Test.Setup.[vMissingSetupsUnion]
+
 --Add new missing setups
-INSERT INTO [NAACAB-SCH01].PlanetTogether_Data_Test.setup.MissingSetups(Setup)
+INSERT INTO [SPBAPS-TST01].PlanetTogether_Data_Test.setup.MissingSetups(Setup)
 SELECT DISTINCT G.Setup
-FROM #Results G LEFT JOIN [NAACAB-SCH01].PlanetTogether_Data_Test.setup.MissingSetups K ON K.Setup = G.Setup
+FROM #Results G LEFT JOIN [SPBAPS-TST01].PlanetTogether_Data_Test.setup.MissingSetups K ON K.Setup = G.Setup
 WHERE K.Setup IS NULL
 
 --Update existing records with the most recent date of the apperance
 UPDATE K
 SET K.DateMostRecentAppearance = GETDATE()
-FROM [NAACAB-SCH01].PlanetTogether_Data_Test.setup.MissingSetups K INNER JOIN	#Results J ON K.Setup = J.Setup
+FROM [SPBAPS-TST01].PlanetTogether_Data_Test.setup.MissingSetups K INNER JOIN	#Results J ON K.Setup = J.Setup
 
 --Results to populate the email table
 IF OBJECT_ID(N'tempdb..#FinalResults', N'U') IS NOT NULL
 DROP TABLE #FinalResults;
 SELECT J.*,DATEDIFF(dd,K.DateCreated,K.DateMostRecentAppearance) DaysMissing
 INTO #FinalResults
-FROM [NAACAB-SCH01].PlanetTogether_Data_Test.setup.MissingSetups K INNER JOIN	#Results J ON K.Setup = J.Setup
+FROM [SPBAPS-TST01].PlanetTogether_Data_Test.setup.MissingSetups K INNER JOIN	#Results J ON K.Setup = J.Setup
 ORDER BY J.ScheduleDate,DaysMissing DESC
 
 --SELECT *
@@ -154,7 +153,7 @@
 DECLARE @body1 VARCHAR(MAX)
 DECLARE @subject VARCHAR(MAX)
 DECLARE @query VARCHAR(MAX) = N'SELECT * FROM tempdb..#Results;'
-SET @subject = 'Missing Setup Line Speeds for Open Orders' 
+SET @subject = 'Missing Setup Line Speeds for Open Orders ' + CAST(GETDATE() AS NVARCHAR)
 SET @body1 = 'There are  ' + CAST(@numRows AS NVARCHAR) + ' items that are missing setup line speeds with open orders.  Please review.' +CHAR(13)+CHAR(13)
 
 DECLARE @tableHTML  NVARCHAR(MAX) ;
diff --git a/Stored Procedures/dbo.usp_WhereUsed_SalesHistory.sql b/Stored Procedures/dbo.usp_WhereUsed_SalesHistory.sql
index acd2339..1d65e92 100644
--- a/Stored Procedures/dbo.usp_WhereUsed_SalesHistory.sql
+++ b/Stored Procedures/dbo.usp_WhereUsed_SalesHistory.sql
@@ -16,11 +16,11 @@
 
 IF OBJECT_ID(N'tempdb..#FinishedCables', N'U') IS NOT NULL 
 DROP TABLE #FinishedCables
-SELECT K.AssemblyItemNumber,  sum(k.ComponentQuantity) as Component_Qty, date, REVENUE, CASE WHEN UOM = 'FT' THEN QUANTITY / 3.281 ELSE QUANTITY END AS Quantity,
-CASE WHEN UOM = 'FT' THEN 'M' ELSE  UOM END AS UOM, SO_NUMBER, SO_LINE, INVOICE_NUMBER
+SELECT K.AssemblyItemNumber,  sum(k.ComponentQuantity) as Component_Qty, E.BOOKED_DATE AS Date, REVENUE, CASE WHEN E.UNIT_OF_MEASURE = 'FT' THEN QUANTITY / 3.281 ELSE QUANTITY END AS Quantity,
+CASE WHEN E.UNIT_OF_MEASURE = 'FT' THEN 'M' ELSE  UNIT_OF_MEASURE END AS UOM, E.ORDER_NUMBER AS SO_NUMBER, E.SO_LINE_NUMBER AS SO_LINE, INVOICE_NUMBER
 INTO #FinishedCables
-FROM #ItemWhereUsed K INNER JOIN SalesHistory_BI_Data E ON E.ITEM_NUMBER = K.AssemblyItemNumber
-GROUP BY K.AssemblyItemNumber, DATE, REVENUE, Quantity, UOM, SO_NUMBER, SO_LINE, INVOICE_NUMBER
+FROM #ItemWhereUsed K INNER JOIN oracle.MarginRevenueExtractSalesHistory E ON E.ITEM_NUMBER = K.AssemblyItemNumber
+GROUP BY K.AssemblyItemNumber, E.BOOKED_DATE, REVENUE, Quantity, UNIT_OF_MEASURE, ORDER_NUMBER, SO_LINE_NUMBER, INVOICE_NUMBER
 
 SELECT DISTINCT K.[Item No], G.*
 FROM #FinishedCables G INNER JOIN dbo.[Basic Product Construction] K ON G.AssemblyItemNumber = K.[New Oracle Part #]
diff --git a/Tables/CutSheet.ImageGroup.sql b/Tables/CutSheet.ImageGroup.sql
index 475b38f..20b9a22 100644
--- a/Tables/CutSheet.ImageGroup.sql
+++ b/Tables/CutSheet.ImageGroup.sql
@@ -13,3 +13,9 @@
 GO
 ALTER TABLE [CutSheet].[ImageGroup] ADD CONSTRAINT [FK_ImageGroup_ImageGroup] FOREIGN KEY ([ImageGroupID]) REFERENCES [CutSheet].[ImageGroup] ([ImageGroupID])
 GO
+GRANT DELETE ON  [CutSheet].[ImageGroup] TO [NAA\SPB Premise SQL RO]
+GO
+GRANT INSERT ON  [CutSheet].[ImageGroup] TO [NAA\SPB Premise SQL RO]
+GO
+GRANT UPDATE ON  [CutSheet].[ImageGroup] TO [NAA\SPB Premise SQL RO]
+GO
diff --git a/Tables/CutSheet.ImageGroupReference.sql b/Tables/CutSheet.ImageGroupReference.sql
index 527b111..1e06179 100644
--- a/Tables/CutSheet.ImageGroupReference.sql
+++ b/Tables/CutSheet.ImageGroupReference.sql
@@ -9,7 +9,17 @@
 [Armored] [bit] NOT NULL CONSTRAINT [DF_ImageGroupReference_Armored] DEFAULT ((0))
 ) ON [PRIMARY]
 GO
-ALTER TABLE [CutSheet].[ImageGroupReference] ADD CONSTRAINT [PK_ImageGroupReference_1] PRIMARY KEY CLUSTERED  ([ImageID], [ImageTypeID], [Color], [Armored]) ON [PRIMARY]
+ALTER TABLE [CutSheet].[ImageGroupReference] ADD CONSTRAINT [PK_ImageGroupReference] PRIMARY KEY CLUSTERED  ([ImageGroupID], [ImageTypeID], [Color], [Armored]) ON [PRIMARY]
+GO
+ALTER TABLE [CutSheet].[ImageGroupReference] ADD CONSTRAINT [IX_ImageGroupReference] UNIQUE NONCLUSTERED  ([ImageID]) ON [PRIMARY]
+GO
+ALTER TABLE [CutSheet].[ImageGroupReference] ADD CONSTRAINT [FK_ImageGroupReference_ImageGroup] FOREIGN KEY ([ImageGroupID]) REFERENCES [CutSheet].[ImageGroup] ([ImageGroupID]) ON DELETE CASCADE ON UPDATE CASCADE
 GO
 ALTER TABLE [CutSheet].[ImageGroupReference] ADD CONSTRAINT [FK_ImageGroupReference_Images] FOREIGN KEY ([ImageID], [ImageTypeID], [Color], [Armored]) REFERENCES [CutSheet].[Images] ([ImageID], [ImageTypeID], [Color], [Armored]) ON DELETE CASCADE ON UPDATE CASCADE
 GO
+GRANT DELETE ON  [CutSheet].[ImageGroupReference] TO [NAA\SPB Premise SQL RO]
+GO
+GRANT INSERT ON  [CutSheet].[ImageGroupReference] TO [NAA\SPB Premise SQL RO]
+GO
+GRANT UPDATE ON  [CutSheet].[ImageGroupReference] TO [NAA\SPB Premise SQL RO]
+GO
diff --git a/Tables/CutSheet.Images.sql b/Tables/CutSheet.Images.sql
index 98eb60b..52ed943 100644
--- a/Tables/CutSheet.Images.sql
+++ b/Tables/CutSheet.Images.sql
@@ -6,7 +6,8 @@
 [CreatedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF__Images__CreatedB__6582B673] DEFAULT (suser_sname()),
 [DateCreated] [datetime] NULL CONSTRAINT [DF__Images__DateCrea__6676DAAC] DEFAULT (getdate()),
 [Color] [nvarchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Armored] [bit] NOT NULL CONSTRAINT [DF_Images_Armored] DEFAULT ((0))
+[Armored] [bit] NOT NULL CONSTRAINT [DF_Images_Armored] DEFAULT ((0)),
+[ImageFileType] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
 ) ON [PRIMARY]
 GO
 ALTER TABLE [CutSheet].[Images] ADD CONSTRAINT [PK_Images_1] PRIMARY KEY CLUSTERED  ([ImageID]) ON [PRIMARY]
@@ -19,3 +20,9 @@
 GO
 ALTER TABLE [CutSheet].[Images] ADD CONSTRAINT [FK_Images_tblColors_Available] FOREIGN KEY ([Color]) REFERENCES [dbo].[tblColors_Available] ([Color]) ON DELETE CASCADE ON UPDATE CASCADE
 GO
+GRANT DELETE ON  [CutSheet].[Images] TO [NAA\SPB Premise SQL RO]
+GO
+GRANT INSERT ON  [CutSheet].[Images] TO [NAA\SPB Premise SQL RO]
+GO
+GRANT UPDATE ON  [CutSheet].[Images] TO [NAA\SPB Premise SQL RO]
+GO
diff --git a/Tables/Setup.MachineMapping.sql b/Tables/Setup.MachineMapping.sql
new file mode 100644
index 0000000..34e7f34
--- /dev/null
+++ b/Tables/Setup.MachineMapping.sql
@@ -0,0 +1,13 @@
+CREATE TABLE [Setup].[MachineMapping]
+(
+[PreactorMachineID] [int] NULL,
+[PreactorProcessID] [int] NULL,
+[PreactorMachineNumber] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[PlanetTogetherMachineNumber] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[ProcessID] [int] NOT NULL,
+[MachineID] [int] NOT NULL,
+[PlanetTogetherMachineID] [int] NULL
+) ON [PRIMARY]
+GO
+ALTER TABLE [Setup].[MachineMapping] ADD CONSTRAINT [pk_MachineMapping] PRIMARY KEY CLUSTERED  ([ProcessID], [MachineID]) ON [PRIMARY]
+GO
diff --git a/Tables/Setup.tblProcessMachines.sql b/Tables/Setup.tblProcessMachines.sql
index e755b53..eaca4ed 100644
--- a/Tables/Setup.tblProcessMachines.sql
+++ b/Tables/Setup.tblProcessMachines.sql
@@ -17,13 +17,8 @@
 [ProcessTimeExtension] [int] NULL,
 [MachineCount] [float] NULL,
 [ProcessTimeDelay] [int] NULL,
-[IncludeInReport] [bit] NOT NULL,
-[PreactorMachineID] [int] NULL,
-[ProcessMachineID] [int] NOT NULL IDENTITY(1, 1),
-[PreactorProcessID] [int] NULL,
-[PreactorMachineNumber] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[PlanetTogetherMachineNumber] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
-) ON [PRIMARY]
+[IncludeInReport] [bit] NOT NULL
+) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
 GO
 ALTER TABLE [Setup].[tblProcessMachines] ADD CONSTRAINT [PK_tblProcessMachines] PRIMARY KEY CLUSTERED  ([ProcessID], [MachineID]) ON [PRIMARY]
 GO
diff --git a/Tables/dbo.Basic Product Construction.sql b/Tables/dbo.Basic Product Construction.sql
index bd79be6..5409f1e 100644
--- a/Tables/dbo.Basic Product Construction.sql
+++ b/Tables/dbo.Basic Product Construction.sql
@@ -105,7 +105,7 @@
 [ActiveStatusChangedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
 [SafetyRatingUS] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
 [SafetyRatingCanadian] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
-) ON [PRIMARY]
+) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
 GO
 SET QUOTED_IDENTIFIER ON
 GO
@@ -215,6 +215,8 @@
 GO
 CREATE NONCLUSTERED INDEX [BasicProdConstruction_IXX] ON [dbo].[Basic Product Construction] ([Active], [OracleStatus]) INCLUDE ([Base], [Customer], [Customer Part#], [Fiber Oracle item], [FiberType2], [Item No], [Jacket Color], [New Oracle Part #], [Print Spacing], [Revision Date]) ON [PRIMARY]
 GO
+CREATE NONCLUSTERED INDEX [BasicProdConstruction_XI] ON [dbo].[Basic Product Construction] ([Active], [OracleStatus]) INCLUDE ([Base], [Customer], [Customer Part#], [Fiber Oracle item], [FiberType2], [ID], [Item No], [Jacket Color], [New Oracle Part #], [Print Spacing], [Revision Date]) ON [PRIMARY]
+GO
 CREATE NONCLUSTERED INDEX [IX_Basic Product Construction] ON [dbo].[Basic Product Construction] ([Customer], [Customer Part#], [Item No], [EZ Strip], [Jacket Color], [Jacket Material], [Base], [OracleStatus], [Fiber Oracle item], [Active]) ON [PRIMARY]
 GO
 CREATE NONCLUSTERED INDEX [IXI_BasicProdConstruction] ON [dbo].[Basic Product Construction] ([Customer], [OracleStatus]) INCLUDE ([Base], [Customer Part#], [Fiber Oracle item], [FiberType2], [Item No], [Jacket Color], [New Oracle Part #], [Print Spacing], [Revision Date]) ON [PRIMARY]
diff --git a/Tables/dbo.Buff#1_#2 Alloc Table.sql b/Tables/dbo.Buff#1_#2 Alloc Table.sql
index 07c4110..0518e63 100644
--- a/Tables/dbo.Buff#1_#2 Alloc Table.sql
+++ b/Tables/dbo.Buff#1_#2 Alloc Table.sql
@@ -34,6 +34,54 @@
 GO
 ALTER TABLE [dbo].[Buff#1/#2 Alloc Table] ADD CONSTRAINT [Buff#1/#2 Alloc Table$PrimaryKey] PRIMARY KEY CLUSTERED  ([PrefixID]) ON [PRIMARY]
 GO
+GRANT UPDATE ([Prefix]) ON [dbo].[Buff#1/#2 Alloc Table] TO [NAA\SPB Premise SQL RO]
+GO
+GRANT UPDATE ([Buffering Factor]) ON [dbo].[Buff#1/#2 Alloc Table] TO [NAA\SPB Premise SQL RO]
+GO
+GRANT UPDATE ([Special Notes]) ON [dbo].[Buff#1/#2 Alloc Table] TO [NAA\SPB Premise SQL RO]
+GO
+GRANT UPDATE ([Set-up time level 1]) ON [dbo].[Buff#1/#2 Alloc Table] TO [NAA\SPB Premise SQL RO]
+GO
+GRANT UPDATE ([Set-up time level 2]) ON [dbo].[Buff#1/#2 Alloc Table] TO [NAA\SPB Premise SQL RO]
+GO
+GRANT UPDATE ([Buff#11 Line Speed]) ON [dbo].[Buff#1/#2 Alloc Table] TO [NAA\SPB Premise SQL RO]
+GO
+GRANT UPDATE ([Buff#1 Line Speed]) ON [dbo].[Buff#1/#2 Alloc Table] TO [NAA\SPB Premise SQL RO]
+GO
+GRANT UPDATE ([Buff#4 Line Speed]) ON [dbo].[Buff#1/#2 Alloc Table] TO [NAA\SPB Premise SQL RO]
+GO
+GRANT UPDATE ([Buff#6 Line Speed]) ON [dbo].[Buff#1/#2 Alloc Table] TO [NAA\SPB Premise SQL RO]
+GO
+GRANT UPDATE ([Buff#2 Line Speed]) ON [dbo].[Buff#1/#2 Alloc Table] TO [NAA\SPB Premise SQL RO]
+GO
+GRANT UPDATE ([Buff#9 Line Speed]) ON [dbo].[Buff#1/#2 Alloc Table] TO [NAA\SPB Premise SQL RO]
+GO
+GRANT UPDATE ([Buff#10 Line Speed]) ON [dbo].[Buff#1/#2 Alloc Table] TO [NAA\SPB Premise SQL RO]
+GO
+GRANT UPDATE ([Buff#9 Line Speed (SH)]) ON [dbo].[Buff#1/#2 Alloc Table] TO [NAA\SPB Premise SQL RO]
+GO
+GRANT UPDATE ([Buff#11 Line Speed (SH)]) ON [dbo].[Buff#1/#2 Alloc Table] TO [NAA\SPB Premise SQL RO]
+GO
+GRANT UPDATE ([SH#3 Line Speed]) ON [dbo].[Buff#1/#2 Alloc Table] TO [NAA\SPB Premise SQL RO]
+GO
+GRANT UPDATE ([SH#4 Line Speed]) ON [dbo].[Buff#1/#2 Alloc Table] TO [NAA\SPB Premise SQL RO]
+GO
+GRANT UPDATE ([C#4 Line Speed]) ON [dbo].[Buff#1/#2 Alloc Table] TO [NAA\SPB Premise SQL RO]
+GO
+GRANT UPDATE ([Armor Line Speed]) ON [dbo].[Buff#1/#2 Alloc Table] TO [NAA\SPB Premise SQL RO]
+GO
+GRANT UPDATE ([PlannedLotSize]) ON [dbo].[Buff#1/#2 Alloc Table] TO [NAA\SPB Premise SQL RO]
+GO
+GRANT UPDATE ([shrinkage limit]) ON [dbo].[Buff#1/#2 Alloc Table] TO [NAA\SPB Premise SQL RO]
+GO
+GRANT UPDATE ([Sheathing Line]) ON [dbo].[Buff#1/#2 Alloc Table] TO [NAA\SPB Premise SQL RO]
+GO
+GRANT UPDATE ([Interlock]) ON [dbo].[Buff#1/#2 Alloc Table] TO [NAA\SPB Premise SQL RO]
+GO
+GRANT UPDATE ([PrimaryBufferingLine]) ON [dbo].[Buff#1/#2 Alloc Table] TO [NAA\SPB Premise SQL RO]
+GO
+GRANT UPDATE ([B18_Line_Speed]) ON [dbo].[Buff#1/#2 Alloc Table] TO [NAA\SPB Premise SQL RO]
+GO
 EXEC sp_addextendedproperty N'MS_SSMA_SOURCE', N'SQLMigration.[Buff#1/#2 Alloc Table]', 'SCHEMA', N'dbo', 'TABLE', N'Buff#1/#2 Alloc Table', NULL, NULL
 GO
 EXEC sp_addextendedproperty N'MS_SSMA_SOURCE', N'SQLMigration.[Buff#1/#2 Alloc Table].[Armor Line Speed]', 'SCHEMA', N'dbo', 'TABLE', N'Buff#1/#2 Alloc Table', 'COLUMN', N'Armor Line Speed'
diff --git a/Tables/dbo.BurnTestVerticalTray.sql b/Tables/dbo.BurnTestVerticalTray.sql
new file mode 100644
index 0000000..1a3644c
--- /dev/null
+++ b/Tables/dbo.BurnTestVerticalTray.sql
@@ -0,0 +1,11 @@
+CREATE TABLE [dbo].[BurnTestVerticalTray]
+(
+[ID] [int] NOT NULL IDENTITY(1, 1),
+[FromNominalODmm] [decimal] (8, 3) NULL,
+[ToNominalODmm] [decimal] (8, 3) NULL,
+[NumberOfCablesPerBundles] [int] NULL,
+[NumberOfBundles] [int] NULL
+) ON [PRIMARY]
+GO
+ALTER TABLE [dbo].[BurnTestVerticalTray] ADD CONSTRAINT [k_BurnTestIee1202Length] PRIMARY KEY CLUSTERED  ([ID]) ON [PRIMARY]
+GO
diff --git a/Tables/dbo.SalesHistory.sql b/Tables/dbo.SalesHistory.sql
deleted file mode 100644
index cddae44..0000000
--- a/Tables/dbo.SalesHistory.sql
+++ /dev/null
@@ -1,42 +0,0 @@
-CREATE TABLE [dbo].[SalesHistory]
-(
-[Org] [varchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Shipped] [date] NULL,
-[CustNum] [int] NULL,
-[Customer] [varchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[OrderNum] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
-[Customer PO] [varchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Item] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Description] [varchar] (350) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Price] [float] NULL,
-[Qty] [float] NULL,
-[ValueBuCurrency] [float] NULL,
-[UOM] [varchar] (3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[FreightCarrier] [varchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[TrackingNum] [varchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[DeliveryReceipt] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[BillableTolerance Pct] [int] NULL,
-[CustomerPID] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[ProductClass] [varchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[ProductGroup] [varchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Location] [varchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[CustomerPOLine] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Value_USD] [float] NULL,
-[ItemCost] [float] NULL,
-[ShipmentCost] [float] NULL,
-[SalesOrderType] [varchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[CustomerReference] [varchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[InvoiceNumber] [float] NULL,
-[PromiseDate] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[ScheduleDate] [date] NULL,
-[CableWeigth] [smallint] NULL,
-[SuggestedReel] [varchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[ReelDescription] [varchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[ReelType] [varchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Lagging] [varchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[ReelWeight] [varchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[DateInserted] [datetime] NULL CONSTRAINT [DF_SalesHistory_DateInserted] DEFAULT (getdate())
-) ON [PRIMARY]
-GO
-ALTER TABLE [dbo].[SalesHistory] ADD CONSTRAINT [PK_SalesHistory] PRIMARY KEY CLUSTERED  ([OrderNum]) ON [PRIMARY]
-GO
diff --git a/Tables/dbo.SalesHistory_BI_Data.sql b/Tables/dbo.SalesHistory_BI_Data.sql
deleted file mode 100644
index b609b45..0000000
--- a/Tables/dbo.SalesHistory_BI_Data.sql
+++ /dev/null
@@ -1,61 +0,0 @@
-CREATE TABLE [dbo].[SalesHistory_BI_Data]
-(
-[BU] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[ORG] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[CALENDAR_QUARTER] [smallint] NULL,
-[FISCAL_QUARTER] [smallint] NULL,
-[Month] [smallint] NULL,
-[DATE] [datetime] NOT NULL,
-[CUSTOMER_CLUSTER] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[CUSTOMER] [varchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[AGENT] [varchar] (40) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
-[CUSTOMER_CLASS] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[CUSTOMER_CATEGORY] [varchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[TERRITORY_MARKET] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[MARKET] [varchar] (16) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[CLUSTER_ACCOUNT] [int] NULL,
-[SHIP_TO_STATE] [nvarchar] (33) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
-[SHIP_TO_COUNTRY] [nvarchar] (40) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
-[SHIP_TO_POSTAL_CODE] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
-[ITEM_NUMBER] [varchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[ITEM_DESCRIPTION] [varchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[REVENUE] [real] NOT NULL,
-[QUANTITY] [real] NOT NULL,
-[UOM] [varchar] (3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[PO] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[SO_NUMBER] [int] NOT NULL,
-[SO_LINE] [real] NOT NULL,
-[INVOICE_NUMBER] [int] NULL,
-[INVOICE_LINE] [int] NULL,
-[CSR] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[PRODUCT_CATEGORY] [varchar] (75) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[SO_LINE_ID] [int] NOT NULL IDENTITY(1, 1),
-[DateInserted] [datetime] NULL CONSTRAINT [DF_SalesHistory_BI_Data_DateInserted] DEFAULT (getdate()),
-[DateRevised] [datetime] NULL
-) ON [PRIMARY]
-GO
-SET QUOTED_IDENTIFIER ON
-GO
-SET ANSI_NULLS ON
-GO
--- =============================================
--- Author:		Bryan Eddy
--- Create date: 12/11/2017
--- Description:	Update the revised date
--- =============================================
-CREATE TRIGGER [dbo].[trgr_SalesHistory] 
-   ON  [dbo].[SalesHistory_BI_Data] 
-   AFTER INSERT,UPDATE
-AS 
-BEGIN
-	IF NOT UPDATE(DateInserted)
-		BEGIN
-			UPDATE k
-			SET DateRevised = GETDATE()
-			FROM SalesHistory_BI_Data k INNER JOIN Inserted i 
-			ON K.SO_LINE_ID = I.SO_LINE_ID
-		END
-END
-GO
-ALTER TABLE [dbo].[SalesHistory_BI_Data] ADD CONSTRAINT [PK_SalesHistory_BI_Data] PRIMARY KEY CLUSTERED  ([DATE], [AGENT], [SHIP_TO_STATE], [SHIP_TO_COUNTRY], [SHIP_TO_POSTAL_CODE], [SO_NUMBER], [SO_LINE]) ON [PRIMARY]
-GO
diff --git a/Tables/dbo.SalesHistory_BI_Data_TEMP.sql b/Tables/dbo.SalesHistory_BI_Data_TEMP.sql
deleted file mode 100644
index f6a30c7..0000000
--- a/Tables/dbo.SalesHistory_BI_Data_TEMP.sql
+++ /dev/null
@@ -1,35 +0,0 @@
-CREATE TABLE [dbo].[SalesHistory_BI_Data_TEMP]
-(
-[BU] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[ORG] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[CALENDAR_QUARTER] [smallint] NULL,
-[FISCAL_QUARTER] [smallint] NULL,
-[Month] [smallint] NULL,
-[DATE] [varchar] (120) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[CUSTOMER_CLUSTER] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[CUSTOMER] [varchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[AGENT] [varchar] (40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[CUSTOMER_CLASS] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[CUSTOMER_CATEGORY] [varchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[TERRITORY_MARKET] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[MARKET] [varchar] (16) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[CLUSTER_ACCOUNT] [int] NULL,
-[SHIP_TO_STATE] [varchar] (33) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[SHIP_TO_COUNTRY] [varchar] (40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[SHIP_TO_POSTAL_CODE] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[ITEM_NUMBER] [varchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[ITEM_DESCRIPTION] [varchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[REVENUE] [real] NOT NULL,
-[QUANTITY] [real] NOT NULL,
-[UOM] [varchar] (3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[PO] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[SO_NUMBER] [int] NOT NULL,
-[SO_LINE] [real] NOT NULL,
-[INVOICE_NUMBER] [int] NULL,
-[INVOICE_LINE] [int] NULL,
-[CSR] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[PRODUCT_CATEGORY] [varchar] (75) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[SO_LINE_ID] [int] NOT NULL IDENTITY(1, 1),
-[DateInserted] [datetime] NULL
-) ON [PRIMARY]
-GO
diff --git a/Tables/dbo.SalesHistory_Temp.sql b/Tables/dbo.SalesHistory_Temp.sql
deleted file mode 100644
index 4055731..0000000
--- a/Tables/dbo.SalesHistory_Temp.sql
+++ /dev/null
@@ -1,40 +0,0 @@
-CREATE TABLE [dbo].[SalesHistory_Temp]
-(
-[Org] [varchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Shipped] [date] NULL,
-[CustNum] [int] NULL,
-[Customer] [varchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[OrderNum] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
-[Customer PO] [varchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Item] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Description] [varchar] (350) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Price] [float] NULL,
-[Qty] [float] NULL,
-[ValueBuCurrency] [float] NULL,
-[UOM] [varchar] (3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[FreightCarrier] [varchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[TrackingNum] [varchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[DeliveryReceipt] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[BillableTolerance Pct] [int] NULL,
-[CustomerPID] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[ProductClass] [varchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[ProductGroup] [varchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Location] [varchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[CustomerPOLine] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Value_USD] [float] NULL,
-[ItemCost] [float] NULL,
-[ShipmentCost] [float] NULL,
-[SalesOrderType] [varchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[CustomerReference] [varchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[InvoiceNumber] [float] NULL,
-[PromiseDate] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[ScheduleDate] [date] NULL,
-[CableWeigth] [smallint] NULL,
-[SuggestedReel] [varchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[ReelDescription] [varchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[ReelType] [varchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Lagging] [varchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[ReelWeight] [varchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[DateInserted] [datetime] NULL
-) ON [PRIMARY]
-GO
diff --git a/Tables/dbo.TB Color Series.sql b/Tables/dbo.TB Color Series.sql
deleted file mode 100644
index 51c39cc..0000000
--- a/Tables/dbo.TB Color Series.sql
+++ /dev/null
@@ -1,21 +0,0 @@
-CREATE TABLE [dbo].[TB Color Series]
-(
-[TB Color Series] [nvarchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Color] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Description] [nvarchar] (75) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
-) ON [PRIMARY]
-GO
-ALTER TABLE [dbo].[TB Color Series] ADD CONSTRAINT [SSMA_CC$TB Color Series$Color$disallow_zero_length] CHECK ((len([Color])>(0)))
-GO
-ALTER TABLE [dbo].[TB Color Series] ADD CONSTRAINT [SSMA_CC$TB Color Series$Description$disallow_zero_length] CHECK ((len([Description])>(0)))
-GO
-ALTER TABLE [dbo].[TB Color Series] ADD CONSTRAINT [SSMA_CC$TB Color Series$TB Color Series$disallow_zero_length] CHECK ((len([TB Color Series])>(0)))
-GO
-EXEC sp_addextendedproperty N'MS_SSMA_SOURCE', N'AccessSQLExport.[TB Color Series]', 'SCHEMA', N'dbo', 'TABLE', N'TB Color Series', NULL, NULL
-GO
-EXEC sp_addextendedproperty N'MS_SSMA_SOURCE', N'AccessSQLExport.[TB Color Series].[Color]', 'SCHEMA', N'dbo', 'TABLE', N'TB Color Series', 'COLUMN', N'Color'
-GO
-EXEC sp_addextendedproperty N'MS_SSMA_SOURCE', N'AccessSQLExport.[TB Color Series].[Description]', 'SCHEMA', N'dbo', 'TABLE', N'TB Color Series', 'COLUMN', N'Description'
-GO
-EXEC sp_addextendedproperty N'MS_SSMA_SOURCE', N'AccessSQLExport.[TB Color Series].[TB Color Series]', 'SCHEMA', N'dbo', 'TABLE', N'TB Color Series', 'COLUMN', N'TB Color Series'
-GO
diff --git a/Tables/dbo.XXAFL_CAB_DESIGN_ITEMS_ATTR.sql b/Tables/dbo.XXAFL_CAB_DESIGN_ITEMS_ATTR.sql
deleted file mode 100644
index c32c8f9..0000000
--- a/Tables/dbo.XXAFL_CAB_DESIGN_ITEMS_ATTR.sql
+++ /dev/null
@@ -1,24 +0,0 @@
-CREATE TABLE [dbo].[XXAFL_CAB_DESIGN_ITEMS_ATTR]
-(
-[INVENTORY_ITEM_NAME] [nvarchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
-[ORGANIZATION_ID] [int] NULL,
-[PRIMARY_ALT] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
-[PROCESS_ID] [int] NULL,
-[DEPARTMENT_ID] [int] NOT NULL,
-[ATTRIBUTE_ID] [int] NOT NULL,
-[ATTRIBUTE_VALUE] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[UNIT_ID] [int] NOT NULL,
-[LAYER_ID] [int] NOT NULL,
-[START_DATE] [datetime] NULL,
-[END_DATE] [datetime] NULL,
-[USER_NAME] [nvarchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[CREATED_BY] [int] NULL,
-[CREATION_DATE] [datetime] NULL,
-[UPDATED_BY] [int] NULL,
-[UPDATE_DATE] [datetime] NULL,
-[CREATE_UPDATE_FLAG] [nvarchar] (5) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[BATCH_ID] [int] NULL
-) ON [PRIMARY]
-GO
-ALTER TABLE [dbo].[XXAFL_CAB_DESIGN_ITEMS_ATTR] ADD CONSTRAINT [PK_XXAFL_CAB_DESIGN_ITEMS_ATTR] PRIMARY KEY CLUSTERED  ([INVENTORY_ITEM_NAME], [PRIMARY_ALT], [DEPARTMENT_ID], [ATTRIBUTE_ID], [UNIT_ID], [LAYER_ID]) ON [PRIMARY]
-GO
diff --git a/Tables/dbo.XXAFL_CAB_DESIGN_ITEMS_ATTR_DELETE.sql b/Tables/dbo.XXAFL_CAB_DESIGN_ITEMS_ATTR_DELETE.sql
new file mode 100644
index 0000000..1d09342
--- /dev/null
+++ b/Tables/dbo.XXAFL_CAB_DESIGN_ITEMS_ATTR_DELETE.sql
@@ -0,0 +1,24 @@
+CREATE TABLE [dbo].[XXAFL_CAB_DESIGN_ITEMS_ATTR_DELETE]
+(
+[INVENTORY_ITEM_NAME] [nvarchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
+[ORGANIZATION_ID] [int] NULL,
+[PRIMARY_ALT] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
+[PROCESS_ID] [int] NULL,
+[DEPARTMENT_ID] [int] NOT NULL,
+[ATTRIBUTE_ID] [int] NOT NULL,
+[ATTRIBUTE_VALUE] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[UNIT_ID] [int] NOT NULL,
+[LAYER_ID] [int] NOT NULL,
+[START_DATE] [datetime] NULL,
+[END_DATE] [datetime] NULL,
+[USER_NAME] [nvarchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[CREATED_BY] [int] NULL,
+[CREATION_DATE] [datetime] NULL,
+[UPDATED_BY] [int] NULL,
+[UPDATE_DATE] [datetime] NULL,
+[CREATE_UPDATE_FLAG] [nvarchar] (5) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[BATCH_ID] [int] NULL
+) ON [PRIMARY]
+GO
+ALTER TABLE [dbo].[XXAFL_CAB_DESIGN_ITEMS_ATTR_DELETE] ADD CONSTRAINT [PK_XXAFL_CAB_DESIGN_ITEMS_ATTR] PRIMARY KEY CLUSTERED  ([INVENTORY_ITEM_NAME], [PRIMARY_ALT], [DEPARTMENT_ID], [ATTRIBUTE_ID], [UNIT_ID], [LAYER_ID]) ON [PRIMARY]
+GO
diff --git a/Tables/dbo.sales_pivot_bi.sql b/Tables/dbo.sales_pivot_bi.sql
deleted file mode 100644
index 96e3050..0000000
--- a/Tables/dbo.sales_pivot_bi.sql
+++ /dev/null
@@ -1,36 +0,0 @@
-CREATE TABLE [dbo].[sales_pivot_bi]
-(
-[BU] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[ORG] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[CALENDAR_QUARTER] [smallint] NULL,
-[FISCAL_QUARTER] [smallint] NULL,
-[Month] [smallint] NULL,
-[DATE] [varchar] (120) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[CUSTOMER_CLUSTER] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[CUSTOMER] [varchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[AGENT] [varchar] (40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[CUSTOMER_CLASS] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[CUSTOMER_CATEGORY] [varchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[TERRITORY_MARKET] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[MARKET] [varchar] (16) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[CLUSTER_ACCOUNT] [int] NULL,
-[SHIP_TO_STATE] [varchar] (22) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[SHIP_TO_COUNTRY] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[SHIP_TO_POSTAL_CODE] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[ITEM_NUMBER] [varchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[ITEM_DESCRIPTION] [varchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[REVENUE] [real] NULL,
-[QUANTITY] [real] NULL,
-[UOM] [varchar] (3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[PO] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[SO_NUMBER] [int] NULL,
-[SO_LINE] [real] NULL,
-[INVOICE_NUMBER] [int] NULL,
-[INVOICE_LINE] [int] NULL,
-[CSR] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[PRODUCT_CATEGORY] [varchar] (75) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[SO_LINE_ID] [int] NOT NULL IDENTITY(1, 1)
-) ON [PRIMARY]
-GO
-ALTER TABLE [dbo].[sales_pivot_bi] ADD CONSTRAINT [PK_sales_pivot_bi_1] PRIMARY KEY CLUSTERED  ([SO_LINE_ID]) ON [PRIMARY]
-GO
diff --git a/Tables/dbo.tblCableConstructionReferences.sql b/Tables/dbo.tblCableConstructionReferences.sql
index 874aa9f..fcead3e 100644
--- a/Tables/dbo.tblCableConstructionReferences.sql
+++ b/Tables/dbo.tblCableConstructionReferences.sql
@@ -36,7 +36,8 @@
 [ActiveStatusChangedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
 [ReleasedStatusChangedDate] [datetime] NULL,
 [ReleasedStatusChangedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[ImageGroupID] [int] NULL
+[ImageGroupID] [int] NULL,
+[IsCommoned] [bit] NULL CONSTRAINT [DF_tblCableConstructionReferences_IsCommoned] DEFAULT ((1))
 ) ON [PRIMARY]
 GO
 SET QUOTED_IDENTIFIER ON
@@ -152,3 +153,5 @@
 GO
 ALTER TABLE [dbo].[tblCableConstructionReferences] ADD CONSTRAINT [FK_tblCableConstructionReferences_tblUnitSeriesTemplateCatalog] FOREIGN KEY ([UnitIDTypeNumber]) REFERENCES [dbo].[tblUnitSeriesTemplateCatalog] ([ID])
 GO
+GRANT UPDATE ([ImageGroupID]) ON [dbo].[tblCableConstructionReferences] TO [NAA\SPB Premise SQL RO]
+GO
diff --git a/Tables/dbo.tblSwitchboard.sql b/Tables/dbo.tblSwitchboard.sql
deleted file mode 100644
index 85ea616..0000000
--- a/Tables/dbo.tblSwitchboard.sql
+++ /dev/null
@@ -1,14 +0,0 @@
-CREATE TABLE [dbo].[tblSwitchboard]
-(
-[SwitchboardID] [smallint] NOT NULL,
-[ItemNumber] [smallint] NOT NULL,
-[ItemText] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[Command] [smallint] NULL,
-[Argument] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
-[ID] [uniqueidentifier] NULL,
-[CreatedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF_tblSwitchboard_CreatedBy] DEFAULT (suser_sname()),
-[CreationDate] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF_tblSwitchboard_CreationDate] DEFAULT (getdate())
-) ON [PRIMARY]
-GO
-ALTER TABLE [dbo].[tblSwitchboard] ADD CONSTRAINT [PK_tblSwitchboard] PRIMARY KEY CLUSTERED  ([SwitchboardID], [ItemNumber]) ON [PRIMARY]
-GO
diff --git a/Views/CutSheet.vImage.sql b/Views/CutSheet.vImage.sql
index def1203..8544738 100644
--- a/Views/CutSheet.vImage.sql
+++ b/Views/CutSheet.vImage.sql
@@ -2,16 +2,24 @@
 GO
 SET ANSI_NULLS ON
 GO
+/*
+Author:		Bryan Eddy
+Date:		2/20/2018
+Desc:		Get cable images
+Version:	2
+Update:		Added ImageID and ImageGroupID
+
+*/
 CREATE VIEW [CutSheet].[vImage]
 AS
-SELECT        CutSheet.Images.ImageName, CutSheet.ImageType.ImageTypeName, dbo.tblCableConstructionReferences.Base, CutSheet.ImageGroupReference.Color, 
-                         CutSheet.ImageGroup.ImageGroupName, CutSheet.ImageGroupReference.ImageTypeID, CutSheet.ImageGroupReference.Armored
+SELECT        Images.ImageName, ImageType.ImageTypeName, tblCableConstructionReferences.Base, ImageGroupReference.Color, 
+                         ImageGroup.ImageGroupName, ImageGroupReference.ImageTypeID, ImageGroupReference.Armored, Images.ImageID, ImageGroup.ImageGroupID, images.ImageFileType
 FROM            CutSheet.Images INNER JOIN
                          CutSheet.ImageType ON CutSheet.Images.ImageTypeID = CutSheet.ImageType.ImageTypeID INNER JOIN
                          CutSheet.ImageGroupReference ON CutSheet.Images.ImageID = CutSheet.ImageGroupReference.ImageID AND 
                          CutSheet.Images.ImageTypeID = CutSheet.ImageGroupReference.ImageTypeID AND CutSheet.Images.Color = CutSheet.ImageGroupReference.Color AND 
                          CutSheet.Images.Armored = CutSheet.ImageGroupReference.Armored INNER JOIN
-                         dbo.tblCableConstructionReferences ON CutSheet.ImageGroupReference.ImageGroupID = dbo.tblCableConstructionReferences.ImageGroupID INNER JOIN
+                         dbo.tblCableConstructionReferences ON CutSheet.ImageGroupReference.ImageGroupID = tblCableConstructionReferences.ImageGroupID INNER JOIN
                          CutSheet.ImageGroup ON CutSheet.ImageGroupReference.ImageGroupID = CutSheet.ImageGroup.ImageGroupID
 GO
 EXEC sp_addextendedproperty N'MS_DiagramPane1', N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
diff --git a/Views/CutSheet.vImageGroupPivotImages.sql b/Views/CutSheet.vImageGroupPivotImages.sql
new file mode 100644
index 0000000..f46149f
--- /dev/null
+++ b/Views/CutSheet.vImageGroupPivotImages.sql
@@ -0,0 +1,32 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+/*
+Author:		Bryan Eddy
+Date:		2/20/2018
+Desc:		Pivot view of each image group with the isometric and crosssection imageID
+
+*/
+
+CREATE VIEW [CutSheet].[vImageGroupPivotImages]
+as
+
+SELECT pvt.ImageGroupID,ImageGroupName,ImageGroupDesc, pvt.Color, pvt.Armored,[2] AS IsometricImageID, Iso.ImageName AS IsometricImageName,iso.ImageFileType AS IsoImageFileType,
+ [1] AS CrossSectionImageID, CrossSec.ImageName AS CrossSectionImageName, CrossSec.ImageFileType AS CrossImageFileType
+
+FROM 
+	(
+	SELECT i.ImageGroupName,I.ImageGroupDesc, B.ImageTypeID, g.ImageID, g.Color, g.Armored
+	,I.ImageGroupID
+	FROM CutSheet.Images g INNER JOIN CutSheet.ImageGroupReference K ON K.ImageID = G.ImageID
+	INNER JOIN CutSheet.ImageGroup I ON I.ImageGroupID = K.ImageGroupID 
+	INNER JOIN CutSheet.ImageType B ON B.ImageTypeID = g.ImageTypeID
+	) AS X
+PIVOT
+(
+MAX(ImageID)
+FOR ImageTypeID IN([1],[2]) 
+) AS pvt left JOIN CutSheet.Images CrossSec ON CrossSec.ImageID = pvt.[1]
+		left JOIN cutsheet.Images Iso ON Iso.ImageID = pvt.[2]
+GO
diff --git a/Views/Schedule.vInactiveItems.sql b/Views/Schedule.vInactiveItems.sql
new file mode 100644
index 0000000..e102030
--- /dev/null
+++ b/Views/Schedule.vInactiveItems.sql
@@ -0,0 +1,17 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+CREATE VIEW [Schedule].[vInactiveItems]
+as
+SELECT K.[New Oracle Part #],K.Reason,k.Customer, I.[Reel No], I.[Order Qty], I.Customer CustomerOrder, P.[Buff Line #], I.[Schedule date], I.Desgin, I.Job#, O.[Promise Date], I.[Shipped Qty]
+, P.Shipped, I.[Type Order], k.Active
+FROM dbo.[Basic Product Construction] K INNER JOIN dbo.[Cust Order Specifications] I ON I.[Item No] = K.[New Oracle Part #]
+INNER JOIN dbo.[Printed Labels (Data Products)] P ON  P.[Order Qty] = I.[Order Qty] AND p.[Reel No] = i.[Co Number]
+INNER JOIN dbo.[New Orders Spreadsheet] O ON O.[Order #] = I.[Reel No]
+INNER JOIN dbo.tblCableConstructionReferences R ON R.BASE = K.Base
+WHERE (K.Active = 0 or r.active = 0)  AND P.Shipped = 0 AND I.[Type Order] IN ('new' , 'sset') 
+and LEFT(K.[New Oracle Part #],2) NOT IN ('bu','rb','fb','cu')
+GO
diff --git a/Views/Setup.vSetupAttributes_Scheduling.sql b/Views/Setup.vSetupAttributes_Scheduling.sql
index 4026d3f..2bd52d5 100644
--- a/Views/Setup.vSetupAttributes_Scheduling.sql
+++ b/Views/Setup.vSetupAttributes_Scheduling.sql
@@ -11,7 +11,7 @@
 CREATE VIEW [Setup].[vSetupAttributes_Scheduling]
 AS
 /*and AttributeName like '%pos%'*/
-SELECT        Setup.tblProcessMachines.ProcessID, Setup.tblProcessMachines.MachineID, Setup.tblProcessMachines.PlanetTogetherMachineNumber, Setup.tblAttributes.AttributeID, 
+SELECT        tblProcessMachines.ProcessID, tblProcessMachines.MachineID, MachineMapping.PlanetTogetherMachineNumber, Setup.tblAttributes.AttributeID, 
                          Setup.tblAttributes.AttributeDesc, Setup.tblAttributes.AttributeName, Setup.tblSetup.SetupID, Setup.tblSetup.SetupNumber, Setup.tblSetupAttributes.AttributeValue, 
                          Setup.tblSetupAttributes.MachineSpecific, Setup.tblSetupAttributes.MinValue, Setup.tblAttributes.Active, Setup.tblSetupAttributes.EffectiveDate, 
                          Setup.tblAttributes.AttrEffectiveDate, Setup.tblAttributes.AttributeGroupID, Setup.tblSetup.IneffectiveDate, Setup.tblAttributes.AttributeUOM
@@ -19,10 +19,10 @@
 FROM            Setup.tblAttributes INNER JOIN
                          Setup.tblSetupAttributes ON Setup.tblAttributes.AttributeID = Setup.tblSetupAttributes.AttributeID INNER JOIN
                          Setup.tblSetup ON Setup.tblSetupAttributes.SetupID = Setup.tblSetup.SetupID AND Setup.tblSetupAttributes.MachineID = Setup.tblSetup.MachineID INNER JOIN
-                         Setup.tblProcessMachines ON Setup.tblSetup.MachineID = Setup.tblProcessMachines.MachineID AND 
-                         Setup.tblSetup.ProcessID = Setup.tblProcessMachines.ProcessID
+                         (Setup.tblProcessMachines INNER JOIN Setup.MachineMapping ON tblProcessMachines.processid=MachineMapping.processid AND tblProcessMachines.machineid=MachineMapping.machineid) ON Setup.tblSetup.MachineID = tblProcessMachines.MachineID AND 
+                         Setup.tblSetup.ProcessID = tblProcessMachines.ProcessID
 WHERE        (Setup.tblAttributes.AttrIneffectiveDate >= GETDATE()) AND (Setup.tblSetup.IneffectiveDate >= GETDATE()) and Setup.tblSetupAttributes.IneffectiveDate >=getdate() --AND (Setup.tblSetup.SetupNumber = 'M103')
-			AND setup.tblProcessMachines.Active <> 0
+			AND tblProcessMachines.Active <> 0
 
 
 --ORDER BY AttributeName
diff --git a/Views/Setup.vSetupLineSpeed.sql b/Views/Setup.vSetupLineSpeed.sql
index 85f45f0..0f18629 100644
--- a/Views/Setup.vSetupLineSpeed.sql
+++ b/Views/Setup.vSetupLineSpeed.sql
@@ -29,13 +29,13 @@
 	 FROM  Setup.tblSetup K
 	 INNER JOIN setup.tblSetupAttributes E ON E.SetupID = K.SetupID
 	 INNER JOIN [Setup].[tblAttributes] I ON E.AttributeID = I.AttributeID
-	 INNER JOIN setup.tblProcessMachines B ON B.MachineID = K.MachineID
-	 AND B.ProcessID = E.ProcessID
+	 INNER JOIN (Setup.tblProcessMachines AS BLeft INNER JOIN Setup.MachineMapping AS BRight ON BLeft.processid=BRight.processid AND BLeft.machineid=BRight.machineid) ON BLeft.MachineID = K.MachineID
+	 AND BLeft.ProcessID = E.ProcessID
 	 WHERE I.AttributeName LIKE 'LINESPEED' 
 	  --and K.IneffectiveDate > GETDATE() 
 	  AND I.AttrIneffectiveDate >= GETDATE()
 	 and   e.IneffectiveDate >= GETDATE()
-	 AND b.Active <> 0 AND K.IneffectiveDate >= getdate()
+	 AND BLeft.Active <> 0 AND K.IneffectiveDate >= getdate()
 	 and isnumeric(AttributeValue) = 1 
 		),
 	cteBomSetup(Item,OperationSeqNum,SetupLocation, BomSetup,Alternate,UnitId,LayerID)
diff --git a/Views/Setup.vSetupLineSpeed_New.sql b/Views/Setup.vSetupLineSpeed_New.sql
index b5181cd..51aecd9 100644
--- a/Views/Setup.vSetupLineSpeed_New.sql
+++ b/Views/Setup.vSetupLineSpeed_New.sql
@@ -29,13 +29,13 @@
 	 FROM  Setup.tblSetup K
 	 INNER JOIN setup.tblSetupAttributes E ON E.SetupID = K.SetupID
 	 INNER JOIN [Setup].[tblAttributes] I ON E.AttributeID = I.AttributeID
-	 INNER JOIN setup.tblProcessMachines B ON B.MachineID = K.MachineID
-	 AND B.ProcessID = E.ProcessID
+	 INNER JOIN (Setup.tblProcessMachines AS BLeft INNER JOIN Setup.MachineMapping AS BRight ON BLeft.processid=BRight.processid AND BLeft.machineid=BRight.machineid) ON BLeft.MachineID = K.MachineID
+	 AND BLeft.ProcessID = E.ProcessID
 	 WHERE I.AttributeName LIKE 'LINESPEED' 
 	  --and K.IneffectiveDate > GETDATE() 
 	  AND I.AttrIneffectiveDate >= GETDATE()
 	 and   e.IneffectiveDate >= GETDATE()
-	 AND b.Active <> 0 AND K.IneffectiveDate >= getdate()
+	 AND BLeft.Active <> 0 AND K.IneffectiveDate >= getdate()
 	 and isnumeric(AttributeValue) = 1 
 		),
 	--cteBomSetup(Item,OperationSeqNum,SetupLocation, BomSetup,Alternate,UnitId,LayerID)
diff --git a/Views/Setup.vSetupSheet.sql b/Views/Setup.vSetupSheet.sql
index 571532f..e338feb 100644
--- a/Views/Setup.vSetupSheet.sql
+++ b/Views/Setup.vSetupSheet.sql
@@ -9,7 +9,7 @@
 CREATE VIEW [Setup].[vSetupSheet]
 AS
 /*and AttributeName like '%pos%'*/
-SELECT        Setup.tblProcessMachines.ProcessID, Setup.tblProcessMachines.MachineID, Setup.tblProcessMachines.MachineNumber, Setup.tblAttributes.AttributeID, 
+SELECT        tblProcessMachines.ProcessID, tblProcessMachines.MachineID, tblProcessMachines.MachineNumber, Setup.tblAttributes.AttributeID, 
                          Setup.tblAttributes.AttributeDesc, Setup.tblAttributes.AttributeName, Setup.tblSetup.SetupID, Setup.tblSetup.SetupNumber, Setup.tblSetupAttributes.AttributeValue, 
                          Setup.tblSetupAttributes.MachineSpecific, Setup.tblSetupAttributes.MinValue, Setup.tblAttributes.Active, Setup.tblSetupAttributes.EffectiveDate, 
                          Setup.tblAttributes.AttrEffectiveDate, Setup.tblAttributes.AttributeGroupID, Setup.tblSetup.IneffectiveDate, Setup.tblAttributes.AttributeUOM
@@ -17,10 +17,10 @@
 FROM            Setup.tblAttributes INNER JOIN
                          Setup.tblSetupAttributes ON Setup.tblAttributes.AttributeID = Setup.tblSetupAttributes.AttributeID INNER JOIN
                          Setup.tblSetup ON Setup.tblSetupAttributes.SetupID = Setup.tblSetup.SetupID AND Setup.tblSetupAttributes.MachineID = Setup.tblSetup.MachineID INNER JOIN
-                         Setup.tblProcessMachines ON Setup.tblSetup.MachineID = Setup.tblProcessMachines.MachineID AND 
-                         Setup.tblSetup.ProcessID = Setup.tblProcessMachines.ProcessID
+                         (Setup.tblProcessMachines INNER JOIN Setup.MachineMapping ON tblProcessMachines.processid=MachineMapping.processid AND tblProcessMachines.machineid=MachineMapping.machineid) ON Setup.tblSetup.MachineID = tblProcessMachines.MachineID AND 
+                         Setup.tblSetup.ProcessID = tblProcessMachines.ProcessID
 WHERE        (Setup.tblAttributes.AttrIneffectiveDate >= GETDATE()) AND (Setup.tblSetup.IneffectiveDate >= GETDATE()) and Setup.tblSetupAttributes.IneffectiveDate >=getdate() --AND (Setup.tblSetup.SetupNumber = 'M103')
-AND setup.tblProcessMachines.Active <> 0
+AND tblProcessMachines.Active <> 0
 
 --ORDER BY AttributeName
 
diff --git a/Views/Setup.vSetup_Cable_Machine.sql b/Views/Setup.vSetup_Cable_Machine.sql
index f87b9d8..bdff344 100644
--- a/Views/Setup.vSetup_Cable_Machine.sql
+++ b/Views/Setup.vSetup_Cable_Machine.sql
@@ -22,11 +22,11 @@
       ,[FiberCount]
       ,[NominalOD]
       ,[Height]
-      ,[JacketMaterial], K.MachineID, E.AttributeValue, I.AttributeName, E.AttributeValue AS [New_Scheduling_Line_Speed],E.AttributeValue as LineSpeed, e.ProcessID, MachineSpecific, B.MachineNumber
+      ,[JacketMaterial], K.MachineID, E.AttributeValue, I.AttributeName, E.AttributeValue AS [New_Scheduling_Line_Speed],E.AttributeValue as LineSpeed, e.ProcessID, MachineSpecific, BLeft.MachineNumber
  FROM Setup.vSetup_Cable_Base G INNER JOIN Setup.tblSetup K ON G.Setup = K.SetupNumber
  INNER JOIN setup.tblSetupAttributes E ON E.SetupID = K.SetupID
  INNER JOIN [Setup].[tblAttributes] I ON E.AttributeID = I.AttributeID
- INNER JOIN setup.tblProcessMachines B ON B.ProcessID = E.ProcessID AND B.MachineID = K.MachineID
+ INNER JOIN (Setup.tblProcessMachines AS BLeft INNER JOIN Setup.MachineMapping AS BRight ON BLeft.processid=BRight.processid AND BLeft.machineid=BRight.machineid) ON BLeft.ProcessID = E.ProcessID AND BLeft.MachineID = K.MachineID
  WHERE I.AttributeName LIKE 'LINESPEED' AND E.IneffectiveDate > GETDATE() AND I.AttrIneffectiveDate > GETDATE()
  and e.AttributeValue <> 'tbd' and E.ProcessID in (510,523,615) --and base like 't%'
  --AND --fibercount <12 and 
diff --git a/Views/dbo.vBurnListingInventory.sql b/Views/dbo.vBurnListingInventory.sql
index a3dc42a..89a2dea 100644
--- a/Views/dbo.vBurnListingInventory.sql
+++ b/Views/dbo.vBurnListingInventory.sql
@@ -2,6 +2,7 @@
 GO
 SET ANSI_NULLS ON
 GO
+
 CREATE VIEW [dbo].[vBurnListingInventory]
 AS
 
@@ -32,12 +33,12 @@
 ,tblCableConstructions.CablePasses
 --,substring( PrintLine3, charindex('OF', PrintLine3),CHARINDEX(' ',PrintLine3,CHARINDEX('OF',PrintLine3))-CHARINDEX('OF',PrintLine3)) as BurnPrint 
 FROM DBO.AFLPRD_acswopattn_CAB_SNF K 
-RIGHT JOIN dbo.CableUnion ON K.Item = dbo.CableUnion.Oracle
+INNER JOIN dbo.CableUnion ON K.Item = dbo.CableUnion.Oracle
 INNER JOIN tblCableConstructionReferences ON tblCableConstructionReferences.Base = dbo.CableUnion.Base
 INNER JOIN tblCableConstructions ON tblCableConstructionReferences.BaseID = tblCableConstructions.BaseID
 INNER JOIN tblBurnListing ON dbo.CableUnion.Base = tblBurnListing.base AND CableUnion.ListingCompany = tblBurnListing.ListingCompany
 INNER JOIN dbo.AFLPRD_INVSysItemCost_CAB B ON dbo.CableUnion.Oracle = B.ItemNumber
 --WHERE tblBurnListing.ListingCompany IN ('etl', 'ul')
-WHERE NominalOD <>0 --AND ITEM = 'PD05668-01' 
+WHERE NominalOD <>0 AND K.AvailQty <> 0
 
 GO
diff --git a/Views/dbo.vBurnListingLengthRequirement.sql b/Views/dbo.vBurnListingLengthRequirement.sql
new file mode 100644
index 0000000..fd1704b
--- /dev/null
+++ b/Views/dbo.vBurnListingLengthRequirement.sql
@@ -0,0 +1,65 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+/*
+Author:		Bryan Eddy
+Date:		2/28/2018
+Desc:		Show the calculated length and cost for each burn test type
+Version:	1
+Update:		Initial Creation
+*/
+
+CREATE VIEW [dbo].[vBurnListingLengthRequirement]
+AS
+WITH cteItemBurnInfo
+AS(
+	SELECT DISTINCT dbo.CableUnion.Oracle
+	,CASE WHEN ISNUMERIC(HEIGHT) =1 THEN SQRT(1.1284*(NominalOD*Height)) ELSE NominalOD END AS BurnNominalOD
+	, dbo.CableUnion.[Item No] AS ItemNo
+	, CableUnion.ListingCompany AS ListingCompanyPrint
+	, NominalOD
+	, B.Item_Status
+	, B.Material_Cost Item_Cost
+	, tblBurnListing.ListingTab
+	, tblBurnListing.ListingSection
+	, tblBurnListing.ListingConstruction
+	, tblBurnListing.ListingCompany
+	,printline2 + ' ' + printline3 AS CablePrint
+	,tblCableConstructions.CablePasses
+	,Height
+	--,substring( PrintLine3, charindex('OF', PrintLine3),CHARINDEX(' ',PrintLine3,CHARINDEX('OF',PrintLine3))-CHARINDEX('OF',PrintLine3)) as BurnPrint 
+	FROM --DBO.AFLPRD_acswopattn_CAB_SNF K 
+	dbo.CableUnion --ON K.Item = dbo.CableUnion.Oracle
+	INNER JOIN tblCableConstructionReferences ON tblCableConstructionReferences.Base = dbo.CableUnion.Base
+	INNER JOIN tblCableConstructions ON tblCableConstructionReferences.BaseID = tblCableConstructions.BaseID
+	INNER JOIN tblBurnListing ON dbo.CableUnion.Base = tblBurnListing.base AND CableUnion.ListingCompany = tblBurnListing.ListingCompany
+	INNER JOIN dbo.AFLPRD_INVSysItemCost_CAB B ON dbo.CableUnion.Oracle = B.ItemNumber
+	WHERE tblBurnListing.ListingCompany IN ('etl', 'ul') AND B.Item_Status <> 'obsolete'
+	AND NominalOD <>0 AND tblCableConstructionReferences.Active = 1 AND ReleasedDesign = 1
+	--WHERE -- AND K.AvailQty <> 0 AND K.Locator NOT like 'wop%'
+)
+,cteBurnCalculation
+AS(
+SELECT 	 round([NominalOD]*0.03936996,4)AS NomODInches
+	, CAST(CEILING((12/(BurnNominalOD*0.03936996))*16.5*1.1/3.281) AS INT) AS BurnLength_M_OFNR
+	, CAST(CEILING((6990/BurnNominalOD)*1.1/3) AS int) AS BurnLength_M_OFNP
+	,E.Length_Meters AS VerticalTrayTestLength_M
+	,CEILING(((4/(BurnNominalOD*0.03936996))+0.33)*3.281) AS BurnLength_M_LS
+	,g.*
+FROM cteItemBurnInfo g CROSS APPLY dbo.GetBurnVerticalTrayTestLength(g.NominalOD) E
+)
+SELECT DISTINCT 
+		CEILING(BurnLength_M_OFNR * Item_Cost) AS CableCost_OFNR
+		,CEILING(BurnLength_M_OFNP * Item_Cost) AS CableCost_OFNP
+		,CEILING(VerticalTrayTestLength_M * Item_Cost) AS CableCost_VerticalTray
+		,CEILING(BurnLength_M_LS * Item_Cost) AS CableCost_LS
+		,e.*
+		--,g.Locator, g.AvailQty, g.ItemDesc, g.LotNumber
+FROM cteBurnCalculation  e --INNER JOIN dbo.AFLPRD_acswopattn_CAB_SNF g ON g.Item = e.Oracle
+
+
+
+
+
+GO
diff --git a/Views/dbo.vCableConstruction.sql b/Views/dbo.vCableConstruction.sql
index 89019a1..1bba0f8 100644
--- a/Views/dbo.vCableConstruction.sql
+++ b/Views/dbo.vCableConstruction.sql
@@ -2,12 +2,6 @@
 GO
 SET ANSI_NULLS ON
 GO
-
-
-
-
-
-
 CREATE VIEW [dbo].[vCableConstruction]
 AS
 SELECT         DISTINCT dbo.tblCableConstructionReferences.Base, dbo.tblCableConstructionReferences.ConstructionDescription, dbo.tblCableConstructions.NominalOD AS OD, 
@@ -17,7 +11,7 @@
                           dbo.tblCableConstructionReferences.TBType, dbo.tblCableConstructionReferences.BaseID, dbo.tblCableConstructions.Additive, 
                          dbo.tblCableTightBufferReference.TBTypeID, dbo.tblCableConstructionReferences.FibersPerBundle, dbo.tblCableTightBufferReference.TightBuffered, 
                          dbo.tblCableConstructionReferences.ProductID, dbo.tblCableConstructionReferences.DesignTypeID, dbo.tblCableConstructionReferences.CableFamily
-						 ,FiberCount, dbo.tblCableConstructionReferences.SetupID, StandardOperation
+						 ,FiberCount, dbo.tblCableConstructionReferences.SetupID, StandardOperation, IsCommoned
 FROM            dbo.tblCableConstructions INNER JOIN
                          dbo.tblCableConstructionReferences INNER JOIN
                          dbo.CableRunSpeeds ON dbo.tblCableConstructionReferences.PrefixID = dbo.CableRunSpeeds.PrefixID ON 
diff --git a/Views/dbo.vConstructionSearch.sql b/Views/dbo.vConstructionSearch.sql
index d03223a..842bb26 100644
--- a/Views/dbo.vConstructionSearch.sql
+++ b/Views/dbo.vConstructionSearch.sql
@@ -30,7 +30,7 @@
                          dbo.tblCableConstructionReferences.ReleasedDesign, dbo.tblCableConstructionReferences.TBType, dbo.tblDesignTypes.SalesForceDescription, 
                          CASE WHEN CablePasses = 1 THEN '' ELSE SUBSTRING(dbo.vSubunitBases.[Level 1 Product], 3, 3) END AS SubFiberCount, 
                          dbo.tblCableConstructionReferences.FiberCount, dbo.tblDesignCodeJacket.JacketDescription_SalesForce, 
-                         dbo.tblCableConstructionReferences.ApprovedForQuoting, dbo.tblCableConstructionReferences.SetupID AS ConstructionID
+                         dbo.tblCableConstructionReferences.ApprovedForQuoting, dbo.tblCableConstructionReferences.SetupID AS ConstructionID, ImageGroupID
 FROM            dbo.tblCableConstructionReferences LEFT OUTER JOIN
                          dbo.tblDesignTypes ON dbo.tblCableConstructionReferences.DesignTypeID = dbo.tblDesignTypes.DesignTypeID LEFT OUTER JOIN
                          dbo.tblDesignCodeJacket ON dbo.tblCableConstructionReferences.CableFamily = dbo.tblDesignCodeJacket.CableLetter AND 
diff --git a/Views/dbo.vCosntructionReferenceActiveDesignCodeExtensions.sql b/Views/dbo.vCosntructionReferenceActiveDesignCodeExtensions.sql
new file mode 100644
index 0000000..0102664
--- /dev/null
+++ b/Views/dbo.vCosntructionReferenceActiveDesignCodeExtensions.sql
@@ -0,0 +1,20 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+/*
+Author:		Bryan Eddy
+Date:		2/28/2018
+Desc:		Consolidated list of active design code extensions to check during item builds
+Version:	1
+Update:		Initial Creation
+
+*/
+
+CREATE VIEW [dbo].[vCosntructionReferenceActiveDesignCodeExtensions]
+AS
+SELECT  DISTINCT DesignExtension
+FROM dbo.tblCableConstructionReferences
+WHERE DesignExtension IS NOT NULL AND Active = 1
+
+GO
diff --git a/Views/dbo.vCreateItemBase.sql b/Views/dbo.vCreateItemBase.sql
index b12dec8..682725c 100644
--- a/Views/dbo.vCreateItemBase.sql
+++ b/Views/dbo.vCreateItemBase.sql
@@ -2,21 +2,16 @@
 GO
 SET ANSI_NULLS ON
 GO
-
-
-
-
-
 CREATE VIEW [dbo].[vCreateItemBase]
 AS
-SELECT        dbo.tblCableConstructionReferences.Base, dbo.tblCableConstructionReferences.ConstructionDescription, dbo.tblCableConstructions.NominalOD AS OD, 
+SELECT       DISTINCT dbo.tblCableConstructionReferences.Base, dbo.tblCableConstructionReferences.ConstructionDescription, dbo.tblCableConstructions.NominalOD AS OD, 
                          dbo.tblCableConstructionReferences.NumSubPositions AS NumPositions, dbo.tblCableConstructionReferences.NumSubFillers AS NumFillers, 
-                         dbo.tblCableConstructions.JacketMaterial, COUNT(dbo.CableUnion.Base) AS CountOfBase, dbo.tblCableConstructionReferences.Active, 
+                         dbo.tblCableConstructions.JacketMaterial, '' AS CountOfBase, dbo.tblCableConstructionReferences.Active, 
                          dbo.tblCableConstructionReferences.DesignCode, dbo.tblCableConstructions.CablePasses AS Location, dbo.tblCableConstructionReferences.ReleasedDesign, 
                          dbo.tblCableTBType.TBLetter, dbo.tblCableConstructionReferences.TBType, dbo.tblCableConstructionReferences.BaseID, dbo.tblCableConstructions.Additive, 
                          dbo.tblCableTightBufferReference.TBTypeID, dbo.tblCableConstructionReferences.FibersPerBundle, dbo.tblCableTightBufferReference.TightBuffered, 
                          dbo.tblCableConstructionReferences.ProductID, dbo.tblCableConstructionReferences.DesignTypeID, dbo.tblCableConstructionReferences.CableFamily
-						 ,FiberCount, dbo.tblCableConstructionReferences.SetupID, StandardOperation
+						 ,FiberCount, dbo.tblCableConstructionReferences.SetupID, StandardOperation, DesignExtension
 FROM            dbo.tblCableConstructions INNER JOIN
                          dbo.tblCableConstructionReferences INNER JOIN
                          dbo.CableRunSpeeds ON dbo.tblCableConstructionReferences.PrefixID = dbo.CableRunSpeeds.PrefixID ON 
@@ -24,14 +19,14 @@
                          dbo.CableUnion ON dbo.tblCableConstructionReferences.Base = dbo.CableUnion.Base INNER JOIN
                          dbo.tblCableTightBufferReference ON dbo.tblCableConstructionReferences.TBType = dbo.tblCableTightBufferReference.TBType INNER JOIN
                          dbo.tblCableTBType ON dbo.tblCableTightBufferReference.TBTypeID = dbo.tblCableTBType.TBIndicatorID
-GROUP BY dbo.tblCableConstructionReferences.Base, dbo.tblCableConstructionReferences.ConstructionDescription, dbo.tblCableConstructions.NominalOD, 
-                         dbo.tblCableConstructionReferences.NumSubPositions, dbo.tblCableConstructionReferences.NumSubFillers, dbo.tblCableConstructions.JacketMaterial, 
-                         dbo.tblCableConstructionReferences.Active, dbo.tblCableConstructionReferences.DesignCode, dbo.tblCableConstructions.CablePasses, 
-                         dbo.tblCableConstructionReferences.ReleasedDesign, dbo.tblCableTBType.TBLetter, dbo.tblCableConstructionReferences.TBType, 
-                         dbo.tblCableConstructionReferences.BaseID, dbo.tblCableConstructions.Additive, dbo.tblCableTightBufferReference.TBTypeID, 
-                         dbo.tblCableConstructionReferences.FibersPerBundle, dbo.tblCableTightBufferReference.TightBuffered, dbo.tblCableConstructionReferences.ProductID, 
-                         dbo.tblCableConstructionReferences.DesignTypeID, dbo.tblCableConstructionReferences.CableFamily,FiberCount,dbo.tblCableConstructionReferences.SetupID,StandardOperation
-HAVING        (dbo.tblCableConstructionReferences.Active <> 0)
+--GROUP BY dbo.tblCableConstructionReferences.Base, dbo.tblCableConstructionReferences.ConstructionDescription, dbo.tblCableConstructions.NominalOD, 
+--                         dbo.tblCableConstructionReferences.NumSubPositions, dbo.tblCableConstructionReferences.NumSubFillers, dbo.tblCableConstructions.JacketMaterial, 
+--                         dbo.tblCableConstructionReferences.Active, dbo.tblCableConstructionReferences.DesignCode, dbo.tblCableConstructions.CablePasses, 
+--                         dbo.tblCableConstructionReferences.ReleasedDesign, dbo.tblCableTBType.TBLetter, dbo.tblCableConstructionReferences.TBType, 
+--                         dbo.tblCableConstructionReferences.BaseID, dbo.tblCableConstructions.Additive, dbo.tblCableTightBufferReference.TBTypeID, 
+--                         dbo.tblCableConstructionReferences.FibersPerBundle, dbo.tblCableTightBufferReference.TightBuffered, dbo.tblCableConstructionReferences.ProductID, 
+--                         dbo.tblCableConstructionReferences.DesignTypeID, dbo.tblCableConstructionReferences.CableFamily,FiberCount,dbo.tblCableConstructionReferences.SetupID,StandardOperation
+WHERE        (dbo.tblCableConstructionReferences.Active <> 0)
 
 
 
diff --git a/Views/dbo.vCreateItemBaseCableExtensions.sql b/Views/dbo.vCreateItemBaseCableExtensions.sql
index 91c76f0..f369c64 100644
--- a/Views/dbo.vCreateItemBaseCableExtensions.sql
+++ b/Views/dbo.vCreateItemBaseCableExtensions.sql
@@ -2,18 +2,15 @@
 GO
 SET ANSI_NULLS ON
 GO
-
-
-
 CREATE VIEW [dbo].[vCreateItemBaseCableExtensions]
 AS
 SELECT        dbo.tblCableConstructionReferences.Base, dbo.tblCableConstructionReferences.ConstructionDescription, dbo.tblCableConstructions.NominalOD AS OD, 
                          dbo.tblCableConstructionReferences.NumSubPositions AS NumPositions, dbo.tblCableConstructionReferences.NumSubFillers AS NumFillers, 
-                         dbo.tblCableConstructions.JacketMaterial, COUNT(dbo.CableUnion.Base) AS CountOfBase, dbo.tblCableConstructionReferences.Active, 
+                         dbo.tblCableConstructions.JacketMaterial, '' AS CountOfBase, dbo.tblCableConstructionReferences.Active, 
                          dbo.tblCableConstructionReferences.DesignCode, dbo.tblCableConstructions.CablePasses AS Location, dbo.tblCableConstructionReferences.ReleasedDesign, 
                          dbo.tblCableTBType.TBLetter, dbo.tblCableConstructionReferences.TBType, dbo.tblCableConstructionReferences.BaseID, dbo.tblCableConstructions.Additive, 
                          dbo.tblCableTightBufferReference.TBTypeID, dbo.[Product Desrcriptions].[Level 1 Product], tblCableConstructionReferences_1.FibersPerBundle, 
-                         dbo.[Product Desrcriptions].SubFiller, dbo.tblCableExtensionReference.ExtensionIndicator, dbo.tblCableTightBufferReference.TightBuffered
+                         dbo.[Product Desrcriptions].SubFiller, dbo.tblCableExtensionReference.ExtensionIndicator, dbo.tblCableTightBufferReference.TightBuffered, tblCableConstructionReferences.DesignExtension
 FROM            dbo.tblCableConstructionReferences AS tblCableConstructionReferences_1 INNER JOIN
                          dbo.tblCableConstructions INNER JOIN
                          dbo.tblCableConstructionReferences INNER JOIN
@@ -26,15 +23,15 @@
                          dbo.tblCableTBType ON dbo.tblCableTightBufferReference.TBTypeID = dbo.tblCableTBType.TBIndicatorID ON 
                          tblCableConstructionReferences_1.Base = dbo.[Product Desrcriptions].[Level 1 Product] INNER JOIN
                          dbo.tblCableExtensionReference ON tblCableConstructionReferences_1.FibersPerBundle = dbo.tblCableExtensionReference.ExtensionNumber
-GROUP BY dbo.tblCableConstructionReferences.Base, dbo.tblCableConstructionReferences.ConstructionDescription, dbo.tblCableConstructions.NominalOD, 
-                         dbo.tblCableConstructionReferences.NumSubPositions, dbo.tblCableConstructionReferences.NumSubFillers, dbo.tblCableConstructions.JacketMaterial, 
-                         dbo.tblCableConstructionReferences.Active, dbo.tblCableConstructionReferences.DesignCode, dbo.tblCableConstructions.CablePasses, 
-                         dbo.tblCableConstructionReferences.ReleasedDesign, dbo.tblCableTBType.TBLetter, dbo.tblCableConstructionReferences.TBType, 
-                         dbo.tblCableConstructionReferences.BaseID, dbo.tblCableConstructions.Additive, dbo.tblCableTightBufferReference.TBTypeID, 
-                         dbo.tblCableConstructionReferences.FibersPerBundle, dbo.[Product Desrcriptions].[Level 1 Product], tblCableConstructionReferences_1.FibersPerBundle, 
-                         dbo.[Product Desrcriptions].SubFiller, tblCableConstructionReferences_1.Base, dbo.tblCableExtensionReference.ExtensionIndicator, 
-                         dbo.tblCableTightBufferReference.TightBuffered
-HAVING        (dbo.[Product Desrcriptions].SubFiller = 0) AND (dbo.tblCableConstructionReferences.Active <> 0)
+--GROUP BY dbo.tblCableConstructionReferences.Base, dbo.tblCableConstructionReferences.ConstructionDescription, dbo.tblCableConstructions.NominalOD, 
+--                         dbo.tblCableConstructionReferences.NumSubPositions, dbo.tblCableConstructionReferences.NumSubFillers, dbo.tblCableConstructions.JacketMaterial, 
+--                         dbo.tblCableConstructionReferences.Active, dbo.tblCableConstructionReferences.DesignCode, dbo.tblCableConstructions.CablePasses, 
+--                         dbo.tblCableConstructionReferences.ReleasedDesign, dbo.tblCableTBType.TBLetter, dbo.tblCableConstructionReferences.TBType, 
+--                         dbo.tblCableConstructionReferences.BaseID, dbo.tblCableConstructions.Additive, dbo.tblCableTightBufferReference.TBTypeID, 
+--                         dbo.tblCableConstructionReferences.FibersPerBundle, dbo.[Product Desrcriptions].[Level 1 Product], tblCableConstructionReferences_1.FibersPerBundle, 
+--                         dbo.[Product Desrcriptions].SubFiller, tblCableConstructionReferences_1.Base, dbo.tblCableExtensionReference.ExtensionIndicator, 
+--                         dbo.tblCableTightBufferReference.TightBuffered
+WHERE        (dbo.[Product Desrcriptions].SubFiller = 0) AND (dbo.tblCableConstructionReferences.Active <> 0)
 
 
 
diff --git a/Views/dbo.vCreateItemBaseCenterMember.sql b/Views/dbo.vCreateItemBaseCenterMember.sql
index d8584bd..233147e 100644
--- a/Views/dbo.vCreateItemBaseCenterMember.sql
+++ b/Views/dbo.vCreateItemBaseCenterMember.sql
@@ -2,24 +2,22 @@
 GO
 SET ANSI_NULLS ON
 GO
-
-
 CREATE VIEW [dbo].[vCreateItemBaseCenterMember]
 AS
-SELECT        tblCableConstructionReferences.Base, tblCableConstructionReferences.ConstructionDescription, tblCableConstructions.NominalOD AS OD, 
+SELECT  DISTINCT	      tblCableConstructionReferences.Base, tblCableConstructionReferences.ConstructionDescription, tblCableConstructions.NominalOD AS OD, 
                          tblCableConstructionReferences.NumSubPositions AS NumPositions, tblCableConstructionReferences.NumSubFillers AS NumFillers, 
-                         tblCableConstructions.JacketMaterial, COUNT(CableUnion.Base) AS CountOfBase, tblCableConstructionReferences.Active, 
+                         tblCableConstructions.JacketMaterial, '' CountOfBase, tblCableConstructionReferences.Active, 
                          tblCableConstructionReferences.DesignCode, tblCableConstructions.CablePasses AS Location, tblCableConstructionReferences.ReleasedDesign, 
-                         tblCableConstructionReferences.TBType, tblCableConstructionReferences.BaseID
+                         tblCableConstructionReferences.TBType, tblCableConstructionReferences.BaseID, DesignExtension
 FROM            tblCableConstructions INNER JOIN
                          tblCableConstructionReferences INNER JOIN
                          CableRunSpeeds ON tblCableConstructionReferences.PrefixID = CableRunSpeeds.PrefixID ON 
                          tblCableConstructions.BaseID = tblCableConstructionReferences.BaseID LEFT OUTER JOIN
                          CableUnion ON tblCableConstructionReferences.Base = CableUnion.Base
-GROUP BY tblCableConstructionReferences.Base, tblCableConstructionReferences.ConstructionDescription, tblCableConstructions.NominalOD, 
-                         tblCableConstructionReferences.NumSubPositions, tblCableConstructionReferences.NumSubFillers, tblCableConstructions.JacketMaterial, 
-                         tblCableConstructionReferences.Active, tblCableConstructionReferences.DesignCode, tblCableConstructions.CablePasses, 
-                         tblCableConstructionReferences.ReleasedDesign, tblCableConstructionReferences.TBType, tblCableConstructionReferences.BaseID
+--GROUP BY tblCableConstructionReferences.Base, tblCableConstructionReferences.ConstructionDescription, tblCableConstructions.NominalOD, 
+--                         tblCableConstructionReferences.NumSubPositions, tblCableConstructionReferences.NumSubFillers, tblCableConstructions.JacketMaterial, 
+--                         tblCableConstructionReferences.Active, tblCableConstructionReferences.DesignCode, tblCableConstructions.CablePasses, 
+--                         tblCableConstructionReferences.ReleasedDesign, tblCableConstructionReferences.TBType, tblCableConstructionReferences.BaseID
 
 
 GO
diff --git a/Views/dbo.vCreateItemBaseFurcation.sql b/Views/dbo.vCreateItemBaseFurcation.sql
index 3f6d5f9..2bef8dd 100644
--- a/Views/dbo.vCreateItemBaseFurcation.sql
+++ b/Views/dbo.vCreateItemBaseFurcation.sql
@@ -2,17 +2,15 @@
 GO
 SET ANSI_NULLS ON
 GO
-
-
 CREATE VIEW [dbo].[vCreateItemBaseFurcation]
 AS
-SELECT        dbo.tblCableConstructionReferences.Base, dbo.tblCableConstructionReferences.ConstructionDescription, dbo.tblCableConstructions.NominalOD AS OD, 
+SELECT    DISTINCT    dbo.tblCableConstructionReferences.Base, dbo.tblCableConstructionReferences.ConstructionDescription, dbo.tblCableConstructions.NominalOD AS OD, 
                          dbo.tblCableConstructionReferences.NumSubPositions AS NumPositions, dbo.tblCableConstructionReferences.NumSubFillers AS NumFillers, 
-                         dbo.tblCableConstructions.JacketMaterial, COUNT(dbo.CableUnion.Base) AS CountOfBase, dbo.tblCableConstructionReferences.Active, 
+                         dbo.tblCableConstructions.JacketMaterial, '' AS CountOfBase, dbo.tblCableConstructionReferences.Active, 
                          dbo.tblCableConstructionReferences.DesignCode, dbo.tblCableConstructions.CablePasses AS Location, dbo.tblCableConstructionReferences.ReleasedDesign, 
                          dbo.tblCableTBType.TBLetter, dbo.tblCableConstructionReferences.TBType, dbo.tblCableConstructionReferences.BaseID, 
                          dbo.tblDesignCodeFurcationTube.FurcationLetter, dbo.tblDesignCodeFurcationTube.Furcation, dbo.tblCableTightBufferReference.TBTypeID, 
-                         dbo.tblCableTightBufferReference.TightBuffered
+                         dbo.tblCableTightBufferReference.TightBuffered, DesignExtension
 FROM            dbo.tblCableConstructions INNER JOIN
                          dbo.tblCableConstructionReferences INNER JOIN
                          dbo.CableRunSpeeds ON dbo.tblCableConstructionReferences.PrefixID = dbo.CableRunSpeeds.PrefixID ON 
@@ -22,13 +20,7 @@
                          dbo.tblCableTBType ON dbo.tblCableTightBufferReference.TBtypeID = dbo.tblCableTBType.TBIndicatorID INNER JOIN
                          dbo.tblFurcationTubeReference ON dbo.tblFurcationTubeReference.BaseID = dbo.tblCableConstructionReferences.BaseID INNER JOIN
                          dbo.tblDesignCodeFurcationTube ON dbo.tblDesignCodeFurcationTube.Furcation = dbo.tblFurcationTubeReference.Furcation
-GROUP BY dbo.tblCableConstructionReferences.Base, dbo.tblCableConstructionReferences.ConstructionDescription, dbo.tblCableConstructions.NominalOD, 
-                         dbo.tblCableConstructionReferences.NumSubPositions, dbo.tblCableConstructionReferences.NumSubFillers, dbo.tblCableConstructions.JacketMaterial, 
-                         dbo.tblCableConstructionReferences.Active, dbo.tblCableConstructionReferences.DesignCode, dbo.tblCableConstructions.CablePasses, 
-                         dbo.tblCableConstructionReferences.ReleasedDesign, dbo.tblCableTBType.TBLetter, dbo.tblCableConstructionReferences.TBType, 
-                         dbo.tblCableConstructionReferences.BaseID, dbo.tblDesignCodeFurcationTube.FurcationLetter, dbo.tblDesignCodeFurcationTube.Furcation, 
-                         dbo.tblCableTightBufferReference.TBTypeID, dbo.tblCableTightBufferReference.TightBuffered
-
+WHERE					tblCableConstructionReferences.Active = 1
 
 
 
diff --git a/Views/dbo.vFindCutSheet.sql b/Views/dbo.vFindCutSheet.sql
index 12c105d..cf069d1 100644
--- a/Views/dbo.vFindCutSheet.sql
+++ b/Views/dbo.vFindCutSheet.sql
@@ -6,21 +6,24 @@
 Author:		Bryan Eddy
 Date:		1/11/2018
 Desc:		Data provided for cut sheet view
-Version:	1
-Update:		Changed criteria to allow for more items to be viewed for cut sheets
+Version:	2
+Update:		1. Changed criteria to allow for more items to be viewed for cut sheets
+			2. Allow for unprinted items to be in the view
 
 */
 CREATE VIEW [dbo].[vFindCutSheet]
 as
 SELECT DISTINCT 
-                         CableUnion.Oracle, CableUnion.Fiber, CableUnion.Color, CableUnion.Base, tblCableConstructions_1.StandardOperation, CableUnion.ItemNo, tblCableConstructions_1.CablePasses AS Location, 
-                         tblCableConstructionReferences.RevisionDate, CableUnion.OracleStatus, CableUnion.PID, CableUnion.Fiber2, CableUnion.Customer, tblCableConstructions_1.NominalOD, CONVERT(DATE, CableUnion.[Revision Date]) 
-                         AS RevDate, CableUnion.PrintSpacing, CableUnion.[Item No], tblCableConstructions_1.TensileApplication, tblCableConstructionReferences.DesignTypeID, tblCableConstructions_1.TemperatureApplication, 
-                         tblDesignTypes.SalesForceDescription, CAST(SUBSTRING(CableUnion.ItemNo, 3, 3) AS INT) AS FiberCount, tblCableConstructionReferences.CableType, tblCableConstructionReferences.NumSubPositions, 
+                         CableUnion.Oracle, CableUnion.Fiber, CableUnion.Color, CableUnion.Base, TopCable.StandardOperation, CableUnion.ItemNo, TopCable.CablePasses AS Location, 
+                         tblCableConstructionReferences.RevisionDate, CableUnion.OracleStatus, CableUnion.PID, CableUnion.Fiber2, CableUnion.Customer, TopCable.NominalOD, CONVERT(DATE, CableUnion.[Revision Date]) 
+                         AS RevDate, CableUnion.PrintSpacing, CableUnion.[Item No], TopCable.TensileApplication, tblCableConstructionReferences.DesignTypeID, TopCable.TemperatureApplication, 
+                         tblDesignTypes.SalesForceDescription, CAST(SUBSTRING(CableUnion.ItemNo, 3, 3) AS INT) AS FiberCount,  tblCableConstructionReferences.NumSubPositions, K.CableType,
                          tblCableConstructionReferences.NumCopperUnits, 
-                         CASE WHEN tblCableConstructions_1.CablePasses = 1 THEN tblCableConstructionReferences.FibersPerBundle ELSE tblCableConstructionReferences_1.FibersPerBundle END AS FibersPerBundle, 
-                         CASE WHEN tblCableConstructions_1.CablePasses = 1 THEN tblCableConstructions_1.NominalOD ELSE tblCableConstructions.NominalOD END AS SubOD, tblCutSheetApproval.Technical_Approval, 
-                         tblCutSheetApproval.Commercial_Approval, tblCutSheetApproval.Requested, CASE WHEN ((tblCutSheetApproval.Commercial_Approval = 0 OR
+                         CASE WHEN TopCable.CablePasses = 1 THEN tblCableConstructionReferences.FibersPerBundle ELSE SubReference.FibersPerBundle END AS FibersPerBundle, 
+                         CASE WHEN TopCable.CablePasses = 1 THEN TopCable.NominalOD ELSE tblCableConstructions.NominalOD END AS SubOD
+						 , tblCutSheetApproval.Technical_Approval, 
+                         tblCutSheetApproval.Commercial_Approval, tblCutSheetApproval.Requested, 
+						 CASE WHEN ((tblCutSheetApproval.Commercial_Approval = 0 OR
                          tblCutSheetApproval.Technical_Approval = 0 OR
                          COALESCE (vArmorCoreItems_Approvals.CorCommercial_Approval, 1) = 0 OR
                          COALESCE (vArmorCoreItems_Approvals.CoreTechnical_Approval, 1) = 0)) AND Requested = 1 THEN 'Requested' WHEN ((tblCutSheetApproval.Commercial_Approval = 0 OR
@@ -28,25 +31,27 @@
                          COALESCE (vArmorCoreItems_Approvals.CorCommercial_Approval, 1) = 0 OR
                          COALESCE (vArmorCoreItems_Approvals.CoreTechnical_Approval, 1) = 0)) AND Requested = 0 THEN 'Not Approved' ELSE 'Approved' END AS Status
 						 ,tblCableConstructionReferences.SetupID AS ConstructionID, ItemID
-FROM            CableUnion INNER JOIN
-                         tblCableConstructionReferences ON CableUnion.Base = tblCableConstructionReferences.Base INNER JOIN
-                         tblCableConstructions AS tblCableConstructions_1 ON tblCableConstructionReferences.BaseID = tblCableConstructions_1.BaseID INNER JOIN
+FROM            dbo.CableUnion INNER JOIN
+                         dbo.tblCableConstructionReferences ON CableUnion.Base = tblCableConstructionReferences.Base INNER JOIN
+                         dbo.tblCableConstructions AS TopCable ON tblCableConstructionReferences.BaseID = TopCable.BaseID INNER JOIN
                          tblDesignTypes ON tblCableConstructionReferences.DesignTypeID = tblDesignTypes.DesignTypeID INNER JOIN
                          tblCableTightBufferReference ON tblCableConstructionReferences.TBType = tblCableTightBufferReference.TBType INNER JOIN
                          tblCutSheetApproval ON tblCableConstructionReferences.Base = tblCutSheetApproval.Base LEFT OUTER JOIN
-                         --tblCableTemperatureStandards ON tblCableConstructions_1.TemperatureApplication = tblCableTemperatureStandards.TemperatureApplication LEFT OUTER JOIN
                          vSubunitBases RIGHT OUTER JOIN
-                         tblCableConstructionReferences AS tblCableConstructionReferences_1 ON vSubunitBases.[Level 1 Product] = tblCableConstructionReferences_1.Base ON 
+                         tblCableConstructionReferences AS SubReference ON vSubunitBases.[Level 1 Product] = SubReference.Base ON 
                          tblCableConstructionReferences.SetupID = vSubunitBases.ProductID LEFT OUTER JOIN
-                         tblCableConstructions ON tblCableConstructionReferences_1.BaseID = tblCableConstructions.BaseID LEFT OUTER JOIN
-                         Standards.CableConstructionStandards ON Standards.CableConstructionStandards.BaseID = tblCableConstructions_1.BaseID LEFT OUTER JOIN
+                         tblCableConstructions ON SubReference.BaseID = tblCableConstructions.BaseID LEFT OUTER JOIN
+                         Standards.CableConstructionStandards ON Standards.CableConstructionStandards.BaseID = TopCable.BaseID LEFT OUTER JOIN
                          vArmorCoreItems_Approvals ON vArmorCoreItems_Approvals.ArmoredItem = CableUnion.Oracle
 						 INNER JOIN dbo.tblCableType K ON K.CableType = tblCableConstructionReferences.CableType
-WHERE        (CableUnion.Customer LIKE 'AFL STANDARD%' OR
-                         CableUnion.Customer LIKE 'AFL GENERIC%' OR  CableUnion.Oracle LIKE 'DN%') AND (tblCableConstructionReferences.ReleasedDesign <> 0) AND (CableUnion.Oracle NOT LIKE '%test%') AND (CableUnion.OracleStatus <> 'Obsolete') AND 
+WHERE        
+						(CableUnion.Customer LIKE 'AFL STANDARD%' OR
+                         CableUnion.Customer LIKE 'AFL GENERIC%' OR  CableUnion.Oracle LIKE 'DN%' OR customer LIKE 'unprinted%') AND 
+						 (tblCableConstructionReferences.ReleasedDesign <> 0) 
+						 AND (CableUnion.Oracle NOT LIKE '%test%') AND (CableUnion.OracleStatus <> 'Obsolete') AND 
                          (CableUnion.OracleStatus <> 'Discontd') AND (ISNUMERIC(SUBSTRING(CableUnion.ItemNo, 3, 3)) = 1) AND (CableUnion.Active <> 0) AND 
-                         (tblCableConstructionReferences.ReleasedDesign <> 0) AND (CableUnion.OracleStatus <> 'Obsolete') AND (CableUnion.OracleStatus <> 'Discontd') AND 
-                         (ISNUMERIC(SUBSTRING(CableUnion.ItemNo, 3, 3)) = 1) AND (CableUnion.Active <> 0) AND (CableUnion.Oracle NOT LIKE '%test%') AND K.CableID = 1 --AND LEFT(ORACLE,1) = 'P'
+                         (tblCableConstructionReferences.ReleasedDesign <> 0) AND 
+                         (CableUnion.Active <> 0) AND (CableUnion.Oracle NOT LIKE '%test%') AND K.CableID = 1
 
 
 
diff --git a/Views/dbo.vSalesHistory.sql b/Views/dbo.vSalesHistory.sql
index d2bcd64..455c1a7 100644
--- a/Views/dbo.vSalesHistory.sql
+++ b/Views/dbo.vSalesHistory.sql
@@ -3,25 +3,29 @@
 SET ANSI_NULLS ON
 GO
 
-
 /*
 Author:		Bryan Eddy
 Desc:		Show sales history to various applications
 Date:		1/23/2018
-Version:	1
-Update:		Updated table to pull data from SalesHistory_BI_Data to Oracle.MarginRevenueExtractSalesHistory (Margin extract from Oracle)
+Version:	2
+Update:		1. Updated table to pull data from SalesHistory_BI_Data to Oracle.MarginRevenueExtractSalesHistory (Margin extract from Oracle)
+			2. 
 
 */
 
 
 CREATE VIEW [dbo].[vSalesHistory]
 AS
+WITH cteSales
+AS(
 SELECT BOOKED_DATE AS DATE, BILL_TO_NAME AS CUSTOMER, ITEM_NUMBER, ITEM_DESCRIPTION,ORDER_NUMBER AS SO_NUMBER,REVENUE, SO_LINE_NUMBER
 ,CASE WHEN UNIT_OF_MEASURE = 'FT' THEN ROUND(QUANTITY/3.281,2) ELSE QUANTITY END AS QUANTITY
-, CASE WHEN UNIT_OF_MEASURE = 'FT' THEN ROUND(REVENUE/QUANTITY/3.281,5) ELSE REVENUE END AS PricePerUOM
 , CASE WHEN UNIT_OF_MEASURE = 'FT' THEN 'M' ELSE UNIT_OF_MEASURE END AS UOM
 ,CURR_MATERIAL_COST, CURR_RESOURCE_COST, CURR_OVERHEAD_COST
 FROM Oracle.MarginRevenueExtractSalesHistory
+)
+SELECT *,  CASE WHEN QUANTITY <> 0 THEN ROUND(REVENUE/QUANTITY,5)  ELSE 0 END PricePerUOM
+FROM cteSales
 
 
 GO
diff --git a/Views/dbo.vSetup_Scheduling_LineSpeed.sql b/Views/dbo.vSetup_Scheduling_LineSpeed.sql
index c8d42f9..d319d7c 100644
--- a/Views/dbo.vSetup_Scheduling_LineSpeed.sql
+++ b/Views/dbo.vSetup_Scheduling_LineSpeed.sql
@@ -11,11 +11,11 @@
 
  CREATE VIEW [dbo].[vSetup_Scheduling_LineSpeed]
  as
- SELECT DISTINCT  G.OperationCode, K.MachineID,E.AttributeValue as LineSpeed, e.ProcessID, D.MachineNumber
+ SELECT DISTINCT  G.OperationCode, K.MachineID,E.AttributeValue as LineSpeed, e.ProcessID, DLeft.MachineNumber
  FROM Setup.vSetup_Cable_Base G INNER JOIN Setup.tblSetup K ON G.Setup = K.SetupNumber
  INNER JOIN setup.tblSetupAttributes E ON E.SetupID = K.SetupID
  INNER JOIN [Setup].[tblAttributes] I ON E.AttributeID = I.AttributeID
- INNER JOIN setup.tblProcessMachines D ON D.MachineID = K.MachineID AND D.ProcessID = K.ProcessID
+ INNER JOIN (Setup.tblProcessMachines AS DLeft INNER JOIN Setup.MachineMapping AS DRight ON DLeft.processid=DRight.processid AND DLeft.machineid=DRight.machineid) ON DLeft.MachineID = K.MachineID AND DLeft.ProcessID = K.ProcessID
  WHERE I.AttributeName LIKE 'LINESPEED' AND E.IneffectiveDate > GETDATE() AND I.AttrIneffectiveDate > GETDATE()
  and e.AttributeValue <> 'tbd' AND MachineNumber  like 'sh [124]'
  and E.ProcessID in (510,523,615,850) --and base like 't%'
